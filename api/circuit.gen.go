// Code generated by circuitgen tool. DO NOT EDIT

package api

import (
	"context"
	"io"

	"github.com/cep21/circuit/v3"
)

// CircuitWrapperClientWithResponsesCircuitConfig contains configuration for CircuitWrapperClientWithResponsesCircuit. All fields are optional
type CircuitWrapperClientWithResponsesCircuitConfig struct {
	// ShouldSkipError determines whether an error should be skipped and have the circuit
	// track the call as successful. This takes precedence over IsBadRequest
	ShouldSkipError func(error) bool

	// IsBadRequest is an optional bad request checker. It is useful to not count user errors as faults
	IsBadRequest func(error) bool

	// Prefix is prepended to all circuit names
	Prefix string

	// Defaults are used for all created circuits. Per-circuit configs override this
	Defaults circuit.Config

	// CircuitV5ApiWebOauthAuthorizeWithBodyWithResponse is the configuration used for the V5ApiWebOauthAuthorizeWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebOauthAuthorizeWithBodyWithResponse circuit.Config
	// CircuitV5ApiWebOauthAuthorizeWithResponse is the configuration used for the V5ApiWebOauthAuthorizeWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebOauthAuthorizeWithResponse circuit.Config
	// CircuitV5ApiWebOauthTokenWithBodyWithResponse is the configuration used for the V5ApiWebOauthTokenWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebOauthTokenWithBodyWithResponse circuit.Config
	// CircuitV5ApiWebOauthTokenWithResponse is the configuration used for the V5ApiWebOauthTokenWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebOauthTokenWithResponse circuit.Config
	// CircuitV5ApiWebPublicCampaignChallengeControllerIndexWithResponse is the configuration used for the V5ApiWebPublicCampaignChallengeControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicCampaignChallengeControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicCampaignControllerShowWithResponse is the configuration used for the V5ApiWebPublicCampaignControllerShowWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicCampaignControllerShowWithResponse circuit.Config
	// CircuitV5ApiWebPublicCampaignDonationControllerIndexWithResponse is the configuration used for the V5ApiWebPublicCampaignDonationControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicCampaignDonationControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse is the configuration used for the V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse circuit.Config
	// CircuitV5ApiWebPublicCampaignMilestoneControllerIndexWithResponse is the configuration used for the V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicCampaignMilestoneControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicCampaignPollControllerIndexWithResponse is the configuration used for the V5ApiWebPublicCampaignPollControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicCampaignPollControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicCampaignRewardControllerIndexWithResponse is the configuration used for the V5ApiWebPublicCampaignRewardControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicCampaignRewardControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicCampaignScheduleControllerIndexWithResponse is the configuration used for the V5ApiWebPublicCampaignScheduleControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicCampaignScheduleControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicCauseCampaignControllerIndexWithResponse is the configuration used for the V5ApiWebPublicCauseCampaignControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicCauseCampaignControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicCauseControllerShowWithResponse is the configuration used for the V5ApiWebPublicCauseControllerShowWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicCauseControllerShowWithResponse circuit.Config
	// CircuitV5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse is the configuration used for the V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse is the configuration used for the V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse circuit.Config
	// CircuitV5ApiWebPublicCauseLeaderboardControllerDonorWithResponse is the configuration used for the V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicCauseLeaderboardControllerDonorWithResponse circuit.Config
	// CircuitV5ApiWebPublicCauseLeaderboardControllerTeamWithResponse is the configuration used for the V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicCauseLeaderboardControllerTeamWithResponse circuit.Config
	// CircuitV5ApiWebPublicCauseLeaderboardControllerUserWithResponse is the configuration used for the V5ApiWebPublicCauseLeaderboardControllerUserWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicCauseLeaderboardControllerUserWithResponse circuit.Config
	// CircuitV5ApiWebPublicFundraisingEventControllerShowWithResponse is the configuration used for the V5ApiWebPublicFundraisingEventControllerShowWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicFundraisingEventControllerShowWithResponse circuit.Config
	// CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse is the configuration used for the V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse circuit.Config
	// CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse is the configuration used for the V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse circuit.Config
	// CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse is the configuration used for the V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse circuit.Config
	// CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse is the configuration used for the V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse circuit.Config
	// CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse is the configuration used for the V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse circuit.Config
	// CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse is the configuration used for the V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse circuit.Config
	// CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse is the configuration used for the V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse circuit.Config
	// CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse is the configuration used for the V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse circuit.Config
	// CircuitV5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse is the configuration used for the V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse is the configuration used for the V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicTeamCampaignControllerShowWithResponse is the configuration used for the V5ApiWebPublicTeamCampaignControllerShowWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicTeamCampaignControllerShowWithResponse circuit.Config
	// CircuitV5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse is the configuration used for the V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse is the configuration used for the V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse circuit.Config
	// CircuitV5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse is the configuration used for the V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse circuit.Config
	// CircuitV5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse is the configuration used for the V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicTeamCampaignPollControllerIndexWithResponse is the configuration used for the V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicTeamCampaignPollControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse is the configuration used for the V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse is the configuration used for the V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse is the configuration used for the V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicTeamControllerShowWithResponse is the configuration used for the V5ApiWebPublicTeamControllerShowWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicTeamControllerShowWithResponse circuit.Config
	// CircuitV5ApiWebPublicTeamMemberControllerIndexWithResponse is the configuration used for the V5ApiWebPublicTeamMemberControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicTeamMemberControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse is the configuration used for the V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicUserCampaignControllerIndexWithResponse is the configuration used for the V5ApiWebPublicUserCampaignControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicUserCampaignControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicUserControllerCurrentUserWithResponse is the configuration used for the V5ApiWebPublicUserControllerCurrentUserWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicUserControllerCurrentUserWithResponse circuit.Config
	// CircuitV5ApiWebPublicUserControllerShowWithResponse is the configuration used for the V5ApiWebPublicUserControllerShowWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicUserControllerShowWithResponse circuit.Config
	// CircuitV5ApiWebPublicUserIntegrationEventControllerIndexWithResponse is the configuration used for the V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicUserIntegrationEventControllerIndexWithResponse circuit.Config
	// CircuitV5ApiWebPublicUserTeamControllerIndexWithResponse is the configuration used for the V5ApiWebPublicUserTeamControllerIndexWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebPublicUserTeamControllerIndexWithResponse circuit.Config
}

// CircuitWrapperClientWithResponsesCircuit is a circuit wrapper for ClientWithResponsesInterface
type CircuitWrapperClientWithResponsesCircuit struct {
	ClientWithResponsesInterface

	// ShouldSkipError determines whether an error should be skipped and have the circuit
	// track the call as successful. This takes precedence over IsBadRequest
	ShouldSkipError func(error) bool

	// IsBadRequest checks whether to count a user error against the circuit. It is recommended to set this
	IsBadRequest func(error) bool

	// CircuitV5ApiWebOauthAuthorizeWithBodyWithResponse is the circuit for method V5ApiWebOauthAuthorizeWithBodyWithResponse
	CircuitV5ApiWebOauthAuthorizeWithBodyWithResponse *circuit.Circuit
	// CircuitV5ApiWebOauthAuthorizeWithResponse is the circuit for method V5ApiWebOauthAuthorizeWithResponse
	CircuitV5ApiWebOauthAuthorizeWithResponse *circuit.Circuit
	// CircuitV5ApiWebOauthTokenWithBodyWithResponse is the circuit for method V5ApiWebOauthTokenWithBodyWithResponse
	CircuitV5ApiWebOauthTokenWithBodyWithResponse *circuit.Circuit
	// CircuitV5ApiWebOauthTokenWithResponse is the circuit for method V5ApiWebOauthTokenWithResponse
	CircuitV5ApiWebOauthTokenWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicCampaignChallengeControllerIndexWithResponse is the circuit for method V5ApiWebPublicCampaignChallengeControllerIndexWithResponse
	CircuitV5ApiWebPublicCampaignChallengeControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicCampaignControllerShowWithResponse is the circuit for method V5ApiWebPublicCampaignControllerShowWithResponse
	CircuitV5ApiWebPublicCampaignControllerShowWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicCampaignDonationControllerIndexWithResponse is the circuit for method V5ApiWebPublicCampaignDonationControllerIndexWithResponse
	CircuitV5ApiWebPublicCampaignDonationControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse is the circuit for method V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse
	CircuitV5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicCampaignMilestoneControllerIndexWithResponse is the circuit for method V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse
	CircuitV5ApiWebPublicCampaignMilestoneControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicCampaignPollControllerIndexWithResponse is the circuit for method V5ApiWebPublicCampaignPollControllerIndexWithResponse
	CircuitV5ApiWebPublicCampaignPollControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicCampaignRewardControllerIndexWithResponse is the circuit for method V5ApiWebPublicCampaignRewardControllerIndexWithResponse
	CircuitV5ApiWebPublicCampaignRewardControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicCampaignScheduleControllerIndexWithResponse is the circuit for method V5ApiWebPublicCampaignScheduleControllerIndexWithResponse
	CircuitV5ApiWebPublicCampaignScheduleControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicCauseCampaignControllerIndexWithResponse is the circuit for method V5ApiWebPublicCauseCampaignControllerIndexWithResponse
	CircuitV5ApiWebPublicCauseCampaignControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicCauseControllerShowWithResponse is the circuit for method V5ApiWebPublicCauseControllerShowWithResponse
	CircuitV5ApiWebPublicCauseControllerShowWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse is the circuit for method V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse
	CircuitV5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse is the circuit for method V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse
	CircuitV5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicCauseLeaderboardControllerDonorWithResponse is the circuit for method V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse
	CircuitV5ApiWebPublicCauseLeaderboardControllerDonorWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicCauseLeaderboardControllerTeamWithResponse is the circuit for method V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse
	CircuitV5ApiWebPublicCauseLeaderboardControllerTeamWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicCauseLeaderboardControllerUserWithResponse is the circuit for method V5ApiWebPublicCauseLeaderboardControllerUserWithResponse
	CircuitV5ApiWebPublicCauseLeaderboardControllerUserWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicFundraisingEventControllerShowWithResponse is the circuit for method V5ApiWebPublicFundraisingEventControllerShowWithResponse
	CircuitV5ApiWebPublicFundraisingEventControllerShowWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse is the circuit for method V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse
	CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse is the circuit for method V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse
	CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse is the circuit for method V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse
	CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse is the circuit for method V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse
	CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse is the circuit for method V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse
	CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse is the circuit for method V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse
	CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse is the circuit for method V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse
	CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse is the circuit for method V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse
	CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse is the circuit for method V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse
	CircuitV5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse is the circuit for method V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse
	CircuitV5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicTeamCampaignControllerShowWithResponse is the circuit for method V5ApiWebPublicTeamCampaignControllerShowWithResponse
	CircuitV5ApiWebPublicTeamCampaignControllerShowWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse is the circuit for method V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse
	CircuitV5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse is the circuit for method V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse
	CircuitV5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse is the circuit for method V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse
	CircuitV5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse is the circuit for method V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse
	CircuitV5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicTeamCampaignPollControllerIndexWithResponse is the circuit for method V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse
	CircuitV5ApiWebPublicTeamCampaignPollControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse is the circuit for method V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse
	CircuitV5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse is the circuit for method V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse
	CircuitV5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse is the circuit for method V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse
	CircuitV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicTeamControllerShowWithResponse is the circuit for method V5ApiWebPublicTeamControllerShowWithResponse
	CircuitV5ApiWebPublicTeamControllerShowWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicTeamMemberControllerIndexWithResponse is the circuit for method V5ApiWebPublicTeamMemberControllerIndexWithResponse
	CircuitV5ApiWebPublicTeamMemberControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse is the circuit for method V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse
	CircuitV5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicUserCampaignControllerIndexWithResponse is the circuit for method V5ApiWebPublicUserCampaignControllerIndexWithResponse
	CircuitV5ApiWebPublicUserCampaignControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicUserControllerCurrentUserWithResponse is the circuit for method V5ApiWebPublicUserControllerCurrentUserWithResponse
	CircuitV5ApiWebPublicUserControllerCurrentUserWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicUserControllerShowWithResponse is the circuit for method V5ApiWebPublicUserControllerShowWithResponse
	CircuitV5ApiWebPublicUserControllerShowWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicUserIntegrationEventControllerIndexWithResponse is the circuit for method V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse
	CircuitV5ApiWebPublicUserIntegrationEventControllerIndexWithResponse *circuit.Circuit
	// CircuitV5ApiWebPublicUserTeamControllerIndexWithResponse is the circuit for method V5ApiWebPublicUserTeamControllerIndexWithResponse
	CircuitV5ApiWebPublicUserTeamControllerIndexWithResponse *circuit.Circuit
}

// NewCircuitWrapperClientWithResponsesCircuit creates a new circuit wrapper and initializes circuits
func NewCircuitWrapperClientWithResponsesCircuit(
	manager *circuit.Manager,
	embedded ClientWithResponsesInterface,
	conf CircuitWrapperClientWithResponsesCircuitConfig,
) (*CircuitWrapperClientWithResponsesCircuit, error) {
	if conf.ShouldSkipError == nil {
		conf.ShouldSkipError = func(err error) bool {
			return false
		}
	}

	if conf.IsBadRequest == nil {
		conf.IsBadRequest = func(err error) bool {
			return false
		}
	}

	w := &CircuitWrapperClientWithResponsesCircuit{
		ClientWithResponsesInterface: embedded,
		ShouldSkipError:              conf.ShouldSkipError,
		IsBadRequest:                 conf.IsBadRequest,
	}

	var err error
	w.CircuitV5ApiWebOauthAuthorizeWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebOauthAuthorizeWithBodyWithResponse", conf.CircuitV5ApiWebOauthAuthorizeWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebOauthAuthorizeWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebOauthAuthorizeWithResponse", conf.CircuitV5ApiWebOauthAuthorizeWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebOauthTokenWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebOauthTokenWithBodyWithResponse", conf.CircuitV5ApiWebOauthTokenWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebOauthTokenWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebOauthTokenWithResponse", conf.CircuitV5ApiWebOauthTokenWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicCampaignChallengeControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicCampaignChallengeControllerIndexWithResponse", conf.CircuitV5ApiWebPublicCampaignChallengeControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicCampaignControllerShowWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicCampaignControllerShowWithResponse", conf.CircuitV5ApiWebPublicCampaignControllerShowWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicCampaignDonationControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicCampaignDonationControllerIndexWithResponse", conf.CircuitV5ApiWebPublicCampaignDonationControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse", conf.CircuitV5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicCampaignMilestoneControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse", conf.CircuitV5ApiWebPublicCampaignMilestoneControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicCampaignPollControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicCampaignPollControllerIndexWithResponse", conf.CircuitV5ApiWebPublicCampaignPollControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicCampaignRewardControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicCampaignRewardControllerIndexWithResponse", conf.CircuitV5ApiWebPublicCampaignRewardControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicCampaignScheduleControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicCampaignScheduleControllerIndexWithResponse", conf.CircuitV5ApiWebPublicCampaignScheduleControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicCauseCampaignControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicCauseCampaignControllerIndexWithResponse", conf.CircuitV5ApiWebPublicCauseCampaignControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicCauseControllerShowWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicCauseControllerShowWithResponse", conf.CircuitV5ApiWebPublicCauseControllerShowWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse", conf.CircuitV5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse", conf.CircuitV5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicCauseLeaderboardControllerDonorWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse", conf.CircuitV5ApiWebPublicCauseLeaderboardControllerDonorWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicCauseLeaderboardControllerTeamWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse", conf.CircuitV5ApiWebPublicCauseLeaderboardControllerTeamWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicCauseLeaderboardControllerUserWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicCauseLeaderboardControllerUserWithResponse", conf.CircuitV5ApiWebPublicCauseLeaderboardControllerUserWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicFundraisingEventControllerShowWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicFundraisingEventControllerShowWithResponse", conf.CircuitV5ApiWebPublicFundraisingEventControllerShowWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse", conf.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse", conf.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse", conf.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse", conf.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse", conf.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse", conf.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse", conf.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse", conf.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse", conf.CircuitV5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse", conf.CircuitV5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicTeamCampaignControllerShowWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicTeamCampaignControllerShowWithResponse", conf.CircuitV5ApiWebPublicTeamCampaignControllerShowWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse", conf.CircuitV5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse", conf.CircuitV5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse", conf.CircuitV5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse", conf.CircuitV5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicTeamCampaignPollControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse", conf.CircuitV5ApiWebPublicTeamCampaignPollControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse", conf.CircuitV5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse", conf.CircuitV5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse", conf.CircuitV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicTeamControllerShowWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicTeamControllerShowWithResponse", conf.CircuitV5ApiWebPublicTeamControllerShowWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicTeamMemberControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicTeamMemberControllerIndexWithResponse", conf.CircuitV5ApiWebPublicTeamMemberControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse", conf.CircuitV5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicUserCampaignControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicUserCampaignControllerIndexWithResponse", conf.CircuitV5ApiWebPublicUserCampaignControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicUserControllerCurrentUserWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicUserControllerCurrentUserWithResponse", conf.CircuitV5ApiWebPublicUserControllerCurrentUserWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicUserControllerShowWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicUserControllerShowWithResponse", conf.CircuitV5ApiWebPublicUserControllerShowWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicUserIntegrationEventControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse", conf.CircuitV5ApiWebPublicUserIntegrationEventControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebPublicUserTeamControllerIndexWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebPublicUserTeamControllerIndexWithResponse", conf.CircuitV5ApiWebPublicUserTeamControllerIndexWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	return w, nil
}

// V5ApiWebOauthAuthorizeWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebOauthAuthorizeWithBodyWithResponse with CircuitV5ApiWebOauthAuthorizeWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebOauthAuthorizeWithBodyWithResponse(ctx context.Context, p1 *V5ApiWebOauthAuthorizeParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*V5ApiWebOauthAuthorizeResponse, error) {
	var r0 *V5ApiWebOauthAuthorizeResponse
	var skippedErr error

	err := w.CircuitV5ApiWebOauthAuthorizeWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebOauthAuthorizeWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebOauthAuthorizeWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebOauthAuthorizeWithResponse with CircuitV5ApiWebOauthAuthorizeWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebOauthAuthorizeWithResponse(ctx context.Context, p1 *V5ApiWebOauthAuthorizeParams, p2 map[string]interface{}, p3 ...RequestEditorFn) (*V5ApiWebOauthAuthorizeResponse, error) {
	var r0 *V5ApiWebOauthAuthorizeResponse
	var skippedErr error

	err := w.CircuitV5ApiWebOauthAuthorizeWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebOauthAuthorizeWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebOauthTokenWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebOauthTokenWithBodyWithResponse with CircuitV5ApiWebOauthTokenWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebOauthTokenWithBodyWithResponse(ctx context.Context, p1 *V5ApiWebOauthTokenParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*V5ApiWebOauthTokenResponse, error) {
	var r0 *V5ApiWebOauthTokenResponse
	var skippedErr error

	err := w.CircuitV5ApiWebOauthTokenWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebOauthTokenWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebOauthTokenWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebOauthTokenWithResponse with CircuitV5ApiWebOauthTokenWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebOauthTokenWithResponse(ctx context.Context, p1 *V5ApiWebOauthTokenParams, p2 map[string]interface{}, p3 ...RequestEditorFn) (*V5ApiWebOauthTokenResponse, error) {
	var r0 *V5ApiWebOauthTokenResponse
	var skippedErr error

	err := w.CircuitV5ApiWebOauthTokenWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebOauthTokenWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicCampaignChallengeControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicCampaignChallengeControllerIndexWithResponse with CircuitV5ApiWebPublicCampaignChallengeControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicCampaignChallengeControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicCampaignChallengeControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicCampaignChallengeControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicCampaignChallengeControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicCampaignChallengeControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicCampaignChallengeControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicCampaignControllerShowWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicCampaignControllerShowWithResponse with CircuitV5ApiWebPublicCampaignControllerShowWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicCampaignControllerShowWithResponse(ctx context.Context, p1 string, p2 ...RequestEditorFn) (*V5ApiWebPublicCampaignControllerShowResponse, error) {
	var r0 *V5ApiWebPublicCampaignControllerShowResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicCampaignControllerShowWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicCampaignControllerShowWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicCampaignDonationControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicCampaignDonationControllerIndexWithResponse with CircuitV5ApiWebPublicCampaignDonationControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicCampaignDonationControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicCampaignDonationControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicCampaignDonationControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicCampaignDonationControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicCampaignDonationControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicCampaignDonationControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse with CircuitV5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicCampaignLeaderboardControllerDonorParams, p3 ...RequestEditorFn) (*V5ApiWebPublicCampaignLeaderboardControllerDonorResponse, error) {
	var r0 *V5ApiWebPublicCampaignLeaderboardControllerDonorResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse with CircuitV5ApiWebPublicCampaignMilestoneControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicCampaignMilestoneControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicCampaignMilestoneControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicCampaignMilestoneControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicCampaignMilestoneControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicCampaignPollControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicCampaignPollControllerIndexWithResponse with CircuitV5ApiWebPublicCampaignPollControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicCampaignPollControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicCampaignPollControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicCampaignPollControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicCampaignPollControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicCampaignPollControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicCampaignPollControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicCampaignRewardControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicCampaignRewardControllerIndexWithResponse with CircuitV5ApiWebPublicCampaignRewardControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicCampaignRewardControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicCampaignRewardControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicCampaignRewardControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicCampaignRewardControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicCampaignRewardControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicCampaignRewardControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicCampaignScheduleControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicCampaignScheduleControllerIndexWithResponse with CircuitV5ApiWebPublicCampaignScheduleControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicCampaignScheduleControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicCampaignScheduleControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicCampaignScheduleControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicCampaignScheduleControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicCampaignScheduleControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicCampaignScheduleControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicCauseCampaignControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicCauseCampaignControllerIndexWithResponse with CircuitV5ApiWebPublicCauseCampaignControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicCauseCampaignControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicCauseCampaignControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicCauseCampaignControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicCauseCampaignControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicCauseCampaignControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicCauseCampaignControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicCauseControllerShowWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicCauseControllerShowWithResponse with CircuitV5ApiWebPublicCauseControllerShowWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicCauseControllerShowWithResponse(ctx context.Context, p1 string, p2 ...RequestEditorFn) (*V5ApiWebPublicCauseControllerShowResponse, error) {
	var r0 *V5ApiWebPublicCauseControllerShowResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicCauseControllerShowWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicCauseControllerShowWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse with CircuitV5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicCauseFundraisingEventControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicCauseFundraisingEventControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicCauseFundraisingEventControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse with CircuitV5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse(ctx context.Context, p1 string, p2 ...RequestEditorFn) (*V5ApiWebPublicCauseLeaderboardControllerConfiguredResponse, error) {
	var r0 *V5ApiWebPublicCauseLeaderboardControllerConfiguredResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse with CircuitV5ApiWebPublicCauseLeaderboardControllerDonorWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicCauseLeaderboardControllerDonorParams, p3 ...RequestEditorFn) (*V5ApiWebPublicCauseLeaderboardControllerDonorResponse, error) {
	var r0 *V5ApiWebPublicCauseLeaderboardControllerDonorResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicCauseLeaderboardControllerDonorWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse with CircuitV5ApiWebPublicCauseLeaderboardControllerTeamWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicCauseLeaderboardControllerTeamParams, p3 ...RequestEditorFn) (*V5ApiWebPublicCauseLeaderboardControllerTeamResponse, error) {
	var r0 *V5ApiWebPublicCauseLeaderboardControllerTeamResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicCauseLeaderboardControllerTeamWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicCauseLeaderboardControllerUserWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicCauseLeaderboardControllerUserWithResponse with CircuitV5ApiWebPublicCauseLeaderboardControllerUserWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicCauseLeaderboardControllerUserWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicCauseLeaderboardControllerUserParams, p3 ...RequestEditorFn) (*V5ApiWebPublicCauseLeaderboardControllerUserResponse, error) {
	var r0 *V5ApiWebPublicCauseLeaderboardControllerUserResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicCauseLeaderboardControllerUserWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicCauseLeaderboardControllerUserWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicFundraisingEventControllerShowWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicFundraisingEventControllerShowWithResponse with CircuitV5ApiWebPublicFundraisingEventControllerShowWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicFundraisingEventControllerShowWithResponse(ctx context.Context, p1 string, p2 ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventControllerShowResponse, error) {
	var r0 *V5ApiWebPublicFundraisingEventControllerShowResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicFundraisingEventControllerShowWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicFundraisingEventControllerShowWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse with CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse(ctx context.Context, p1 string, p2 ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse, error) {
	var r0 *V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse with CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParams, p3 ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse, error) {
	var r0 *V5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse with CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParams, p3 ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse, error) {
	var r0 *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse with CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParams, p3 ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse, error) {
	var r0 *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse with CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParams, p3 ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse, error) {
	var r0 *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse with CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParams, p3 ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse, error) {
	var r0 *V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse with CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParams, p3 ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse, error) {
	var r0 *V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse with CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicFundraisingEventLeaderboardControllerUserParams, p3 ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse, error) {
	var r0 *V5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse with CircuitV5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicFundraisingEventSupportingEventControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse with CircuitV5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicTeamCampaignChallengeControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignChallengeControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicTeamCampaignChallengeControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicTeamCampaignControllerShowWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicTeamCampaignControllerShowWithResponse with CircuitV5ApiWebPublicTeamCampaignControllerShowWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicTeamCampaignControllerShowWithResponse(ctx context.Context, p1 string, p2 ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignControllerShowResponse, error) {
	var r0 *V5ApiWebPublicTeamCampaignControllerShowResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicTeamCampaignControllerShowWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicTeamCampaignControllerShowWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse with CircuitV5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicTeamCampaignDonationControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignDonationControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicTeamCampaignDonationControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse with CircuitV5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParams, p3 ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse, error) {
	var r0 *V5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse with CircuitV5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicTeamCampaignLeaderboardControllerUserParams, p3 ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse, error) {
	var r0 *V5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse with CircuitV5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicTeamCampaignMilestoneControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse with CircuitV5ApiWebPublicTeamCampaignPollControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicTeamCampaignPollControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignPollControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicTeamCampaignPollControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicTeamCampaignPollControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse with CircuitV5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicTeamCampaignRewardControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignRewardControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicTeamCampaignRewardControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse with CircuitV5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicTeamCampaignScheduleControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignScheduleControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicTeamCampaignScheduleControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse with CircuitV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicTeamControllerShowWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicTeamControllerShowWithResponse with CircuitV5ApiWebPublicTeamControllerShowWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicTeamControllerShowWithResponse(ctx context.Context, p1 string, p2 ...RequestEditorFn) (*V5ApiWebPublicTeamControllerShowResponse, error) {
	var r0 *V5ApiWebPublicTeamControllerShowResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicTeamControllerShowWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicTeamControllerShowWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicTeamMemberControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicTeamMemberControllerIndexWithResponse with CircuitV5ApiWebPublicTeamMemberControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicTeamMemberControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicTeamMemberControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicTeamMemberControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicTeamMemberControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicTeamMemberControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicTeamMemberControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse with CircuitV5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicTeamTeamCampaignControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicTeamTeamCampaignControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicTeamTeamCampaignControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicUserCampaignControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicUserCampaignControllerIndexWithResponse with CircuitV5ApiWebPublicUserCampaignControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicUserCampaignControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicUserCampaignControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicUserCampaignControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicUserCampaignControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicUserCampaignControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicUserCampaignControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicUserControllerCurrentUserWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicUserControllerCurrentUserWithResponse with CircuitV5ApiWebPublicUserControllerCurrentUserWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicUserControllerCurrentUserWithResponse(ctx context.Context, p1 ...RequestEditorFn) (*V5ApiWebPublicUserControllerCurrentUserResponse, error) {
	var r0 *V5ApiWebPublicUserControllerCurrentUserResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicUserControllerCurrentUserWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicUserControllerCurrentUserWithResponse(ctx, p1...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicUserControllerShowWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicUserControllerShowWithResponse with CircuitV5ApiWebPublicUserControllerShowWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicUserControllerShowWithResponse(ctx context.Context, p1 string, p2 ...RequestEditorFn) (*V5ApiWebPublicUserControllerShowResponse, error) {
	var r0 *V5ApiWebPublicUserControllerShowResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicUserControllerShowWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicUserControllerShowWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse with CircuitV5ApiWebPublicUserIntegrationEventControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicUserIntegrationEventControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicUserIntegrationEventControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicUserIntegrationEventControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicUserIntegrationEventControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebPublicUserTeamControllerIndexWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebPublicUserTeamControllerIndexWithResponse with CircuitV5ApiWebPublicUserTeamControllerIndexWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebPublicUserTeamControllerIndexWithResponse(ctx context.Context, p1 string, p2 *V5ApiWebPublicUserTeamControllerIndexParams, p3 ...RequestEditorFn) (*V5ApiWebPublicUserTeamControllerIndexResponse, error) {
	var r0 *V5ApiWebPublicUserTeamControllerIndexResponse
	var skippedErr error

	err := w.CircuitV5ApiWebPublicUserTeamControllerIndexWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebPublicUserTeamControllerIndexWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

var _ ClientWithResponsesInterface = (*CircuitWrapperClientWithResponsesCircuit)(nil)
