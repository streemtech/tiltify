// Code generated by circuitgen tool. DO NOT EDIT

package api

import (
	"context"
	"io"

	"github.com/cep21/circuit/v3"
)

// CircuitWrapperClientWithResponsesCircuitConfig contains configuration for CircuitWrapperClientWithResponsesCircuit. All fields are optional
type CircuitWrapperClientWithResponsesCircuitConfig struct {
	// ShouldSkipError determines whether an error should be skipped and have the circuit
	// track the call as successful. This takes precedence over IsBadRequest
	ShouldSkipError func(error) bool

	// IsBadRequest is an optional bad request checker. It is useful to not count user errors as faults
	IsBadRequest func(error) bool

	// Prefix is prepended to all circuit names
	Prefix string

	// Defaults are used for all created circuits. Per-circuit configs override this
	Defaults circuit.Config

	// CircuitCampaignChallengesWithResponse is the configuration used for the CampaignChallengesWithResponse circuit. This overrides values set by Defaults
	CircuitCampaignChallengesWithResponse circuit.Config
	// CircuitCampaignDonationsWithResponse is the configuration used for the CampaignDonationsWithResponse circuit. This overrides values set by Defaults
	CircuitCampaignDonationsWithResponse circuit.Config
	// CircuitCampaignLeaderboardControllerDonorWithResponse is the configuration used for the CampaignLeaderboardControllerDonorWithResponse circuit. This overrides values set by Defaults
	CircuitCampaignLeaderboardControllerDonorWithResponse circuit.Config
	// CircuitCampaignMilestonesWithResponse is the configuration used for the CampaignMilestonesWithResponse circuit. This overrides values set by Defaults
	CircuitCampaignMilestonesWithResponse circuit.Config
	// CircuitCampaignPollsWithResponse is the configuration used for the CampaignPollsWithResponse circuit. This overrides values set by Defaults
	CircuitCampaignPollsWithResponse circuit.Config
	// CircuitCampaignRewardsWithResponse is the configuration used for the CampaignRewardsWithResponse circuit. This overrides values set by Defaults
	CircuitCampaignRewardsWithResponse circuit.Config
	// CircuitCampaignSchedulesWithResponse is the configuration used for the CampaignSchedulesWithResponse circuit. This overrides values set by Defaults
	CircuitCampaignSchedulesWithResponse circuit.Config
	// CircuitCauseCampaignsWithResponse is the configuration used for the CauseCampaignsWithResponse circuit. This overrides values set by Defaults
	CircuitCauseCampaignsWithResponse circuit.Config
	// CircuitCauseFundraisingEventsWithResponse is the configuration used for the CauseFundraisingEventsWithResponse circuit. This overrides values set by Defaults
	CircuitCauseFundraisingEventsWithResponse circuit.Config
	// CircuitCauseLeaderboardControllerConfiguredWithResponse is the configuration used for the CauseLeaderboardControllerConfiguredWithResponse circuit. This overrides values set by Defaults
	CircuitCauseLeaderboardControllerConfiguredWithResponse circuit.Config
	// CircuitCauseLeaderboardControllerDonorWithResponse is the configuration used for the CauseLeaderboardControllerDonorWithResponse circuit. This overrides values set by Defaults
	CircuitCauseLeaderboardControllerDonorWithResponse circuit.Config
	// CircuitCauseLeaderboardControllerTeamWithResponse is the configuration used for the CauseLeaderboardControllerTeamWithResponse circuit. This overrides values set by Defaults
	CircuitCauseLeaderboardControllerTeamWithResponse circuit.Config
	// CircuitCauseLeaderboardControllerUserWithResponse is the configuration used for the CauseLeaderboardControllerUserWithResponse circuit. This overrides values set by Defaults
	CircuitCauseLeaderboardControllerUserWithResponse circuit.Config
	// CircuitFundraisingEventLeaderboardControllerConfiguredWithResponse is the configuration used for the FundraisingEventLeaderboardControllerConfiguredWithResponse circuit. This overrides values set by Defaults
	CircuitFundraisingEventLeaderboardControllerConfiguredWithResponse circuit.Config
	// CircuitFundraisingEventLeaderboardControllerDonorWithResponse is the configuration used for the FundraisingEventLeaderboardControllerDonorWithResponse circuit. This overrides values set by Defaults
	CircuitFundraisingEventLeaderboardControllerDonorWithResponse circuit.Config
	// CircuitFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse is the configuration used for the FundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse circuit. This overrides values set by Defaults
	CircuitFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse circuit.Config
	// CircuitFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse is the configuration used for the FundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse circuit. This overrides values set by Defaults
	CircuitFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse circuit.Config
	// CircuitFundraisingEventLeaderboardControllerTeamWithResponse is the configuration used for the FundraisingEventLeaderboardControllerTeamWithResponse circuit. This overrides values set by Defaults
	CircuitFundraisingEventLeaderboardControllerTeamWithResponse circuit.Config
	// CircuitFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse is the configuration used for the FundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse circuit. This overrides values set by Defaults
	CircuitFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse circuit.Config
	// CircuitFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse is the configuration used for the FundraisingEventLeaderboardControllerUserFitnessTimeWithResponse circuit. This overrides values set by Defaults
	CircuitFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse circuit.Config
	// CircuitFundraisingEventLeaderboardControllerUserWithResponse is the configuration used for the FundraisingEventLeaderboardControllerUserWithResponse circuit. This overrides values set by Defaults
	CircuitFundraisingEventLeaderboardControllerUserWithResponse circuit.Config
	// CircuitFundraisingEventSupportingEventsWithResponse is the configuration used for the FundraisingEventSupportingEventsWithResponse circuit. This overrides values set by Defaults
	CircuitFundraisingEventSupportingEventsWithResponse circuit.Config
	// CircuitGetCampaignWithResponse is the configuration used for the GetCampaignWithResponse circuit. This overrides values set by Defaults
	CircuitGetCampaignWithResponse circuit.Config
	// CircuitGetCauseWithResponse is the configuration used for the GetCauseWithResponse circuit. This overrides values set by Defaults
	CircuitGetCauseWithResponse circuit.Config
	// CircuitGetFundraisingEventWithResponse is the configuration used for the GetFundraisingEventWithResponse circuit. This overrides values set by Defaults
	CircuitGetFundraisingEventWithResponse circuit.Config
	// CircuitGetTeamCampaignWithResponse is the configuration used for the GetTeamCampaignWithResponse circuit. This overrides values set by Defaults
	CircuitGetTeamCampaignWithResponse circuit.Config
	// CircuitGetTeamWithResponse is the configuration used for the GetTeamWithResponse circuit. This overrides values set by Defaults
	CircuitGetTeamWithResponse circuit.Config
	// CircuitGetUserWithResponse is the configuration used for the GetUserWithResponse circuit. This overrides values set by Defaults
	CircuitGetUserWithResponse circuit.Config
	// CircuitTeamCampaignChallengesWithResponse is the configuration used for the TeamCampaignChallengesWithResponse circuit. This overrides values set by Defaults
	CircuitTeamCampaignChallengesWithResponse circuit.Config
	// CircuitTeamCampaignDonationsWithResponse is the configuration used for the TeamCampaignDonationsWithResponse circuit. This overrides values set by Defaults
	CircuitTeamCampaignDonationsWithResponse circuit.Config
	// CircuitTeamCampaignLeaderboardControllerDonorWithResponse is the configuration used for the TeamCampaignLeaderboardControllerDonorWithResponse circuit. This overrides values set by Defaults
	CircuitTeamCampaignLeaderboardControllerDonorWithResponse circuit.Config
	// CircuitTeamCampaignLeaderboardControllerUserWithResponse is the configuration used for the TeamCampaignLeaderboardControllerUserWithResponse circuit. This overrides values set by Defaults
	CircuitTeamCampaignLeaderboardControllerUserWithResponse circuit.Config
	// CircuitTeamCampaignMilestonesWithResponse is the configuration used for the TeamCampaignMilestonesWithResponse circuit. This overrides values set by Defaults
	CircuitTeamCampaignMilestonesWithResponse circuit.Config
	// CircuitTeamCampaignPollsWithResponse is the configuration used for the TeamCampaignPollsWithResponse circuit. This overrides values set by Defaults
	CircuitTeamCampaignPollsWithResponse circuit.Config
	// CircuitTeamCampaignRewardsWithResponse is the configuration used for the TeamCampaignRewardsWithResponse circuit. This overrides values set by Defaults
	CircuitTeamCampaignRewardsWithResponse circuit.Config
	// CircuitTeamCampaignSchedulesWithResponse is the configuration used for the TeamCampaignSchedulesWithResponse circuit. This overrides values set by Defaults
	CircuitTeamCampaignSchedulesWithResponse circuit.Config
	// CircuitTeamCampaignSupportingCampaignsWithResponse is the configuration used for the TeamCampaignSupportingCampaignsWithResponse circuit. This overrides values set by Defaults
	CircuitTeamCampaignSupportingCampaignsWithResponse circuit.Config
	// CircuitTeamMembersWithResponse is the configuration used for the TeamMembersWithResponse circuit. This overrides values set by Defaults
	CircuitTeamMembersWithResponse circuit.Config
	// CircuitTeamTeamCampaignsWithResponse is the configuration used for the TeamTeamCampaignsWithResponse circuit. This overrides values set by Defaults
	CircuitTeamTeamCampaignsWithResponse circuit.Config
	// CircuitUserCampaignsWithResponse is the configuration used for the UserCampaignsWithResponse circuit. This overrides values set by Defaults
	CircuitUserCampaignsWithResponse circuit.Config
	// CircuitUserControllerCurrentUserWithResponse is the configuration used for the UserControllerCurrentUserWithResponse circuit. This overrides values set by Defaults
	CircuitUserControllerCurrentUserWithResponse circuit.Config
	// CircuitUserIntegrationEventsWithResponse is the configuration used for the UserIntegrationEventsWithResponse circuit. This overrides values set by Defaults
	CircuitUserIntegrationEventsWithResponse circuit.Config
	// CircuitUserTeamsWithResponse is the configuration used for the UserTeamsWithResponse circuit. This overrides values set by Defaults
	CircuitUserTeamsWithResponse circuit.Config
	// CircuitV5ApiWebOauthAuthorizeWithBodyWithResponse is the configuration used for the V5ApiWebOauthAuthorizeWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebOauthAuthorizeWithBodyWithResponse circuit.Config
	// CircuitV5ApiWebOauthAuthorizeWithResponse is the configuration used for the V5ApiWebOauthAuthorizeWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebOauthAuthorizeWithResponse circuit.Config
	// CircuitV5ApiWebOauthTokenWithBodyWithResponse is the configuration used for the V5ApiWebOauthTokenWithBodyWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebOauthTokenWithBodyWithResponse circuit.Config
	// CircuitV5ApiWebOauthTokenWithResponse is the configuration used for the V5ApiWebOauthTokenWithResponse circuit. This overrides values set by Defaults
	CircuitV5ApiWebOauthTokenWithResponse circuit.Config
}

// CircuitWrapperClientWithResponsesCircuit is a circuit wrapper for ClientWithResponsesInterface
type CircuitWrapperClientWithResponsesCircuit struct {
	ClientWithResponsesInterface

	// ShouldSkipError determines whether an error should be skipped and have the circuit
	// track the call as successful. This takes precedence over IsBadRequest
	ShouldSkipError func(error) bool

	// IsBadRequest checks whether to count a user error against the circuit. It is recommended to set this
	IsBadRequest func(error) bool

	// CircuitCampaignChallengesWithResponse is the circuit for method CampaignChallengesWithResponse
	CircuitCampaignChallengesWithResponse *circuit.Circuit
	// CircuitCampaignDonationsWithResponse is the circuit for method CampaignDonationsWithResponse
	CircuitCampaignDonationsWithResponse *circuit.Circuit
	// CircuitCampaignLeaderboardControllerDonorWithResponse is the circuit for method CampaignLeaderboardControllerDonorWithResponse
	CircuitCampaignLeaderboardControllerDonorWithResponse *circuit.Circuit
	// CircuitCampaignMilestonesWithResponse is the circuit for method CampaignMilestonesWithResponse
	CircuitCampaignMilestonesWithResponse *circuit.Circuit
	// CircuitCampaignPollsWithResponse is the circuit for method CampaignPollsWithResponse
	CircuitCampaignPollsWithResponse *circuit.Circuit
	// CircuitCampaignRewardsWithResponse is the circuit for method CampaignRewardsWithResponse
	CircuitCampaignRewardsWithResponse *circuit.Circuit
	// CircuitCampaignSchedulesWithResponse is the circuit for method CampaignSchedulesWithResponse
	CircuitCampaignSchedulesWithResponse *circuit.Circuit
	// CircuitCauseCampaignsWithResponse is the circuit for method CauseCampaignsWithResponse
	CircuitCauseCampaignsWithResponse *circuit.Circuit
	// CircuitCauseFundraisingEventsWithResponse is the circuit for method CauseFundraisingEventsWithResponse
	CircuitCauseFundraisingEventsWithResponse *circuit.Circuit
	// CircuitCauseLeaderboardControllerConfiguredWithResponse is the circuit for method CauseLeaderboardControllerConfiguredWithResponse
	CircuitCauseLeaderboardControllerConfiguredWithResponse *circuit.Circuit
	// CircuitCauseLeaderboardControllerDonorWithResponse is the circuit for method CauseLeaderboardControllerDonorWithResponse
	CircuitCauseLeaderboardControllerDonorWithResponse *circuit.Circuit
	// CircuitCauseLeaderboardControllerTeamWithResponse is the circuit for method CauseLeaderboardControllerTeamWithResponse
	CircuitCauseLeaderboardControllerTeamWithResponse *circuit.Circuit
	// CircuitCauseLeaderboardControllerUserWithResponse is the circuit for method CauseLeaderboardControllerUserWithResponse
	CircuitCauseLeaderboardControllerUserWithResponse *circuit.Circuit
	// CircuitFundraisingEventLeaderboardControllerConfiguredWithResponse is the circuit for method FundraisingEventLeaderboardControllerConfiguredWithResponse
	CircuitFundraisingEventLeaderboardControllerConfiguredWithResponse *circuit.Circuit
	// CircuitFundraisingEventLeaderboardControllerDonorWithResponse is the circuit for method FundraisingEventLeaderboardControllerDonorWithResponse
	CircuitFundraisingEventLeaderboardControllerDonorWithResponse *circuit.Circuit
	// CircuitFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse is the circuit for method FundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse
	CircuitFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse *circuit.Circuit
	// CircuitFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse is the circuit for method FundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse
	CircuitFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse *circuit.Circuit
	// CircuitFundraisingEventLeaderboardControllerTeamWithResponse is the circuit for method FundraisingEventLeaderboardControllerTeamWithResponse
	CircuitFundraisingEventLeaderboardControllerTeamWithResponse *circuit.Circuit
	// CircuitFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse is the circuit for method FundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse
	CircuitFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse *circuit.Circuit
	// CircuitFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse is the circuit for method FundraisingEventLeaderboardControllerUserFitnessTimeWithResponse
	CircuitFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse *circuit.Circuit
	// CircuitFundraisingEventLeaderboardControllerUserWithResponse is the circuit for method FundraisingEventLeaderboardControllerUserWithResponse
	CircuitFundraisingEventLeaderboardControllerUserWithResponse *circuit.Circuit
	// CircuitFundraisingEventSupportingEventsWithResponse is the circuit for method FundraisingEventSupportingEventsWithResponse
	CircuitFundraisingEventSupportingEventsWithResponse *circuit.Circuit
	// CircuitGetCampaignWithResponse is the circuit for method GetCampaignWithResponse
	CircuitGetCampaignWithResponse *circuit.Circuit
	// CircuitGetCauseWithResponse is the circuit for method GetCauseWithResponse
	CircuitGetCauseWithResponse *circuit.Circuit
	// CircuitGetFundraisingEventWithResponse is the circuit for method GetFundraisingEventWithResponse
	CircuitGetFundraisingEventWithResponse *circuit.Circuit
	// CircuitGetTeamCampaignWithResponse is the circuit for method GetTeamCampaignWithResponse
	CircuitGetTeamCampaignWithResponse *circuit.Circuit
	// CircuitGetTeamWithResponse is the circuit for method GetTeamWithResponse
	CircuitGetTeamWithResponse *circuit.Circuit
	// CircuitGetUserWithResponse is the circuit for method GetUserWithResponse
	CircuitGetUserWithResponse *circuit.Circuit
	// CircuitTeamCampaignChallengesWithResponse is the circuit for method TeamCampaignChallengesWithResponse
	CircuitTeamCampaignChallengesWithResponse *circuit.Circuit
	// CircuitTeamCampaignDonationsWithResponse is the circuit for method TeamCampaignDonationsWithResponse
	CircuitTeamCampaignDonationsWithResponse *circuit.Circuit
	// CircuitTeamCampaignLeaderboardControllerDonorWithResponse is the circuit for method TeamCampaignLeaderboardControllerDonorWithResponse
	CircuitTeamCampaignLeaderboardControllerDonorWithResponse *circuit.Circuit
	// CircuitTeamCampaignLeaderboardControllerUserWithResponse is the circuit for method TeamCampaignLeaderboardControllerUserWithResponse
	CircuitTeamCampaignLeaderboardControllerUserWithResponse *circuit.Circuit
	// CircuitTeamCampaignMilestonesWithResponse is the circuit for method TeamCampaignMilestonesWithResponse
	CircuitTeamCampaignMilestonesWithResponse *circuit.Circuit
	// CircuitTeamCampaignPollsWithResponse is the circuit for method TeamCampaignPollsWithResponse
	CircuitTeamCampaignPollsWithResponse *circuit.Circuit
	// CircuitTeamCampaignRewardsWithResponse is the circuit for method TeamCampaignRewardsWithResponse
	CircuitTeamCampaignRewardsWithResponse *circuit.Circuit
	// CircuitTeamCampaignSchedulesWithResponse is the circuit for method TeamCampaignSchedulesWithResponse
	CircuitTeamCampaignSchedulesWithResponse *circuit.Circuit
	// CircuitTeamCampaignSupportingCampaignsWithResponse is the circuit for method TeamCampaignSupportingCampaignsWithResponse
	CircuitTeamCampaignSupportingCampaignsWithResponse *circuit.Circuit
	// CircuitTeamMembersWithResponse is the circuit for method TeamMembersWithResponse
	CircuitTeamMembersWithResponse *circuit.Circuit
	// CircuitTeamTeamCampaignsWithResponse is the circuit for method TeamTeamCampaignsWithResponse
	CircuitTeamTeamCampaignsWithResponse *circuit.Circuit
	// CircuitUserCampaignsWithResponse is the circuit for method UserCampaignsWithResponse
	CircuitUserCampaignsWithResponse *circuit.Circuit
	// CircuitUserControllerCurrentUserWithResponse is the circuit for method UserControllerCurrentUserWithResponse
	CircuitUserControllerCurrentUserWithResponse *circuit.Circuit
	// CircuitUserIntegrationEventsWithResponse is the circuit for method UserIntegrationEventsWithResponse
	CircuitUserIntegrationEventsWithResponse *circuit.Circuit
	// CircuitUserTeamsWithResponse is the circuit for method UserTeamsWithResponse
	CircuitUserTeamsWithResponse *circuit.Circuit
	// CircuitV5ApiWebOauthAuthorizeWithBodyWithResponse is the circuit for method V5ApiWebOauthAuthorizeWithBodyWithResponse
	CircuitV5ApiWebOauthAuthorizeWithBodyWithResponse *circuit.Circuit
	// CircuitV5ApiWebOauthAuthorizeWithResponse is the circuit for method V5ApiWebOauthAuthorizeWithResponse
	CircuitV5ApiWebOauthAuthorizeWithResponse *circuit.Circuit
	// CircuitV5ApiWebOauthTokenWithBodyWithResponse is the circuit for method V5ApiWebOauthTokenWithBodyWithResponse
	CircuitV5ApiWebOauthTokenWithBodyWithResponse *circuit.Circuit
	// CircuitV5ApiWebOauthTokenWithResponse is the circuit for method V5ApiWebOauthTokenWithResponse
	CircuitV5ApiWebOauthTokenWithResponse *circuit.Circuit
}

// NewCircuitWrapperClientWithResponsesCircuit creates a new circuit wrapper and initializes circuits
func NewCircuitWrapperClientWithResponsesCircuit(
	manager *circuit.Manager,
	embedded ClientWithResponsesInterface,
	conf CircuitWrapperClientWithResponsesCircuitConfig,
) (*CircuitWrapperClientWithResponsesCircuit, error) {
	if conf.ShouldSkipError == nil {
		conf.ShouldSkipError = func(err error) bool {
			return false
		}
	}

	if conf.IsBadRequest == nil {
		conf.IsBadRequest = func(err error) bool {
			return false
		}
	}

	w := &CircuitWrapperClientWithResponsesCircuit{
		ClientWithResponsesInterface: embedded,
		ShouldSkipError:              conf.ShouldSkipError,
		IsBadRequest:                 conf.IsBadRequest,
	}

	var err error
	w.CircuitCampaignChallengesWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CampaignChallengesWithResponse", conf.CircuitCampaignChallengesWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCampaignDonationsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CampaignDonationsWithResponse", conf.CircuitCampaignDonationsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCampaignLeaderboardControllerDonorWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CampaignLeaderboardControllerDonorWithResponse", conf.CircuitCampaignLeaderboardControllerDonorWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCampaignMilestonesWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CampaignMilestonesWithResponse", conf.CircuitCampaignMilestonesWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCampaignPollsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CampaignPollsWithResponse", conf.CircuitCampaignPollsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCampaignRewardsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CampaignRewardsWithResponse", conf.CircuitCampaignRewardsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCampaignSchedulesWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CampaignSchedulesWithResponse", conf.CircuitCampaignSchedulesWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCauseCampaignsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CauseCampaignsWithResponse", conf.CircuitCauseCampaignsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCauseFundraisingEventsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CauseFundraisingEventsWithResponse", conf.CircuitCauseFundraisingEventsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCauseLeaderboardControllerConfiguredWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CauseLeaderboardControllerConfiguredWithResponse", conf.CircuitCauseLeaderboardControllerConfiguredWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCauseLeaderboardControllerDonorWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CauseLeaderboardControllerDonorWithResponse", conf.CircuitCauseLeaderboardControllerDonorWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCauseLeaderboardControllerTeamWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CauseLeaderboardControllerTeamWithResponse", conf.CircuitCauseLeaderboardControllerTeamWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitCauseLeaderboardControllerUserWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.CauseLeaderboardControllerUserWithResponse", conf.CircuitCauseLeaderboardControllerUserWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitFundraisingEventLeaderboardControllerConfiguredWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.FundraisingEventLeaderboardControllerConfiguredWithResponse", conf.CircuitFundraisingEventLeaderboardControllerConfiguredWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitFundraisingEventLeaderboardControllerDonorWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.FundraisingEventLeaderboardControllerDonorWithResponse", conf.CircuitFundraisingEventLeaderboardControllerDonorWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.FundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse", conf.CircuitFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.FundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse", conf.CircuitFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitFundraisingEventLeaderboardControllerTeamWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.FundraisingEventLeaderboardControllerTeamWithResponse", conf.CircuitFundraisingEventLeaderboardControllerTeamWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.FundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse", conf.CircuitFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.FundraisingEventLeaderboardControllerUserFitnessTimeWithResponse", conf.CircuitFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitFundraisingEventLeaderboardControllerUserWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.FundraisingEventLeaderboardControllerUserWithResponse", conf.CircuitFundraisingEventLeaderboardControllerUserWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitFundraisingEventSupportingEventsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.FundraisingEventSupportingEventsWithResponse", conf.CircuitFundraisingEventSupportingEventsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetCampaignWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetCampaignWithResponse", conf.CircuitGetCampaignWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetCauseWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetCauseWithResponse", conf.CircuitGetCauseWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetFundraisingEventWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetFundraisingEventWithResponse", conf.CircuitGetFundraisingEventWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetTeamCampaignWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetTeamCampaignWithResponse", conf.CircuitGetTeamCampaignWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetTeamWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetTeamWithResponse", conf.CircuitGetTeamWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitGetUserWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.GetUserWithResponse", conf.CircuitGetUserWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitTeamCampaignChallengesWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.TeamCampaignChallengesWithResponse", conf.CircuitTeamCampaignChallengesWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitTeamCampaignDonationsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.TeamCampaignDonationsWithResponse", conf.CircuitTeamCampaignDonationsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitTeamCampaignLeaderboardControllerDonorWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.TeamCampaignLeaderboardControllerDonorWithResponse", conf.CircuitTeamCampaignLeaderboardControllerDonorWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitTeamCampaignLeaderboardControllerUserWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.TeamCampaignLeaderboardControllerUserWithResponse", conf.CircuitTeamCampaignLeaderboardControllerUserWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitTeamCampaignMilestonesWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.TeamCampaignMilestonesWithResponse", conf.CircuitTeamCampaignMilestonesWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitTeamCampaignPollsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.TeamCampaignPollsWithResponse", conf.CircuitTeamCampaignPollsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitTeamCampaignRewardsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.TeamCampaignRewardsWithResponse", conf.CircuitTeamCampaignRewardsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitTeamCampaignSchedulesWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.TeamCampaignSchedulesWithResponse", conf.CircuitTeamCampaignSchedulesWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitTeamCampaignSupportingCampaignsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.TeamCampaignSupportingCampaignsWithResponse", conf.CircuitTeamCampaignSupportingCampaignsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitTeamMembersWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.TeamMembersWithResponse", conf.CircuitTeamMembersWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitTeamTeamCampaignsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.TeamTeamCampaignsWithResponse", conf.CircuitTeamTeamCampaignsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUserCampaignsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UserCampaignsWithResponse", conf.CircuitUserCampaignsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUserControllerCurrentUserWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UserControllerCurrentUserWithResponse", conf.CircuitUserControllerCurrentUserWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUserIntegrationEventsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UserIntegrationEventsWithResponse", conf.CircuitUserIntegrationEventsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitUserTeamsWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.UserTeamsWithResponse", conf.CircuitUserTeamsWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebOauthAuthorizeWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebOauthAuthorizeWithBodyWithResponse", conf.CircuitV5ApiWebOauthAuthorizeWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebOauthAuthorizeWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebOauthAuthorizeWithResponse", conf.CircuitV5ApiWebOauthAuthorizeWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebOauthTokenWithBodyWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebOauthTokenWithBodyWithResponse", conf.CircuitV5ApiWebOauthTokenWithBodyWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	w.CircuitV5ApiWebOauthTokenWithResponse, err = manager.CreateCircuit(conf.Prefix+"ClientWithResponsesCircuit.V5ApiWebOauthTokenWithResponse", conf.CircuitV5ApiWebOauthTokenWithResponse, conf.Defaults)
	if err != nil {
		return nil, err
	}

	return w, nil
}

// CampaignChallengesWithResponse calls the embedded ClientWithResponsesInterface's method CampaignChallengesWithResponse with CircuitCampaignChallengesWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CampaignChallengesWithResponse(ctx context.Context, p1 string, p2 *CampaignChallengesParams, p3 ...RequestEditorFn) (*CampaignChallengesResponse, error) {
	var r0 *CampaignChallengesResponse
	var skippedErr error

	err := w.CircuitCampaignChallengesWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CampaignChallengesWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CampaignDonationsWithResponse calls the embedded ClientWithResponsesInterface's method CampaignDonationsWithResponse with CircuitCampaignDonationsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CampaignDonationsWithResponse(ctx context.Context, p1 string, p2 *CampaignDonationsParams, p3 ...RequestEditorFn) (*CampaignDonationsResponse, error) {
	var r0 *CampaignDonationsResponse
	var skippedErr error

	err := w.CircuitCampaignDonationsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CampaignDonationsWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CampaignLeaderboardControllerDonorWithResponse calls the embedded ClientWithResponsesInterface's method CampaignLeaderboardControllerDonorWithResponse with CircuitCampaignLeaderboardControllerDonorWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CampaignLeaderboardControllerDonorWithResponse(ctx context.Context, p1 string, p2 *CampaignLeaderboardControllerDonorParams, p3 ...RequestEditorFn) (*CampaignLeaderboardControllerDonorResponse, error) {
	var r0 *CampaignLeaderboardControllerDonorResponse
	var skippedErr error

	err := w.CircuitCampaignLeaderboardControllerDonorWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CampaignLeaderboardControllerDonorWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CampaignMilestonesWithResponse calls the embedded ClientWithResponsesInterface's method CampaignMilestonesWithResponse with CircuitCampaignMilestonesWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CampaignMilestonesWithResponse(ctx context.Context, p1 string, p2 *CampaignMilestonesParams, p3 ...RequestEditorFn) (*CampaignMilestonesResponse, error) {
	var r0 *CampaignMilestonesResponse
	var skippedErr error

	err := w.CircuitCampaignMilestonesWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CampaignMilestonesWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CampaignPollsWithResponse calls the embedded ClientWithResponsesInterface's method CampaignPollsWithResponse with CircuitCampaignPollsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CampaignPollsWithResponse(ctx context.Context, p1 string, p2 *CampaignPollsParams, p3 ...RequestEditorFn) (*CampaignPollsResponse, error) {
	var r0 *CampaignPollsResponse
	var skippedErr error

	err := w.CircuitCampaignPollsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CampaignPollsWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CampaignRewardsWithResponse calls the embedded ClientWithResponsesInterface's method CampaignRewardsWithResponse with CircuitCampaignRewardsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CampaignRewardsWithResponse(ctx context.Context, p1 string, p2 *CampaignRewardsParams, p3 ...RequestEditorFn) (*CampaignRewardsResponse, error) {
	var r0 *CampaignRewardsResponse
	var skippedErr error

	err := w.CircuitCampaignRewardsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CampaignRewardsWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CampaignSchedulesWithResponse calls the embedded ClientWithResponsesInterface's method CampaignSchedulesWithResponse with CircuitCampaignSchedulesWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CampaignSchedulesWithResponse(ctx context.Context, p1 string, p2 *CampaignSchedulesParams, p3 ...RequestEditorFn) (*CampaignSchedulesResponse, error) {
	var r0 *CampaignSchedulesResponse
	var skippedErr error

	err := w.CircuitCampaignSchedulesWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CampaignSchedulesWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CauseCampaignsWithResponse calls the embedded ClientWithResponsesInterface's method CauseCampaignsWithResponse with CircuitCauseCampaignsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CauseCampaignsWithResponse(ctx context.Context, p1 string, p2 *CauseCampaignsParams, p3 ...RequestEditorFn) (*CauseCampaignsResponse, error) {
	var r0 *CauseCampaignsResponse
	var skippedErr error

	err := w.CircuitCauseCampaignsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CauseCampaignsWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CauseFundraisingEventsWithResponse calls the embedded ClientWithResponsesInterface's method CauseFundraisingEventsWithResponse with CircuitCauseFundraisingEventsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CauseFundraisingEventsWithResponse(ctx context.Context, p1 string, p2 *CauseFundraisingEventsParams, p3 ...RequestEditorFn) (*CauseFundraisingEventsResponse, error) {
	var r0 *CauseFundraisingEventsResponse
	var skippedErr error

	err := w.CircuitCauseFundraisingEventsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CauseFundraisingEventsWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CauseLeaderboardControllerConfiguredWithResponse calls the embedded ClientWithResponsesInterface's method CauseLeaderboardControllerConfiguredWithResponse with CircuitCauseLeaderboardControllerConfiguredWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CauseLeaderboardControllerConfiguredWithResponse(ctx context.Context, p1 string, p2 ...RequestEditorFn) (*CauseLeaderboardControllerConfiguredResponse, error) {
	var r0 *CauseLeaderboardControllerConfiguredResponse
	var skippedErr error

	err := w.CircuitCauseLeaderboardControllerConfiguredWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CauseLeaderboardControllerConfiguredWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CauseLeaderboardControllerDonorWithResponse calls the embedded ClientWithResponsesInterface's method CauseLeaderboardControllerDonorWithResponse with CircuitCauseLeaderboardControllerDonorWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CauseLeaderboardControllerDonorWithResponse(ctx context.Context, p1 string, p2 *CauseLeaderboardControllerDonorParams, p3 ...RequestEditorFn) (*CauseLeaderboardControllerDonorResponse, error) {
	var r0 *CauseLeaderboardControllerDonorResponse
	var skippedErr error

	err := w.CircuitCauseLeaderboardControllerDonorWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CauseLeaderboardControllerDonorWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CauseLeaderboardControllerTeamWithResponse calls the embedded ClientWithResponsesInterface's method CauseLeaderboardControllerTeamWithResponse with CircuitCauseLeaderboardControllerTeamWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CauseLeaderboardControllerTeamWithResponse(ctx context.Context, p1 string, p2 *CauseLeaderboardControllerTeamParams, p3 ...RequestEditorFn) (*CauseLeaderboardControllerTeamResponse, error) {
	var r0 *CauseLeaderboardControllerTeamResponse
	var skippedErr error

	err := w.CircuitCauseLeaderboardControllerTeamWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CauseLeaderboardControllerTeamWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// CauseLeaderboardControllerUserWithResponse calls the embedded ClientWithResponsesInterface's method CauseLeaderboardControllerUserWithResponse with CircuitCauseLeaderboardControllerUserWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) CauseLeaderboardControllerUserWithResponse(ctx context.Context, p1 string, p2 *CauseLeaderboardControllerUserParams, p3 ...RequestEditorFn) (*CauseLeaderboardControllerUserResponse, error) {
	var r0 *CauseLeaderboardControllerUserResponse
	var skippedErr error

	err := w.CircuitCauseLeaderboardControllerUserWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.CauseLeaderboardControllerUserWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// FundraisingEventLeaderboardControllerConfiguredWithResponse calls the embedded ClientWithResponsesInterface's method FundraisingEventLeaderboardControllerConfiguredWithResponse with CircuitFundraisingEventLeaderboardControllerConfiguredWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) FundraisingEventLeaderboardControllerConfiguredWithResponse(ctx context.Context, p1 string, p2 ...RequestEditorFn) (*FundraisingEventLeaderboardControllerConfiguredResponse, error) {
	var r0 *FundraisingEventLeaderboardControllerConfiguredResponse
	var skippedErr error

	err := w.CircuitFundraisingEventLeaderboardControllerConfiguredWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.FundraisingEventLeaderboardControllerConfiguredWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// FundraisingEventLeaderboardControllerDonorWithResponse calls the embedded ClientWithResponsesInterface's method FundraisingEventLeaderboardControllerDonorWithResponse with CircuitFundraisingEventLeaderboardControllerDonorWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) FundraisingEventLeaderboardControllerDonorWithResponse(ctx context.Context, p1 string, p2 *FundraisingEventLeaderboardControllerDonorParams, p3 ...RequestEditorFn) (*FundraisingEventLeaderboardControllerDonorResponse, error) {
	var r0 *FundraisingEventLeaderboardControllerDonorResponse
	var skippedErr error

	err := w.CircuitFundraisingEventLeaderboardControllerDonorWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.FundraisingEventLeaderboardControllerDonorWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// FundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse calls the embedded ClientWithResponsesInterface's method FundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse with CircuitFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) FundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse(ctx context.Context, p1 string, p2 *FundraisingEventLeaderboardControllerTeamFitnessDistanceParams, p3 ...RequestEditorFn) (*FundraisingEventLeaderboardControllerTeamFitnessDistanceResponse, error) {
	var r0 *FundraisingEventLeaderboardControllerTeamFitnessDistanceResponse
	var skippedErr error

	err := w.CircuitFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.FundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// FundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse calls the embedded ClientWithResponsesInterface's method FundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse with CircuitFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) FundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse(ctx context.Context, p1 string, p2 *FundraisingEventLeaderboardControllerTeamFitnessTimeParams, p3 ...RequestEditorFn) (*FundraisingEventLeaderboardControllerTeamFitnessTimeResponse, error) {
	var r0 *FundraisingEventLeaderboardControllerTeamFitnessTimeResponse
	var skippedErr error

	err := w.CircuitFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.FundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// FundraisingEventLeaderboardControllerTeamWithResponse calls the embedded ClientWithResponsesInterface's method FundraisingEventLeaderboardControllerTeamWithResponse with CircuitFundraisingEventLeaderboardControllerTeamWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) FundraisingEventLeaderboardControllerTeamWithResponse(ctx context.Context, p1 string, p2 *FundraisingEventLeaderboardControllerTeamParams, p3 ...RequestEditorFn) (*FundraisingEventLeaderboardControllerTeamResponse, error) {
	var r0 *FundraisingEventLeaderboardControllerTeamResponse
	var skippedErr error

	err := w.CircuitFundraisingEventLeaderboardControllerTeamWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.FundraisingEventLeaderboardControllerTeamWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// FundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse calls the embedded ClientWithResponsesInterface's method FundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse with CircuitFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) FundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse(ctx context.Context, p1 string, p2 *FundraisingEventLeaderboardControllerUserFitnessDistanceParams, p3 ...RequestEditorFn) (*FundraisingEventLeaderboardControllerUserFitnessDistanceResponse, error) {
	var r0 *FundraisingEventLeaderboardControllerUserFitnessDistanceResponse
	var skippedErr error

	err := w.CircuitFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.FundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// FundraisingEventLeaderboardControllerUserFitnessTimeWithResponse calls the embedded ClientWithResponsesInterface's method FundraisingEventLeaderboardControllerUserFitnessTimeWithResponse with CircuitFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) FundraisingEventLeaderboardControllerUserFitnessTimeWithResponse(ctx context.Context, p1 string, p2 *FundraisingEventLeaderboardControllerUserFitnessTimeParams, p3 ...RequestEditorFn) (*FundraisingEventLeaderboardControllerUserFitnessTimeResponse, error) {
	var r0 *FundraisingEventLeaderboardControllerUserFitnessTimeResponse
	var skippedErr error

	err := w.CircuitFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.FundraisingEventLeaderboardControllerUserFitnessTimeWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// FundraisingEventLeaderboardControllerUserWithResponse calls the embedded ClientWithResponsesInterface's method FundraisingEventLeaderboardControllerUserWithResponse with CircuitFundraisingEventLeaderboardControllerUserWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) FundraisingEventLeaderboardControllerUserWithResponse(ctx context.Context, p1 string, p2 *FundraisingEventLeaderboardControllerUserParams, p3 ...RequestEditorFn) (*FundraisingEventLeaderboardControllerUserResponse, error) {
	var r0 *FundraisingEventLeaderboardControllerUserResponse
	var skippedErr error

	err := w.CircuitFundraisingEventLeaderboardControllerUserWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.FundraisingEventLeaderboardControllerUserWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// FundraisingEventSupportingEventsWithResponse calls the embedded ClientWithResponsesInterface's method FundraisingEventSupportingEventsWithResponse with CircuitFundraisingEventSupportingEventsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) FundraisingEventSupportingEventsWithResponse(ctx context.Context, p1 string, p2 *FundraisingEventSupportingEventsParams, p3 ...RequestEditorFn) (*FundraisingEventSupportingEventsResponse, error) {
	var r0 *FundraisingEventSupportingEventsResponse
	var skippedErr error

	err := w.CircuitFundraisingEventSupportingEventsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.FundraisingEventSupportingEventsWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetCampaignWithResponse calls the embedded ClientWithResponsesInterface's method GetCampaignWithResponse with CircuitGetCampaignWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetCampaignWithResponse(ctx context.Context, p1 string, p2 ...RequestEditorFn) (*GetCampaignResponse, error) {
	var r0 *GetCampaignResponse
	var skippedErr error

	err := w.CircuitGetCampaignWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetCampaignWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetCauseWithResponse calls the embedded ClientWithResponsesInterface's method GetCauseWithResponse with CircuitGetCauseWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetCauseWithResponse(ctx context.Context, p1 string, p2 ...RequestEditorFn) (*GetCauseResponse, error) {
	var r0 *GetCauseResponse
	var skippedErr error

	err := w.CircuitGetCauseWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetCauseWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetFundraisingEventWithResponse calls the embedded ClientWithResponsesInterface's method GetFundraisingEventWithResponse with CircuitGetFundraisingEventWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetFundraisingEventWithResponse(ctx context.Context, p1 string, p2 ...RequestEditorFn) (*GetFundraisingEventResponse, error) {
	var r0 *GetFundraisingEventResponse
	var skippedErr error

	err := w.CircuitGetFundraisingEventWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetFundraisingEventWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetTeamCampaignWithResponse calls the embedded ClientWithResponsesInterface's method GetTeamCampaignWithResponse with CircuitGetTeamCampaignWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetTeamCampaignWithResponse(ctx context.Context, p1 string, p2 ...RequestEditorFn) (*GetTeamCampaignResponse, error) {
	var r0 *GetTeamCampaignResponse
	var skippedErr error

	err := w.CircuitGetTeamCampaignWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetTeamCampaignWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetTeamWithResponse calls the embedded ClientWithResponsesInterface's method GetTeamWithResponse with CircuitGetTeamWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetTeamWithResponse(ctx context.Context, p1 string, p2 ...RequestEditorFn) (*GetTeamResponse, error) {
	var r0 *GetTeamResponse
	var skippedErr error

	err := w.CircuitGetTeamWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetTeamWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// GetUserWithResponse calls the embedded ClientWithResponsesInterface's method GetUserWithResponse with CircuitGetUserWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) GetUserWithResponse(ctx context.Context, p1 string, p2 ...RequestEditorFn) (*GetUserResponse, error) {
	var r0 *GetUserResponse
	var skippedErr error

	err := w.CircuitGetUserWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.GetUserWithResponse(ctx, p1, p2...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// TeamCampaignChallengesWithResponse calls the embedded ClientWithResponsesInterface's method TeamCampaignChallengesWithResponse with CircuitTeamCampaignChallengesWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) TeamCampaignChallengesWithResponse(ctx context.Context, p1 string, p2 *TeamCampaignChallengesParams, p3 ...RequestEditorFn) (*TeamCampaignChallengesResponse, error) {
	var r0 *TeamCampaignChallengesResponse
	var skippedErr error

	err := w.CircuitTeamCampaignChallengesWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.TeamCampaignChallengesWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// TeamCampaignDonationsWithResponse calls the embedded ClientWithResponsesInterface's method TeamCampaignDonationsWithResponse with CircuitTeamCampaignDonationsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) TeamCampaignDonationsWithResponse(ctx context.Context, p1 string, p2 *TeamCampaignDonationsParams, p3 ...RequestEditorFn) (*TeamCampaignDonationsResponse, error) {
	var r0 *TeamCampaignDonationsResponse
	var skippedErr error

	err := w.CircuitTeamCampaignDonationsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.TeamCampaignDonationsWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// TeamCampaignLeaderboardControllerDonorWithResponse calls the embedded ClientWithResponsesInterface's method TeamCampaignLeaderboardControllerDonorWithResponse with CircuitTeamCampaignLeaderboardControllerDonorWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) TeamCampaignLeaderboardControllerDonorWithResponse(ctx context.Context, p1 string, p2 *TeamCampaignLeaderboardControllerDonorParams, p3 ...RequestEditorFn) (*TeamCampaignLeaderboardControllerDonorResponse, error) {
	var r0 *TeamCampaignLeaderboardControllerDonorResponse
	var skippedErr error

	err := w.CircuitTeamCampaignLeaderboardControllerDonorWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.TeamCampaignLeaderboardControllerDonorWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// TeamCampaignLeaderboardControllerUserWithResponse calls the embedded ClientWithResponsesInterface's method TeamCampaignLeaderboardControllerUserWithResponse with CircuitTeamCampaignLeaderboardControllerUserWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) TeamCampaignLeaderboardControllerUserWithResponse(ctx context.Context, p1 string, p2 *TeamCampaignLeaderboardControllerUserParams, p3 ...RequestEditorFn) (*TeamCampaignLeaderboardControllerUserResponse, error) {
	var r0 *TeamCampaignLeaderboardControllerUserResponse
	var skippedErr error

	err := w.CircuitTeamCampaignLeaderboardControllerUserWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.TeamCampaignLeaderboardControllerUserWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// TeamCampaignMilestonesWithResponse calls the embedded ClientWithResponsesInterface's method TeamCampaignMilestonesWithResponse with CircuitTeamCampaignMilestonesWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) TeamCampaignMilestonesWithResponse(ctx context.Context, p1 string, p2 *TeamCampaignMilestonesParams, p3 ...RequestEditorFn) (*TeamCampaignMilestonesResponse, error) {
	var r0 *TeamCampaignMilestonesResponse
	var skippedErr error

	err := w.CircuitTeamCampaignMilestonesWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.TeamCampaignMilestonesWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// TeamCampaignPollsWithResponse calls the embedded ClientWithResponsesInterface's method TeamCampaignPollsWithResponse with CircuitTeamCampaignPollsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) TeamCampaignPollsWithResponse(ctx context.Context, p1 string, p2 *TeamCampaignPollsParams, p3 ...RequestEditorFn) (*TeamCampaignPollsResponse, error) {
	var r0 *TeamCampaignPollsResponse
	var skippedErr error

	err := w.CircuitTeamCampaignPollsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.TeamCampaignPollsWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// TeamCampaignRewardsWithResponse calls the embedded ClientWithResponsesInterface's method TeamCampaignRewardsWithResponse with CircuitTeamCampaignRewardsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) TeamCampaignRewardsWithResponse(ctx context.Context, p1 string, p2 *TeamCampaignRewardsParams, p3 ...RequestEditorFn) (*TeamCampaignRewardsResponse, error) {
	var r0 *TeamCampaignRewardsResponse
	var skippedErr error

	err := w.CircuitTeamCampaignRewardsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.TeamCampaignRewardsWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// TeamCampaignSchedulesWithResponse calls the embedded ClientWithResponsesInterface's method TeamCampaignSchedulesWithResponse with CircuitTeamCampaignSchedulesWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) TeamCampaignSchedulesWithResponse(ctx context.Context, p1 string, p2 *TeamCampaignSchedulesParams, p3 ...RequestEditorFn) (*TeamCampaignSchedulesResponse, error) {
	var r0 *TeamCampaignSchedulesResponse
	var skippedErr error

	err := w.CircuitTeamCampaignSchedulesWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.TeamCampaignSchedulesWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// TeamCampaignSupportingCampaignsWithResponse calls the embedded ClientWithResponsesInterface's method TeamCampaignSupportingCampaignsWithResponse with CircuitTeamCampaignSupportingCampaignsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) TeamCampaignSupportingCampaignsWithResponse(ctx context.Context, p1 string, p2 *TeamCampaignSupportingCampaignsParams, p3 ...RequestEditorFn) (*TeamCampaignSupportingCampaignsResponse, error) {
	var r0 *TeamCampaignSupportingCampaignsResponse
	var skippedErr error

	err := w.CircuitTeamCampaignSupportingCampaignsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.TeamCampaignSupportingCampaignsWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// TeamMembersWithResponse calls the embedded ClientWithResponsesInterface's method TeamMembersWithResponse with CircuitTeamMembersWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) TeamMembersWithResponse(ctx context.Context, p1 string, p2 *TeamMembersParams, p3 ...RequestEditorFn) (*TeamMembersResponse, error) {
	var r0 *TeamMembersResponse
	var skippedErr error

	err := w.CircuitTeamMembersWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.TeamMembersWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// TeamTeamCampaignsWithResponse calls the embedded ClientWithResponsesInterface's method TeamTeamCampaignsWithResponse with CircuitTeamTeamCampaignsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) TeamTeamCampaignsWithResponse(ctx context.Context, p1 string, p2 *TeamTeamCampaignsParams, p3 ...RequestEditorFn) (*TeamTeamCampaignsResponse, error) {
	var r0 *TeamTeamCampaignsResponse
	var skippedErr error

	err := w.CircuitTeamTeamCampaignsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.TeamTeamCampaignsWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UserCampaignsWithResponse calls the embedded ClientWithResponsesInterface's method UserCampaignsWithResponse with CircuitUserCampaignsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UserCampaignsWithResponse(ctx context.Context, p1 string, p2 *UserCampaignsParams, p3 ...RequestEditorFn) (*UserCampaignsResponse, error) {
	var r0 *UserCampaignsResponse
	var skippedErr error

	err := w.CircuitUserCampaignsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UserCampaignsWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UserControllerCurrentUserWithResponse calls the embedded ClientWithResponsesInterface's method UserControllerCurrentUserWithResponse with CircuitUserControllerCurrentUserWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UserControllerCurrentUserWithResponse(ctx context.Context, p1 ...RequestEditorFn) (*UserControllerCurrentUserResponse, error) {
	var r0 *UserControllerCurrentUserResponse
	var skippedErr error

	err := w.CircuitUserControllerCurrentUserWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UserControllerCurrentUserWithResponse(ctx, p1...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UserIntegrationEventsWithResponse calls the embedded ClientWithResponsesInterface's method UserIntegrationEventsWithResponse with CircuitUserIntegrationEventsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UserIntegrationEventsWithResponse(ctx context.Context, p1 string, p2 *UserIntegrationEventsParams, p3 ...RequestEditorFn) (*UserIntegrationEventsResponse, error) {
	var r0 *UserIntegrationEventsResponse
	var skippedErr error

	err := w.CircuitUserIntegrationEventsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UserIntegrationEventsWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// UserTeamsWithResponse calls the embedded ClientWithResponsesInterface's method UserTeamsWithResponse with CircuitUserTeamsWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) UserTeamsWithResponse(ctx context.Context, p1 string, p2 *UserTeamsParams, p3 ...RequestEditorFn) (*UserTeamsResponse, error) {
	var r0 *UserTeamsResponse
	var skippedErr error

	err := w.CircuitUserTeamsWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.UserTeamsWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebOauthAuthorizeWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebOauthAuthorizeWithBodyWithResponse with CircuitV5ApiWebOauthAuthorizeWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebOauthAuthorizeWithBodyWithResponse(ctx context.Context, p1 *V5ApiWebOauthAuthorizeParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*V5ApiWebOauthAuthorizeResponse, error) {
	var r0 *V5ApiWebOauthAuthorizeResponse
	var skippedErr error

	err := w.CircuitV5ApiWebOauthAuthorizeWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebOauthAuthorizeWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebOauthAuthorizeWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebOauthAuthorizeWithResponse with CircuitV5ApiWebOauthAuthorizeWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebOauthAuthorizeWithResponse(ctx context.Context, p1 *V5ApiWebOauthAuthorizeParams, p2 map[string]interface{}, p3 ...RequestEditorFn) (*V5ApiWebOauthAuthorizeResponse, error) {
	var r0 *V5ApiWebOauthAuthorizeResponse
	var skippedErr error

	err := w.CircuitV5ApiWebOauthAuthorizeWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebOauthAuthorizeWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebOauthTokenWithBodyWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebOauthTokenWithBodyWithResponse with CircuitV5ApiWebOauthTokenWithBodyWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebOauthTokenWithBodyWithResponse(ctx context.Context, p1 *V5ApiWebOauthTokenParams, p2 string, p3 io.Reader, p4 ...RequestEditorFn) (*V5ApiWebOauthTokenResponse, error) {
	var r0 *V5ApiWebOauthTokenResponse
	var skippedErr error

	err := w.CircuitV5ApiWebOauthTokenWithBodyWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebOauthTokenWithBodyWithResponse(ctx, p1, p2, p3, p4...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

// V5ApiWebOauthTokenWithResponse calls the embedded ClientWithResponsesInterface's method V5ApiWebOauthTokenWithResponse with CircuitV5ApiWebOauthTokenWithResponse
func (w *CircuitWrapperClientWithResponsesCircuit) V5ApiWebOauthTokenWithResponse(ctx context.Context, p1 *V5ApiWebOauthTokenParams, p2 map[string]interface{}, p3 ...RequestEditorFn) (*V5ApiWebOauthTokenResponse, error) {
	var r0 *V5ApiWebOauthTokenResponse
	var skippedErr error

	err := w.CircuitV5ApiWebOauthTokenWithResponse.Run(ctx, func(ctx context.Context) error {
		var err error
		r0, err = w.ClientWithResponsesInterface.V5ApiWebOauthTokenWithResponse(ctx, p1, p2, p3...)

		if w.ShouldSkipError(err) {
			skippedErr = err
			return nil
		}

		if w.IsBadRequest(err) {
			return &circuit.SimpleBadRequest{Err: err}
		}
		return err
	})

	if skippedErr != nil {
		err = skippedErr
	}

	if berr, ok := err.(*circuit.SimpleBadRequest); ok {
		err = berr.Err
	}

	return r0, err
}

var _ ClientWithResponsesInterface = (*CircuitWrapperClientWithResponsesCircuit)(nil)
