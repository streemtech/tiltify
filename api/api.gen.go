// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	AuthorizationScopes = "authorization.Scopes"
)

// Defines values for CampaignStatus.
const (
	CampaignStatusPublished   CampaignStatus = "published"
	CampaignStatusRetired     CampaignStatus = "retired"
	CampaignStatusUnpublished CampaignStatus = "unpublished"
)

// Defines values for CampaignSupportingType.
const (
	CampaignSupportingTypeInviteOnly CampaignSupportingType = "invite_only"
	CampaignSupportingTypeNone       CampaignSupportingType = "none"
	CampaignSupportingTypePrivate    CampaignSupportingType = "private"
	CampaignSupportingTypePublic     CampaignSupportingType = "public"
)

// Defines values for FundraisingEventStatus.
const (
	FundraisingEventStatusPublished   FundraisingEventStatus = "published"
	FundraisingEventStatusRetired     FundraisingEventStatus = "retired"
	FundraisingEventStatusUnpublished FundraisingEventStatus = "unpublished"
)

// Defines values for MeasuredUnitUnit.
const (
	Kilometer MeasuredUnitUnit = "kilometer"
	Mile      MeasuredUnitUnit = "mile"
	Seconds   MeasuredUnitUnit = "seconds"
)

// Defines values for RoleKey.
const (
	RoleKeyTeamAdmin        RoleKey = "team_admin"
	RoleKeyTeamEventManager RoleKey = "team_event_manager"
	RoleKeyTeamMember       RoleKey = "team_member"
	RoleKeyTeamSuperAdmin   RoleKey = "team_super_admin"
	RoleKeyTeamUserManager  RoleKey = "team_user_manager"
)

// Defines values for TeamCampaignStatus.
const (
	Published   TeamCampaignStatus = "published"
	Retired     TeamCampaignStatus = "retired"
	Unpublished TeamCampaignStatus = "unpublished"
)

// Defines values for TeamCampaignSupportable.
const (
	TeamCampaignSupportableInviteOnly TeamCampaignSupportable = "invite_only"
	TeamCampaignSupportableNone       TeamCampaignSupportable = "none"
	TeamCampaignSupportablePrivate    TeamCampaignSupportable = "private"
	TeamCampaignSupportablePublic     TeamCampaignSupportable = "public"
)

// Defines values for V5ApiWebPublicCampaignLeaderboardControllerDonorParamsTimeType.
const (
	V5ApiWebPublicCampaignLeaderboardControllerDonorParamsTimeTypeAll     V5ApiWebPublicCampaignLeaderboardControllerDonorParamsTimeType = "all"
	V5ApiWebPublicCampaignLeaderboardControllerDonorParamsTimeTypeDaily   V5ApiWebPublicCampaignLeaderboardControllerDonorParamsTimeType = "daily"
	V5ApiWebPublicCampaignLeaderboardControllerDonorParamsTimeTypeMonthly V5ApiWebPublicCampaignLeaderboardControllerDonorParamsTimeType = "monthly"
	V5ApiWebPublicCampaignLeaderboardControllerDonorParamsTimeTypeWeekly  V5ApiWebPublicCampaignLeaderboardControllerDonorParamsTimeType = "weekly"
	V5ApiWebPublicCampaignLeaderboardControllerDonorParamsTimeTypeYearly  V5ApiWebPublicCampaignLeaderboardControllerDonorParamsTimeType = "yearly"
	V5ApiWebPublicCampaignLeaderboardControllerDonorParamsTimeTypeYtd     V5ApiWebPublicCampaignLeaderboardControllerDonorParamsTimeType = "ytd"
)

// Defines values for V5ApiWebPublicCauseLeaderboardControllerDonorParamsTimeType.
const (
	V5ApiWebPublicCauseLeaderboardControllerDonorParamsTimeTypeAll     V5ApiWebPublicCauseLeaderboardControllerDonorParamsTimeType = "all"
	V5ApiWebPublicCauseLeaderboardControllerDonorParamsTimeTypeDaily   V5ApiWebPublicCauseLeaderboardControllerDonorParamsTimeType = "daily"
	V5ApiWebPublicCauseLeaderboardControllerDonorParamsTimeTypeMonthly V5ApiWebPublicCauseLeaderboardControllerDonorParamsTimeType = "monthly"
	V5ApiWebPublicCauseLeaderboardControllerDonorParamsTimeTypeWeekly  V5ApiWebPublicCauseLeaderboardControllerDonorParamsTimeType = "weekly"
	V5ApiWebPublicCauseLeaderboardControllerDonorParamsTimeTypeYearly  V5ApiWebPublicCauseLeaderboardControllerDonorParamsTimeType = "yearly"
	V5ApiWebPublicCauseLeaderboardControllerDonorParamsTimeTypeYtd     V5ApiWebPublicCauseLeaderboardControllerDonorParamsTimeType = "ytd"
)

// Defines values for V5ApiWebPublicCauseLeaderboardControllerTeamParamsTimeType.
const (
	V5ApiWebPublicCauseLeaderboardControllerTeamParamsTimeTypeAll     V5ApiWebPublicCauseLeaderboardControllerTeamParamsTimeType = "all"
	V5ApiWebPublicCauseLeaderboardControllerTeamParamsTimeTypeDaily   V5ApiWebPublicCauseLeaderboardControllerTeamParamsTimeType = "daily"
	V5ApiWebPublicCauseLeaderboardControllerTeamParamsTimeTypeMonthly V5ApiWebPublicCauseLeaderboardControllerTeamParamsTimeType = "monthly"
	V5ApiWebPublicCauseLeaderboardControllerTeamParamsTimeTypeWeekly  V5ApiWebPublicCauseLeaderboardControllerTeamParamsTimeType = "weekly"
	V5ApiWebPublicCauseLeaderboardControllerTeamParamsTimeTypeYearly  V5ApiWebPublicCauseLeaderboardControllerTeamParamsTimeType = "yearly"
	V5ApiWebPublicCauseLeaderboardControllerTeamParamsTimeTypeYtd     V5ApiWebPublicCauseLeaderboardControllerTeamParamsTimeType = "ytd"
)

// Defines values for V5ApiWebPublicCauseLeaderboardControllerUserParamsTimeType.
const (
	V5ApiWebPublicCauseLeaderboardControllerUserParamsTimeTypeAll     V5ApiWebPublicCauseLeaderboardControllerUserParamsTimeType = "all"
	V5ApiWebPublicCauseLeaderboardControllerUserParamsTimeTypeDaily   V5ApiWebPublicCauseLeaderboardControllerUserParamsTimeType = "daily"
	V5ApiWebPublicCauseLeaderboardControllerUserParamsTimeTypeMonthly V5ApiWebPublicCauseLeaderboardControllerUserParamsTimeType = "monthly"
	V5ApiWebPublicCauseLeaderboardControllerUserParamsTimeTypeWeekly  V5ApiWebPublicCauseLeaderboardControllerUserParamsTimeType = "weekly"
	V5ApiWebPublicCauseLeaderboardControllerUserParamsTimeTypeYearly  V5ApiWebPublicCauseLeaderboardControllerUserParamsTimeType = "yearly"
	V5ApiWebPublicCauseLeaderboardControllerUserParamsTimeTypeYtd     V5ApiWebPublicCauseLeaderboardControllerUserParamsTimeType = "ytd"
)

// Defines values for V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParamsTimeType.
const (
	V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParamsTimeTypeAll     V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParamsTimeType = "all"
	V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParamsTimeTypeCustom  V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParamsTimeType = "custom"
	V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParamsTimeTypeDaily   V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParamsTimeType = "daily"
	V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParamsTimeTypeMonthly V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParamsTimeType = "monthly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParamsTimeTypeWeekly  V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParamsTimeType = "weekly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParamsTimeTypeYearly  V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParamsTimeType = "yearly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParamsTimeTypeYtd     V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParamsTimeType = "ytd"
)

// Defines values for V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType.
const (
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeTypeAll     V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType = "all"
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeTypeCustom  V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType = "custom"
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeTypeDaily   V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType = "daily"
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeTypeMonthly V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType = "monthly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeTypeWeekly  V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType = "weekly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeTypeYearly  V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType = "yearly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeTypeYtd     V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType = "ytd"
)

// Defines values for V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType.
const (
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeTypeAll     V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType = "all"
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeTypeCustom  V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType = "custom"
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeTypeDaily   V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType = "daily"
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeTypeMonthly V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType = "monthly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeTypeWeekly  V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType = "weekly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeTypeYearly  V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType = "yearly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeTypeYtd     V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType = "ytd"
)

// Defines values for V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParamsTimeType.
const (
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParamsTimeTypeAll     V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParamsTimeType = "all"
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParamsTimeTypeCustom  V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParamsTimeType = "custom"
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParamsTimeTypeDaily   V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParamsTimeType = "daily"
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParamsTimeTypeMonthly V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParamsTimeType = "monthly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParamsTimeTypeWeekly  V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParamsTimeType = "weekly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParamsTimeTypeYearly  V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParamsTimeType = "yearly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParamsTimeTypeYtd     V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParamsTimeType = "ytd"
)

// Defines values for V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType.
const (
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeTypeAll     V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType = "all"
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeTypeCustom  V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType = "custom"
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeTypeDaily   V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType = "daily"
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeTypeMonthly V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType = "monthly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeTypeWeekly  V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType = "weekly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeTypeYearly  V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType = "yearly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeTypeYtd     V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType = "ytd"
)

// Defines values for V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType.
const (
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeTypeAll     V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType = "all"
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeTypeCustom  V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType = "custom"
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeTypeDaily   V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType = "daily"
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeTypeMonthly V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType = "monthly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeTypeWeekly  V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType = "weekly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeTypeYearly  V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType = "yearly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeTypeYtd     V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType = "ytd"
)

// Defines values for V5ApiWebPublicFundraisingEventLeaderboardControllerUserParamsTimeType.
const (
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserParamsTimeTypeAll     V5ApiWebPublicFundraisingEventLeaderboardControllerUserParamsTimeType = "all"
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserParamsTimeTypeCustom  V5ApiWebPublicFundraisingEventLeaderboardControllerUserParamsTimeType = "custom"
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserParamsTimeTypeDaily   V5ApiWebPublicFundraisingEventLeaderboardControllerUserParamsTimeType = "daily"
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserParamsTimeTypeMonthly V5ApiWebPublicFundraisingEventLeaderboardControllerUserParamsTimeType = "monthly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserParamsTimeTypeWeekly  V5ApiWebPublicFundraisingEventLeaderboardControllerUserParamsTimeType = "weekly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserParamsTimeTypeYearly  V5ApiWebPublicFundraisingEventLeaderboardControllerUserParamsTimeType = "yearly"
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserParamsTimeTypeYtd     V5ApiWebPublicFundraisingEventLeaderboardControllerUserParamsTimeType = "ytd"
)

// Defines values for V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParamsTimeType.
const (
	V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParamsTimeTypeAll     V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParamsTimeType = "all"
	V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParamsTimeTypeDaily   V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParamsTimeType = "daily"
	V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParamsTimeTypeMonthly V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParamsTimeType = "monthly"
	V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParamsTimeTypeWeekly  V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParamsTimeType = "weekly"
	V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParamsTimeTypeYearly  V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParamsTimeType = "yearly"
	V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParamsTimeTypeYtd     V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParamsTimeType = "ytd"
)

// Defines values for V5ApiWebPublicTeamCampaignLeaderboardControllerUserParamsTimeType.
const (
	All     V5ApiWebPublicTeamCampaignLeaderboardControllerUserParamsTimeType = "all"
	Daily   V5ApiWebPublicTeamCampaignLeaderboardControllerUserParamsTimeType = "daily"
	Monthly V5ApiWebPublicTeamCampaignLeaderboardControllerUserParamsTimeType = "monthly"
	Weekly  V5ApiWebPublicTeamCampaignLeaderboardControllerUserParamsTimeType = "weekly"
	Yearly  V5ApiWebPublicTeamCampaignLeaderboardControllerUserParamsTimeType = "yearly"
	Ytd     V5ApiWebPublicTeamCampaignLeaderboardControllerUserParamsTimeType = "ytd"
)

// Defines values for V5ApiWebOauthAuthorizeParamsResponseType.
const (
	Code V5ApiWebOauthAuthorizeParamsResponseType = "code"
)

// Defines values for V5ApiWebOauthAuthorizeParamsScope.
const (
	V5ApiWebOauthAuthorizeParamsScopePublic V5ApiWebOauthAuthorizeParamsScope = "public"
)

// Defines values for V5ApiWebOauthTokenParamsGrantType.
const (
	AuthorizationCode  V5ApiWebOauthTokenParamsGrantType = "authorization_code"
	ClientCrendentials V5ApiWebOauthTokenParamsGrantType = "client_crendentials"
	RefreshToken       V5ApiWebOauthTokenParamsGrantType = "refresh_token"
)

// Defines values for V5ApiWebOauthTokenParamsScope.
const (
	V5ApiWebOauthTokenParamsScopePublic V5ApiWebOauthTokenParamsScope = "public"
)

// Campaign defines model for Campaign.
type Campaign struct {
	// AmountRaised The amount raised directly by this campaign
	AmountRaised Money `json:"amount_raised"`

	// Avatar An Image includes the html properties necessary to render an <img> tag
	Avatar *Image `json:"avatar"`

	// Description A short description about this campaign
	Description string `json:"description"`

	// Goal The current goal of the campaign
	Goal Money `json:"goal"`

	// HasSchedule Whether or not this campaign has schedule items
	HasSchedule bool `json:"has_schedule"`

	// Id Unique Identifier for the Object. UUID
	Id PublicId `json:"id"`

	// InsertedAt When the campaign was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name The name of this campaign
	Name string `json:"name"`

	// OriginalGoal The original goal of the campaign
	OriginalGoal Money `json:"original_goal"`

	// PublishedAt When the campaign was last published
	PublishedAt time.Time `json:"published_at"`

	// RetiredAt When the campaign was retired
	RetiredAt *time.Time `json:"retired_at"`

	// Slug This is a url slug used for the given resource.
	Slug Slug `json:"slug"`

	// Status The status of this campaign
	Status CampaignStatus `json:"status"`

	// SupportingType The amount raised by this campaign and all supporting campaigns
	SupportingType CampaignSupportingType `json:"supporting_type"`

	// TotalAmountRaised The amount raised by this campaign and all supporting campaigns
	TotalAmountRaised Money `json:"total_amount_raised"`

	// UpdatedAt When the campaign details were last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Url This is the full url for the campaign.
	Url Url `json:"url"`

	// User The User that owns this campaign.
	User *User `json:"user"`

	// UserId The ID for a User that owns this campaign.
	UserId *PublicId `json:"user_id"`
}

// CampaignStatus The status of this campaign
type CampaignStatus string

// CampaignSupportingType The amount raised by this campaign and all supporting campaigns
type CampaignSupportingType string

// CampaignPaginatedResponse Object returned for paginated API responses
type CampaignPaginatedResponse = PaginatedResponse

// CampaignResponse defines model for CampaignResponse.
type CampaignResponse struct {
	Data *Campaign `json:"data,omitempty"`
}

// Cause defines model for Cause.
type Cause struct {
	// Avatar An Image includes the html properties necessary to render an <img> tag
	Avatar  *Image `json:"avatar"`
	Contact struct {
		// AddressLine1 The first line of the contact address
		AddressLine1 *string `json:"address_line1"`

		// AddressLine2 The second line of the contact address
		AddressLine2 *string `json:"address_line2"`

		// City The city of the contact address
		City *string `json:"city"`

		// Country The country of the contact address
		Country *string `json:"country"`

		// Email An email address used for fundraiser contact.
		Email *string `json:"email"`

		// PostalCode The postal code of the contact address
		PostalCode *string `json:"postal_code"`

		// Region The region of the contact address
		Region *string `json:"region"`
	} `json:"contact"`

	// CurrencyCode The currency code used by this cause.
	CurrencyCode CurrencyCode `json:"currency_code"`

	// Description A description about this cause
	Description string `json:"description"`

	// GovernmentId The government id of this cause.
	GovernmentId string `json:"government_id"`

	// Id Unique Identifier for the Object. UUID
	Id PublicId `json:"id"`

	// InsertedAt When the cause was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name The cause name
	Name string `json:"name"`

	// ShortDescription A short description about this cause
	ShortDescription *string `json:"short_description"`

	// Slug This is a url slug used for the given resource.
	Slug Slug `json:"slug"`

	// Social An object with various social usernames and links
	Social *Social `json:"social"`

	// UpdatedAt When the cause details were last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// CauseResponse defines model for CauseResponse.
type CauseResponse struct {
	Data *Cause `json:"data,omitempty"`
}

// ConfiguredLeaderboard Configured Leaderboards Like V3
type ConfiguredLeaderboard struct {
	Individual *[]LeaderboardEntry `json:"individual,omitempty"`
	Team       *[]LeaderboardEntry `json:"team,omitempty"`
	Weekly     *[]LeaderboardEntry `json:"weekly,omitempty"`
}

// ConfiguredLeaderboardResponse defines model for ConfiguredLeaderboardResponse.
type ConfiguredLeaderboardResponse struct {
	// Data Configured Leaderboards Like V3
	Data *ConfiguredLeaderboard `json:"data,omitempty"`
}

// CurrencyCode ISO 4217 alphabetic currency code
type CurrencyCode = string

// CurrentUserObj defines model for CurrentUserObj.
type CurrentUserObj struct {
	Data *CurrentUserObj_Data `json:"data"`
}

// CurrentUserObj_Data defines model for CurrentUserObj.Data.
type CurrentUserObj_Data struct {
	union json.RawMessage
}

// Donation defines model for Donation.
type Donation struct {
	// Amount The amount donated.
	Amount Money `json:"amount"`

	// CampaignId ID of the campaign donated to
	CampaignId *PublicId `json:"campaign_id"`

	// CompletedAt Timestamp of when the donation was completed.
	CompletedAt *time.Time `json:"completed_at"`

	// DonorComment Note left by donor
	DonorComment *string `json:"donor_comment"`

	// DonorName Publically visible donor name. This may be set to 'Anonymous' if the donation was anonymous or moderated.
	DonorName string `json:"donor_name"`

	// FundraisingEventId ID of the fundraising event donated to
	FundraisingEventId *PublicId `json:"fundraising_event_id"`

	// Id Unique Identifier for the donation.
	Id PublicId `json:"id"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// PollId The ID for a Poll, if one was donated toward.
	PollId *PublicId `json:"poll_id"`

	// PollOptionId The ID for a PollOption, if one was donated toward.
	PollOptionId *PublicId `json:"poll_option_id"`

	// RewardId The ID for a Reward, if one was donated toward.
	RewardId *PublicId `json:"reward_id"`

	// Sustained Whether or not the donation is a part of a monthly donation.
	Sustained *bool `json:"sustained"`

	// TargetId The ID for a Target, if one was donated toward.
	TargetId *PublicId `json:"target_id"`

	// TeamEventId The ID of a team event if it exists
	TeamEventId *PublicId `json:"team_event_id"`
}

// DonationPaginatedResponse Object returned for paginated API responses
type DonationPaginatedResponse = PaginatedResponse

// ErrorResponse Object returned in API errors
type ErrorResponse struct {
	Error struct {
		Fields *map[string][]string `json:"fields"`

		// Message A human readable message describing the error.
		Message string `json:"message"`

		// Status The HTTP status of the error
		Status int `json:"status"`
	} `json:"error"`
}

// Event defines model for Event.
type Event struct {
	union json.RawMessage
}

// EventPaginatedResponse Object returned for paginated API responses
type EventPaginatedResponse = PaginatedResponse

// Forbidden Object returned in API errors
type Forbidden = ErrorResponse

// FundraisingEvent defines model for FundraisingEvent.
type FundraisingEvent struct {
	// Avatar An Image includes the html properties necessary to render an <img> tag
	Avatar *Image `json:"avatar"`

	// CauseId The ID for a Cause that owns this fundraising event.
	CauseId PublicId `json:"cause_id"`

	// CurrencyCode The currency code used by this fundraising event.
	CurrencyCode CurrencyCode `json:"currency_code"`

	// Description A short description about this fundraising event
	Description string `json:"description"`

	// EndsAt A date when this fundraising event ends.
	EndsAt openapi_types.Date `json:"ends_at"`

	// Goal The current goal of the fundraising event
	Goal *Money `json:"goal"`

	// Id Unique Identifier for the Object. UUID
	Id PublicId `json:"id"`

	// InsertedAt When the fundraising event was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name The name of this fundraising event
	Name string `json:"name"`

	// PublishedAt When the fundraising event was last published
	PublishedAt time.Time `json:"published_at"`

	// RetiredAt When the fundraising event was retired
	RetiredAt *time.Time `json:"retired_at"`

	// Slug This is a url slug used for the given resource.
	Slug Slug `json:"slug"`

	// StartsAt An optional date when this fundraising event starts.
	StartsAt *openapi_types.Date `json:"starts_at"`

	// Status The status of this fundraising event
	Status FundraisingEventStatus `json:"status"`

	// TotalAmountRaised The amount raised by this fundraising event and all supporting campaigns
	TotalAmountRaised Money `json:"total_amount_raised"`

	// UpdatedAt When the fundraising event details were last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Url This is the full url for the fundraising event.
	Url Url `json:"url"`
}

// FundraisingEventStatus The status of this fundraising event
type FundraisingEventStatus string

// FundraisingEventPaginatedResponse Object returned for paginated API responses
type FundraisingEventPaginatedResponse = PaginatedResponse

// FundraisingEventResponse defines model for FundraisingEventResponse.
type FundraisingEventResponse struct {
	Data *FundraisingEvent `json:"data,omitempty"`
}

// Image An Image includes the html properties necessary to render an <img> tag
type Image struct {
	// Alt Short description of the image
	Alt *string `json:"alt"`

	// Height Height of the image.
	Height *int `json:"height"`

	// Src Full URL of the image.
	Src string `json:"src"`

	// Width Width of the image.
	Width *int `json:"width"`
}

// LeaderboardEntry defines model for LeaderboardEntry.
type LeaderboardEntry struct {
	// Amount The total amount raised by this leaderboard entry.
	Amount LeaderboardEntry_Amount `json:"amount"`

	// Avatar An Image includes the html properties necessary to render an <img> tag
	Avatar *Image `json:"avatar"`

	// Heat The change in place of this entry
	Heat *float32 `json:"heat"`

	// Id Unique Identifier for the Object. UUID
	Id PublicId `json:"id"`

	// Name The team's name
	Name string `json:"name"`

	// Url This is the full url for the team profile.
	Url *Url `json:"url"`
}

// LeaderboardEntry_Amount The total amount raised by this leaderboard entry.
type LeaderboardEntry_Amount struct {
	union json.RawMessage
}

// LeaderboardEntryPaginatedResponse Object returned for paginated API responses
type LeaderboardEntryPaginatedResponse = PaginatedResponse

// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
type LegacyId = float32

// MeasuredUnit Schema defining measurable amount in given unit
type MeasuredUnit struct {
	// Unit measured unit
	Unit MeasuredUnitUnit `json:"unit"`

	// Value Monetary amount
	Value string `json:"value"`
}

// MeasuredUnitUnit measured unit
type MeasuredUnitUnit string

// Milestone defines model for Milestone.
type Milestone struct {
	// Active Whether or not the milestone is active
	Active bool `json:"active"`

	// Amount The amount of the milestone.
	Amount Money `json:"amount"`

	// Id Unique Identifier for the milestone.
	Id PublicId `json:"id"`

	// InsertedAt Moment when the milestone was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name Milestone name
	Name string `json:"name"`

	// UpdatedAt Moment when the milestone was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// MilestonePaginatedResponse Object returned for paginated API responses
type MilestonePaginatedResponse = PaginatedResponse

// Money Schema defining monetary amount in given currency
type Money struct {
	// Currency ISO 4217 alphabetic currency code
	Currency CurrencyCode `json:"currency"`

	// Value Monetary amount
	Value string `json:"value"`
}

// NotFound Object returned in API errors
type NotFound = ErrorResponse

// NullableUserResponse defines model for NullableUserResponse.
type NullableUserResponse struct {
	Data *NullableUserResponse_Data `json:"data"`
}

// NullableUserResponse_Data defines model for NullableUserResponse.Data.
type NullableUserResponse_Data struct {
	union json.RawMessage
}

// PaginatedResponse Object returned for paginated API responses
type PaginatedResponse struct {
	Data     []map[string]interface{} `json:"data"`
	Metadata *struct {
		// After The cursor to the next page if it exists
		After *string `json:"after"`

		// Before The cursor to the previous page if it exists
		Before *string `json:"before"`

		// Limit The requested record limit
		Limit float32 `json:"limit"`
	} `json:"metadata,omitempty"`
}

// Poll defines model for Poll.
type Poll struct {
	// Active Whether or not the milestone is active
	Active bool `json:"active"`

	// AmountRaised Amount Raised by this poll option
	AmountRaised Money `json:"amount_raised"`

	// Id Unique Identifier for the milestone.
	Id PublicId `json:"id"`

	// InsertedAt Moment when the milestone was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name Milestone name
	Name    string       `json:"name"`
	Options []PollOption `json:"options"`

	// UpdatedAt Moment when the milestone was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// PollOption defines model for PollOption.
type PollOption struct {
	// AmountRaised Amount Raised by this poll option
	AmountRaised Money `json:"amount_raised"`

	// Id Unique Identifier for the poll option.
	Id PublicId `json:"id"`

	// InsertedAt Moment when the poll option was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name poll option name
	Name string `json:"name"`

	// UpdatedAt Moment when the poll option was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// PollPaginatedResponse Object returned for paginated API responses
type PollPaginatedResponse = PaginatedResponse

// PublicId Unique Identifier for the Object. UUID
type PublicId = openapi_types.UUID

// Reward defines model for Reward.
type Reward struct {
	// Active Whether or not the reward is active
	Active bool `json:"active"`

	// Amount Amount needed to claim this reward
	Amount Money `json:"amount"`

	// Description Short description of the reward
	Description *string `json:"description"`

	// EndsAt Moment when the reward ends
	EndsAt *time.Time `json:"ends_at"`

	// FairMarketValue The fair market value of this reward
	FairMarketValue *Money `json:"fair_market_value"`

	// Id Unique Identifier for the reward.
	Id    PublicId `json:"id"`
	Image *Image   `json:"image"`

	// InsertedAt Moment when the reward was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name Reward name
	Name string `json:"name"`

	// Quantity total amount of this reward if it has a limited quantity
	Quantity *int `json:"quantity"`

	// QuantityRemaining remaining amount of this reward if it has a limited quantity
	QuantityRemaining *int `json:"quantity_remaining"`

	// StartsAt Moment when the reward starts
	StartsAt *time.Time `json:"starts_at"`

	// UpdatedAt Moment when the milestone was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// RewardPaginatedResponse Object returned for paginated API responses
type RewardPaginatedResponse = PaginatedResponse

// Role defines model for Role.
type Role struct {
	// Id Unique Identifier for the Object. UUID
	Id PublicId `json:"id"`

	// Key Internal key for the role
	Key RoleKey `json:"key"`

	// Name Visible name of the role
	Name string `json:"name"`
}

// RoleKey Internal key for the role
type RoleKey string

// Schedule defines model for Schedule.
type Schedule struct {
	// Description Campaign schedule description
	Description *string `json:"description"`

	// EndsAt Moment when the schedule ends in ISO8601 format
	EndsAt *time.Time `json:"ends_at"`

	// Id Unique Identifier for the milestone.
	Id PublicId `json:"id"`

	// InsertedAt Moment when the milestone was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name Milestone name
	Name string `json:"name"`

	// StartsAt Moment when the schedule starts in ISO8601 format
	StartsAt time.Time `json:"starts_at"`

	// UpdatedAt Moment when the milestone was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// SchedulePaginatedResponse Object returned for paginated API responses
type SchedulePaginatedResponse = PaginatedResponse

// Slug This is a url slug used for the given resource.
type Slug = string

// Social An object with various social usernames and links
type Social struct {
	// Discord Discord invite url
	Discord *string `json:"discord"`

	// Facebook Facebook Page username
	Facebook *string `json:"facebook"`

	// Instagram Instagram username
	Instagram *string `json:"instagram"`

	// Snapchat Snapchat username
	Snapchat *string `json:"snapchat"`

	// Tiktok TikTok username
	Tiktok *string `json:"tiktok"`

	// Twitch Twitch username
	Twitch *string `json:"twitch"`

	// Twitter Twitter username
	Twitter *string `json:"twitter"`

	// Website Custom website url
	Website *string `json:"website"`

	// Youtube Youtube channel ID
	Youtube *string `json:"youtube"`
}

// Target defines model for Target.
type Target struct {
	// Active Whether or not the target is active
	Active bool `json:"active"`

	// Amount Amount to hit this target
	Amount Money `json:"amount"`

	// AmountRaised Amount Raised by this target
	AmountRaised Money `json:"amount_raised"`

	// EndsAt Moment when the target ends
	EndsAt time.Time `json:"ends_at"`

	// Id Unique Identifier for the target.
	Id PublicId `json:"id"`

	// InsertedAt Moment when the target was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name target name
	Name string `json:"name"`

	// UpdatedAt Moment when the target was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// TargetPaginatedResponse Object returned for paginated API responses
type TargetPaginatedResponse = PaginatedResponse

// Team defines model for Team.
type Team struct {
	// Avatar An Image includes the html properties necessary to render an <img> tag
	Avatar *Image `json:"avatar"`

	// Description The description section on a team's profile.
	Description *string `json:"description"`

	// Id Unique Identifier for the Object. UUID
	Id PublicId `json:"id"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name The team's name
	Name string `json:"name"`

	// Slug This is a url slug used for the given resource.
	Slug Slug `json:"slug"`

	// Social An object with various social usernames and links
	Social *Social `json:"social"`

	// TotalAmountRaised The total amount raised by this user represented in USD.
	TotalAmountRaised Money `json:"total_amount_raised"`

	// Url This is the full url for the team profile.
	Url Url `json:"url"`
}

// TeamCampaign defines model for TeamCampaign.
type TeamCampaign struct {
	// AmountRaised The amount raised directly by this team campaign
	AmountRaised Money `json:"amount_raised"`

	// Avatar An Image includes the html properties necessary to render an <img> tag
	Avatar *Image `json:"avatar"`

	// CurrencyCode The currency code used by this team campaign.
	CurrencyCode CurrencyCode `json:"currency_code"`

	// Description A short description about this team campaign
	Description *string `json:"description"`

	// Goal The current goal of the team campaign
	Goal *Money `json:"goal"`

	// HasSchedule Whether or not this campaign has schedule items
	HasSchedule bool `json:"has_schedule"`

	// Id Unique Identifier for the Object. UUID
	Id PublicId `json:"id"`

	// InsertedAt When the team campaign was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name The name of this team campaign
	Name string `json:"name"`

	// OriginalGoal The original goal of the campaign
	OriginalGoal Money `json:"original_goal"`

	// PublishedAt When the team campaign was last published
	PublishedAt time.Time `json:"published_at"`

	// RetiredAt When the team campaign was retired
	RetiredAt *time.Time `json:"retired_at"`

	// Slug This is a url slug used for the given resource.
	Slug Slug `json:"slug"`

	// Status The status of this campaign
	Status TeamCampaignStatus `json:"status"`

	// Supportable The amount raised by this campaign and all supporting campaigns
	Supportable TeamCampaignSupportable `json:"supportable"`

	// SupportingAmountRaised The amount raised by any supporting campaigns
	SupportingAmountRaised Money `json:"supporting_amount_raised"`

	// Team The Team that owns this campaign.
	Team *Team `json:"team"`

	// TeamId The ID for a Team that owns this campaign.
	TeamId *PublicId `json:"team_id"`

	// TotalAmountRaised The amount raised by this team campaign and all supporting campaigns
	TotalAmountRaised Money `json:"total_amount_raised"`

	// UpdatedAt When the team campaign details were last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Url This is the full url for the team campaign.
	Url Url `json:"url"`
}

// TeamCampaignStatus The status of this campaign
type TeamCampaignStatus string

// TeamCampaignSupportable The amount raised by this campaign and all supporting campaigns
type TeamCampaignSupportable string

// TeamCampaignPaginatedResponse Object returned for paginated API responses
type TeamCampaignPaginatedResponse = PaginatedResponse

// TeamCampaignResponse defines model for TeamCampaignResponse.
type TeamCampaignResponse struct {
	Data *TeamCampaign `json:"data,omitempty"`
}

// TeamMember defines model for TeamMember.
type TeamMember struct {
	// Id Unique Identifier for the Object. UUID
	Id PublicId `json:"id"`

	// InsertedAt When the team member was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Roles A list of the team member's roles
	Roles []Role `json:"roles"`

	// UpdatedAt When the team member was last updated
	UpdatedAt time.Time `json:"updated_at"`
	User      User      `json:"user"`
}

// TeamMemberPaginatedResponse Object returned for paginated API responses
type TeamMemberPaginatedResponse = PaginatedResponse

// TeamPaginatedResponse Object returned for paginated API responses
type TeamPaginatedResponse = PaginatedResponse

// TeamResponse defines model for TeamResponse.
type TeamResponse struct {
	Data *Team `json:"data,omitempty"`
}

// Unauthorized Object returned in API errors
type Unauthorized = ErrorResponse

// UnprocessableEntity Object returned in API errors
type UnprocessableEntity = ErrorResponse

// Url This is the full url used for the given resource.
type Url = string

// User defines model for User.
type User struct {
	// Avatar An Image includes the html properties necessary to render an <img> tag
	Avatar *Image `json:"avatar"`

	// Description The description section on a user's profile.
	Description *string `json:"description"`

	// Id Unique Identifier for the Object. UUID
	Id PublicId `json:"id"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Slug This is a url slug used for the given resource.
	Slug Slug `json:"slug"`

	// Social An object with various social usernames and links
	Social *Social `json:"social"`

	// TotalAmountRaised The total amount raised by this user represented in USD.
	TotalAmountRaised Money `json:"total_amount_raised"`

	// Url This is the full url for the user profile.
	Url Url `json:"url"`

	// Username The user's username
	Username string `json:"username"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	Data *User `json:"data,omitempty"`
}

// CurrentUser defines model for currentUser.
type CurrentUser = CurrentUserObj

// V5ApiWebPublicCampaignDonationControllerIndexParams defines parameters for V5ApiWebPublicCampaignDonationControllerIndex.
type V5ApiWebPublicCampaignDonationControllerIndexParams struct {
	// CompletedBefore Returns only donations that have been completed before the given moment in ISO8601 format
	CompletedBefore *string `form:"completed_before,omitempty" json:"completed_before,omitempty"`

	// CompletedAfter Returns only donations that have been completed after the given moment in ISO8601 format
	CompletedAfter *string `form:"completed_after,omitempty" json:"completed_after,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicCampaignLeaderboardControllerDonorParams defines parameters for V5ApiWebPublicCampaignLeaderboardControllerDonor.
type V5ApiWebPublicCampaignLeaderboardControllerDonorParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *V5ApiWebPublicCampaignLeaderboardControllerDonorParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicCampaignLeaderboardControllerDonorParamsTimeType defines parameters for V5ApiWebPublicCampaignLeaderboardControllerDonor.
type V5ApiWebPublicCampaignLeaderboardControllerDonorParamsTimeType string

// V5ApiWebPublicCampaignMilestoneControllerIndexParams defines parameters for V5ApiWebPublicCampaignMilestoneControllerIndex.
type V5ApiWebPublicCampaignMilestoneControllerIndexParams struct {
	// IncludeDisabled Returns disabled milestones. Defaults to false
	IncludeDisabled *bool `form:"include_disabled,omitempty" json:"include_disabled,omitempty"`

	// CreatedBefore Returns only milestones that have been updated before the given moment in ISO8601 format
	CreatedBefore *string `form:"created_before,omitempty" json:"created_before,omitempty"`

	// CreatedAfter Returns only milestones that have been updated after the given moment in ISO8601 format
	CreatedAfter *string `form:"created_after,omitempty" json:"created_after,omitempty"`

	// UpdatedBefore Returns only milestones that have been updated before the given moment in ISO8601 format
	UpdatedBefore *string `form:"updated_before,omitempty" json:"updated_before,omitempty"`

	// UpdatedAfter Returns only milestones that have been updated after the given moment in ISO8601 format
	UpdatedAfter *string `form:"updated_after,omitempty" json:"updated_after,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicCampaignPollControllerIndexParams defines parameters for V5ApiWebPublicCampaignPollControllerIndex.
type V5ApiWebPublicCampaignPollControllerIndexParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicCampaignRewardControllerIndexParams defines parameters for V5ApiWebPublicCampaignRewardControllerIndex.
type V5ApiWebPublicCampaignRewardControllerIndexParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicCampaignScheduleControllerIndexParams defines parameters for V5ApiWebPublicCampaignScheduleControllerIndex.
type V5ApiWebPublicCampaignScheduleControllerIndexParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicCampaignChallengeControllerIndexParams defines parameters for V5ApiWebPublicCampaignChallengeControllerIndex.
type V5ApiWebPublicCampaignChallengeControllerIndexParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicCauseCampaignControllerIndexParams defines parameters for V5ApiWebPublicCauseCampaignControllerIndex.
type V5ApiWebPublicCauseCampaignControllerIndexParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicCauseLeaderboardControllerDonorParams defines parameters for V5ApiWebPublicCauseLeaderboardControllerDonor.
type V5ApiWebPublicCauseLeaderboardControllerDonorParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *V5ApiWebPublicCauseLeaderboardControllerDonorParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicCauseLeaderboardControllerDonorParamsTimeType defines parameters for V5ApiWebPublicCauseLeaderboardControllerDonor.
type V5ApiWebPublicCauseLeaderboardControllerDonorParamsTimeType string

// V5ApiWebPublicCauseFundraisingEventControllerIndexParams defines parameters for V5ApiWebPublicCauseFundraisingEventControllerIndex.
type V5ApiWebPublicCauseFundraisingEventControllerIndexParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicCauseLeaderboardControllerTeamParams defines parameters for V5ApiWebPublicCauseLeaderboardControllerTeam.
type V5ApiWebPublicCauseLeaderboardControllerTeamParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *V5ApiWebPublicCauseLeaderboardControllerTeamParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicCauseLeaderboardControllerTeamParamsTimeType defines parameters for V5ApiWebPublicCauseLeaderboardControllerTeam.
type V5ApiWebPublicCauseLeaderboardControllerTeamParamsTimeType string

// V5ApiWebPublicCauseLeaderboardControllerUserParams defines parameters for V5ApiWebPublicCauseLeaderboardControllerUser.
type V5ApiWebPublicCauseLeaderboardControllerUserParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *V5ApiWebPublicCauseLeaderboardControllerUserParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicCauseLeaderboardControllerUserParamsTimeType defines parameters for V5ApiWebPublicCauseLeaderboardControllerUser.
type V5ApiWebPublicCauseLeaderboardControllerUserParamsTimeType string

// V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParams defines parameters for V5ApiWebPublicFundraisingEventLeaderboardControllerDonor.
type V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParamsTimeType defines parameters for V5ApiWebPublicFundraisingEventLeaderboardControllerDonor.
type V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParamsTimeType string

// V5ApiWebPublicFundraisingEventSupportingEventControllerIndexParams defines parameters for V5ApiWebPublicFundraisingEventSupportingEventControllerIndex.
type V5ApiWebPublicFundraisingEventSupportingEventControllerIndexParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParams defines parameters for V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance.
type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType defines parameters for V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance.
type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType string

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParams defines parameters for V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime.
type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType defines parameters for V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime.
type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType string

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParams defines parameters for V5ApiWebPublicFundraisingEventLeaderboardControllerTeam.
type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParamsTimeType defines parameters for V5ApiWebPublicFundraisingEventLeaderboardControllerTeam.
type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParamsTimeType string

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParams defines parameters for V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance.
type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType defines parameters for V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance.
type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType string

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParams defines parameters for V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime.
type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType defines parameters for V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime.
type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType string

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserParams defines parameters for V5ApiWebPublicFundraisingEventLeaderboardControllerUser.
type V5ApiWebPublicFundraisingEventLeaderboardControllerUserParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *V5ApiWebPublicFundraisingEventLeaderboardControllerUserParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserParamsTimeType defines parameters for V5ApiWebPublicFundraisingEventLeaderboardControllerUser.
type V5ApiWebPublicFundraisingEventLeaderboardControllerUserParamsTimeType string

// V5ApiWebPublicTeamCampaignDonationControllerIndexParams defines parameters for V5ApiWebPublicTeamCampaignDonationControllerIndex.
type V5ApiWebPublicTeamCampaignDonationControllerIndexParams struct {
	// CompletedBefore Returns only donations that have been completed before the given moment in ISO8601 format
	CompletedBefore *string `form:"completed_before,omitempty" json:"completed_before,omitempty"`

	// CompletedAfter Returns only donations that have been completed after the given moment in ISO8601 format
	CompletedAfter *string `form:"completed_after,omitempty" json:"completed_after,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParams defines parameters for V5ApiWebPublicTeamCampaignLeaderboardControllerDonor.
type V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParamsTimeType defines parameters for V5ApiWebPublicTeamCampaignLeaderboardControllerDonor.
type V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParamsTimeType string

// V5ApiWebPublicTeamCampaignMilestoneControllerIndexParams defines parameters for V5ApiWebPublicTeamCampaignMilestoneControllerIndex.
type V5ApiWebPublicTeamCampaignMilestoneControllerIndexParams struct {
	// IncludeDisabled Returns disabled milestones. Defaults to false
	IncludeDisabled *bool `form:"include_disabled,omitempty" json:"include_disabled,omitempty"`

	// CreatedBefore Returns only milestones that have been updated before the given moment in ISO8601 format
	CreatedBefore *string `form:"created_before,omitempty" json:"created_before,omitempty"`

	// CreatedAfter Returns only milestones that have been updated after the given moment in ISO8601 format
	CreatedAfter *string `form:"created_after,omitempty" json:"created_after,omitempty"`

	// UpdatedBefore Returns only milestones that have been updated before the given moment in ISO8601 format
	UpdatedBefore *string `form:"updated_before,omitempty" json:"updated_before,omitempty"`

	// UpdatedAfter Returns only milestones that have been updated after the given moment in ISO8601 format
	UpdatedAfter *string `form:"updated_after,omitempty" json:"updated_after,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicTeamCampaignPollControllerIndexParams defines parameters for V5ApiWebPublicTeamCampaignPollControllerIndex.
type V5ApiWebPublicTeamCampaignPollControllerIndexParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicTeamCampaignRewardControllerIndexParams defines parameters for V5ApiWebPublicTeamCampaignRewardControllerIndex.
type V5ApiWebPublicTeamCampaignRewardControllerIndexParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicTeamCampaignScheduleControllerIndexParams defines parameters for V5ApiWebPublicTeamCampaignScheduleControllerIndex.
type V5ApiWebPublicTeamCampaignScheduleControllerIndexParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexParams defines parameters for V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex.
type V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicTeamCampaignChallengeControllerIndexParams defines parameters for V5ApiWebPublicTeamCampaignChallengeControllerIndex.
type V5ApiWebPublicTeamCampaignChallengeControllerIndexParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicTeamCampaignLeaderboardControllerUserParams defines parameters for V5ApiWebPublicTeamCampaignLeaderboardControllerUser.
type V5ApiWebPublicTeamCampaignLeaderboardControllerUserParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *V5ApiWebPublicTeamCampaignLeaderboardControllerUserParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicTeamCampaignLeaderboardControllerUserParamsTimeType defines parameters for V5ApiWebPublicTeamCampaignLeaderboardControllerUser.
type V5ApiWebPublicTeamCampaignLeaderboardControllerUserParamsTimeType string

// V5ApiWebPublicTeamMemberControllerIndexParams defines parameters for V5ApiWebPublicTeamMemberControllerIndex.
type V5ApiWebPublicTeamMemberControllerIndexParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicTeamTeamCampaignControllerIndexParams defines parameters for V5ApiWebPublicTeamTeamCampaignControllerIndex.
type V5ApiWebPublicTeamTeamCampaignControllerIndexParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicUserCampaignControllerIndexParams defines parameters for V5ApiWebPublicUserCampaignControllerIndex.
type V5ApiWebPublicUserCampaignControllerIndexParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicUserIntegrationEventControllerIndexParams defines parameters for V5ApiWebPublicUserIntegrationEventControllerIndex.
type V5ApiWebPublicUserIntegrationEventControllerIndexParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebPublicUserTeamControllerIndexParams defines parameters for V5ApiWebPublicUserTeamControllerIndex.
type V5ApiWebPublicUserTeamControllerIndexParams struct {
	// Role Returns only teams where a user has a specific role
	Role *string `form:"role,omitempty" json:"role,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebOauthAuthorizeJSONBody defines parameters for V5ApiWebOauthAuthorize.
type V5ApiWebOauthAuthorizeJSONBody = map[string]interface{}

// V5ApiWebOauthAuthorizeParams defines parameters for V5ApiWebOauthAuthorize.
type V5ApiWebOauthAuthorizeParams struct {
	// ClientId Client Id
	ClientId string `form:"client_id" json:"client_id"`

	// RedirectUri Redirect URI
	RedirectUri string `form:"redirect_uri" json:"redirect_uri"`

	// ResponseType Response Type
	ResponseType V5ApiWebOauthAuthorizeParamsResponseType `form:"response_type" json:"response_type"`

	// Scope Scope
	Scope *V5ApiWebOauthAuthorizeParamsScope `form:"scope,omitempty" json:"scope,omitempty"`
}

// V5ApiWebOauthAuthorizeParamsResponseType defines parameters for V5ApiWebOauthAuthorize.
type V5ApiWebOauthAuthorizeParamsResponseType string

// V5ApiWebOauthAuthorizeParamsScope defines parameters for V5ApiWebOauthAuthorize.
type V5ApiWebOauthAuthorizeParamsScope string

// V5ApiWebOauthTokenJSONBody defines parameters for V5ApiWebOauthToken.
type V5ApiWebOauthTokenJSONBody = map[string]interface{}

// V5ApiWebOauthTokenParams defines parameters for V5ApiWebOauthToken.
type V5ApiWebOauthTokenParams struct {
	// ClientId Client Id
	ClientId string `form:"client_id" json:"client_id"`

	// ClientSecret Client Secret
	ClientSecret string `form:"client_secret" json:"client_secret"`

	// GrantType Grant Type
	GrantType V5ApiWebOauthTokenParamsGrantType `form:"grant_type" json:"grant_type"`

	// Code Authorization Code; `*required` if using `authorization_code` grant type
	Code *string `form:"code,omitempty" json:"code,omitempty"`

	// Scope Scope
	Scope *V5ApiWebOauthTokenParamsScope `form:"scope,omitempty" json:"scope,omitempty"`
}

// V5ApiWebOauthTokenParamsGrantType defines parameters for V5ApiWebOauthToken.
type V5ApiWebOauthTokenParamsGrantType string

// V5ApiWebOauthTokenParamsScope defines parameters for V5ApiWebOauthToken.
type V5ApiWebOauthTokenParamsScope string

// V5ApiWebOauthAuthorizeJSONRequestBody defines body for V5ApiWebOauthAuthorize for application/json ContentType.
type V5ApiWebOauthAuthorizeJSONRequestBody = V5ApiWebOauthAuthorizeJSONBody

// V5ApiWebOauthTokenJSONRequestBody defines body for V5ApiWebOauthToken for application/json ContentType.
type V5ApiWebOauthTokenJSONRequestBody = V5ApiWebOauthTokenJSONBody

// AsUser returns the union data inside the CurrentUserObj_Data as a User
func (t CurrentUserObj_Data) AsUser() (User, error) {
	var body User
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUser overwrites any union data inside the CurrentUserObj_Data as the provided User
func (t *CurrentUserObj_Data) FromUser(v User) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUser performs a merge with any union data inside the CurrentUserObj_Data, using the provided User
func (t *CurrentUserObj_Data) MergeUser(v User) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CurrentUserObj_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CurrentUserObj_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCampaign returns the union data inside the Event as a Campaign
func (t Event) AsCampaign() (Campaign, error) {
	var body Campaign
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCampaign overwrites any union data inside the Event as the provided Campaign
func (t *Event) FromCampaign(v Campaign) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCampaign performs a merge with any union data inside the Event, using the provided Campaign
func (t *Event) MergeCampaign(v Campaign) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsTeamCampaign returns the union data inside the Event as a TeamCampaign
func (t Event) AsTeamCampaign() (TeamCampaign, error) {
	var body TeamCampaign
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTeamCampaign overwrites any union data inside the Event as the provided TeamCampaign
func (t *Event) FromTeamCampaign(v TeamCampaign) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTeamCampaign performs a merge with any union data inside the Event, using the provided TeamCampaign
func (t *Event) MergeTeamCampaign(v TeamCampaign) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Event) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Event) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMoney returns the union data inside the LeaderboardEntry_Amount as a Money
func (t LeaderboardEntry_Amount) AsMoney() (Money, error) {
	var body Money
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMoney overwrites any union data inside the LeaderboardEntry_Amount as the provided Money
func (t *LeaderboardEntry_Amount) FromMoney(v Money) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMoney performs a merge with any union data inside the LeaderboardEntry_Amount, using the provided Money
func (t *LeaderboardEntry_Amount) MergeMoney(v Money) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsMeasuredUnit returns the union data inside the LeaderboardEntry_Amount as a MeasuredUnit
func (t LeaderboardEntry_Amount) AsMeasuredUnit() (MeasuredUnit, error) {
	var body MeasuredUnit
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMeasuredUnit overwrites any union data inside the LeaderboardEntry_Amount as the provided MeasuredUnit
func (t *LeaderboardEntry_Amount) FromMeasuredUnit(v MeasuredUnit) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMeasuredUnit performs a merge with any union data inside the LeaderboardEntry_Amount, using the provided MeasuredUnit
func (t *LeaderboardEntry_Amount) MergeMeasuredUnit(v MeasuredUnit) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t LeaderboardEntry_Amount) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LeaderboardEntry_Amount) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUser returns the union data inside the NullableUserResponse_Data as a User
func (t NullableUserResponse_Data) AsUser() (User, error) {
	var body User
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUser overwrites any union data inside the NullableUserResponse_Data as the provided User
func (t *NullableUserResponse_Data) FromUser(v User) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUser performs a merge with any union data inside the NullableUserResponse_Data, using the provided User
func (t *NullableUserResponse_Data) MergeUser(v User) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t NullableUserResponse_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NullableUserResponse_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// V5ApiWebPublicCampaignControllerShow request
	V5ApiWebPublicCampaignControllerShow(ctx context.Context, campaignId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicCampaignDonationControllerIndex request
	V5ApiWebPublicCampaignDonationControllerIndex(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignDonationControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicCampaignLeaderboardControllerDonor request
	V5ApiWebPublicCampaignLeaderboardControllerDonor(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicCampaignMilestoneControllerIndex request
	V5ApiWebPublicCampaignMilestoneControllerIndex(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignMilestoneControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicCampaignPollControllerIndex request
	V5ApiWebPublicCampaignPollControllerIndex(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignPollControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicCampaignRewardControllerIndex request
	V5ApiWebPublicCampaignRewardControllerIndex(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignRewardControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicCampaignScheduleControllerIndex request
	V5ApiWebPublicCampaignScheduleControllerIndex(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignScheduleControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicCampaignChallengeControllerIndex request
	V5ApiWebPublicCampaignChallengeControllerIndex(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignChallengeControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicCauseControllerShow request
	V5ApiWebPublicCauseControllerShow(ctx context.Context, causeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicCauseCampaignControllerIndex request
	V5ApiWebPublicCauseCampaignControllerIndex(ctx context.Context, causeId string, params *V5ApiWebPublicCauseCampaignControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicCauseLeaderboardControllerConfigured request
	V5ApiWebPublicCauseLeaderboardControllerConfigured(ctx context.Context, causeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicCauseLeaderboardControllerDonor request
	V5ApiWebPublicCauseLeaderboardControllerDonor(ctx context.Context, causeId string, params *V5ApiWebPublicCauseLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicCauseFundraisingEventControllerIndex request
	V5ApiWebPublicCauseFundraisingEventControllerIndex(ctx context.Context, causeId string, params *V5ApiWebPublicCauseFundraisingEventControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicCauseLeaderboardControllerTeam request
	V5ApiWebPublicCauseLeaderboardControllerTeam(ctx context.Context, causeId string, params *V5ApiWebPublicCauseLeaderboardControllerTeamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicCauseLeaderboardControllerUser request
	V5ApiWebPublicCauseLeaderboardControllerUser(ctx context.Context, causeId string, params *V5ApiWebPublicCauseLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicUserControllerCurrentUser request
	V5ApiWebPublicUserControllerCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicFundraisingEventControllerShow request
	V5ApiWebPublicFundraisingEventControllerShow(ctx context.Context, fundraisingEventId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured request
	V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured(ctx context.Context, fundraisingEventId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicFundraisingEventLeaderboardControllerDonor request
	V5ApiWebPublicFundraisingEventLeaderboardControllerDonor(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicFundraisingEventSupportingEventControllerIndex request
	V5ApiWebPublicFundraisingEventSupportingEventControllerIndex(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventSupportingEventControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance request
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime request
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicFundraisingEventLeaderboardControllerTeam request
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeam(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance request
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime request
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicFundraisingEventLeaderboardControllerUser request
	V5ApiWebPublicFundraisingEventLeaderboardControllerUser(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicTeamCampaignControllerShow request
	V5ApiWebPublicTeamCampaignControllerShow(ctx context.Context, teamCampaignId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicTeamCampaignDonationControllerIndex request
	V5ApiWebPublicTeamCampaignDonationControllerIndex(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignDonationControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicTeamCampaignLeaderboardControllerDonor request
	V5ApiWebPublicTeamCampaignLeaderboardControllerDonor(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicTeamCampaignMilestoneControllerIndex request
	V5ApiWebPublicTeamCampaignMilestoneControllerIndex(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignMilestoneControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicTeamCampaignPollControllerIndex request
	V5ApiWebPublicTeamCampaignPollControllerIndex(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignPollControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicTeamCampaignRewardControllerIndex request
	V5ApiWebPublicTeamCampaignRewardControllerIndex(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignRewardControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicTeamCampaignScheduleControllerIndex request
	V5ApiWebPublicTeamCampaignScheduleControllerIndex(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignScheduleControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex request
	V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicTeamCampaignChallengeControllerIndex request
	V5ApiWebPublicTeamCampaignChallengeControllerIndex(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignChallengeControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicTeamCampaignLeaderboardControllerUser request
	V5ApiWebPublicTeamCampaignLeaderboardControllerUser(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicTeamControllerShow request
	V5ApiWebPublicTeamControllerShow(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicTeamMemberControllerIndex request
	V5ApiWebPublicTeamMemberControllerIndex(ctx context.Context, teamId string, params *V5ApiWebPublicTeamMemberControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicTeamTeamCampaignControllerIndex request
	V5ApiWebPublicTeamTeamCampaignControllerIndex(ctx context.Context, teamId string, params *V5ApiWebPublicTeamTeamCampaignControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicUserControllerShow request
	V5ApiWebPublicUserControllerShow(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicUserCampaignControllerIndex request
	V5ApiWebPublicUserCampaignControllerIndex(ctx context.Context, userId string, params *V5ApiWebPublicUserCampaignControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicUserIntegrationEventControllerIndex request
	V5ApiWebPublicUserIntegrationEventControllerIndex(ctx context.Context, userId string, params *V5ApiWebPublicUserIntegrationEventControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebPublicUserTeamControllerIndex request
	V5ApiWebPublicUserTeamControllerIndex(ctx context.Context, userId string, params *V5ApiWebPublicUserTeamControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebOauthAuthorize request with any body
	V5ApiWebOauthAuthorizeWithBody(ctx context.Context, params *V5ApiWebOauthAuthorizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V5ApiWebOauthAuthorize(ctx context.Context, params *V5ApiWebOauthAuthorizeParams, body V5ApiWebOauthAuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebOauthToken request with any body
	V5ApiWebOauthTokenWithBody(ctx context.Context, params *V5ApiWebOauthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V5ApiWebOauthToken(ctx context.Context, params *V5ApiWebOauthTokenParams, body V5ApiWebOauthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) V5ApiWebPublicCampaignControllerShow(ctx context.Context, campaignId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicCampaignControllerShowRequest(c.Server, campaignId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicCampaignDonationControllerIndex(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignDonationControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicCampaignDonationControllerIndexRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicCampaignLeaderboardControllerDonor(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicCampaignLeaderboardControllerDonorRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicCampaignMilestoneControllerIndex(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignMilestoneControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicCampaignMilestoneControllerIndexRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicCampaignPollControllerIndex(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignPollControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicCampaignPollControllerIndexRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicCampaignRewardControllerIndex(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignRewardControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicCampaignRewardControllerIndexRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicCampaignScheduleControllerIndex(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignScheduleControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicCampaignScheduleControllerIndexRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicCampaignChallengeControllerIndex(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignChallengeControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicCampaignChallengeControllerIndexRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicCauseControllerShow(ctx context.Context, causeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicCauseControllerShowRequest(c.Server, causeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicCauseCampaignControllerIndex(ctx context.Context, causeId string, params *V5ApiWebPublicCauseCampaignControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicCauseCampaignControllerIndexRequest(c.Server, causeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicCauseLeaderboardControllerConfigured(ctx context.Context, causeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicCauseLeaderboardControllerConfiguredRequest(c.Server, causeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicCauseLeaderboardControllerDonor(ctx context.Context, causeId string, params *V5ApiWebPublicCauseLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicCauseLeaderboardControllerDonorRequest(c.Server, causeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicCauseFundraisingEventControllerIndex(ctx context.Context, causeId string, params *V5ApiWebPublicCauseFundraisingEventControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicCauseFundraisingEventControllerIndexRequest(c.Server, causeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicCauseLeaderboardControllerTeam(ctx context.Context, causeId string, params *V5ApiWebPublicCauseLeaderboardControllerTeamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicCauseLeaderboardControllerTeamRequest(c.Server, causeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicCauseLeaderboardControllerUser(ctx context.Context, causeId string, params *V5ApiWebPublicCauseLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicCauseLeaderboardControllerUserRequest(c.Server, causeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicUserControllerCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicUserControllerCurrentUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicFundraisingEventControllerShow(ctx context.Context, fundraisingEventId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicFundraisingEventControllerShowRequest(c.Server, fundraisingEventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured(ctx context.Context, fundraisingEventId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredRequest(c.Server, fundraisingEventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicFundraisingEventLeaderboardControllerDonor(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicFundraisingEventLeaderboardControllerDonorRequest(c.Server, fundraisingEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicFundraisingEventSupportingEventControllerIndex(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventSupportingEventControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicFundraisingEventSupportingEventControllerIndexRequest(c.Server, fundraisingEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceRequest(c.Server, fundraisingEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeRequest(c.Server, fundraisingEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicFundraisingEventLeaderboardControllerTeam(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicFundraisingEventLeaderboardControllerTeamRequest(c.Server, fundraisingEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceRequest(c.Server, fundraisingEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeRequest(c.Server, fundraisingEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicFundraisingEventLeaderboardControllerUser(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicFundraisingEventLeaderboardControllerUserRequest(c.Server, fundraisingEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicTeamCampaignControllerShow(ctx context.Context, teamCampaignId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicTeamCampaignControllerShowRequest(c.Server, teamCampaignId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicTeamCampaignDonationControllerIndex(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignDonationControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicTeamCampaignDonationControllerIndexRequest(c.Server, teamCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicTeamCampaignLeaderboardControllerDonor(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicTeamCampaignLeaderboardControllerDonorRequest(c.Server, teamCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicTeamCampaignMilestoneControllerIndex(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignMilestoneControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicTeamCampaignMilestoneControllerIndexRequest(c.Server, teamCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicTeamCampaignPollControllerIndex(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignPollControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicTeamCampaignPollControllerIndexRequest(c.Server, teamCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicTeamCampaignRewardControllerIndex(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignRewardControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicTeamCampaignRewardControllerIndexRequest(c.Server, teamCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicTeamCampaignScheduleControllerIndex(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignScheduleControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicTeamCampaignScheduleControllerIndexRequest(c.Server, teamCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexRequest(c.Server, teamCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicTeamCampaignChallengeControllerIndex(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignChallengeControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicTeamCampaignChallengeControllerIndexRequest(c.Server, teamCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicTeamCampaignLeaderboardControllerUser(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicTeamCampaignLeaderboardControllerUserRequest(c.Server, teamCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicTeamControllerShow(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicTeamControllerShowRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicTeamMemberControllerIndex(ctx context.Context, teamId string, params *V5ApiWebPublicTeamMemberControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicTeamMemberControllerIndexRequest(c.Server, teamId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicTeamTeamCampaignControllerIndex(ctx context.Context, teamId string, params *V5ApiWebPublicTeamTeamCampaignControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicTeamTeamCampaignControllerIndexRequest(c.Server, teamId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicUserControllerShow(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicUserControllerShowRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicUserCampaignControllerIndex(ctx context.Context, userId string, params *V5ApiWebPublicUserCampaignControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicUserCampaignControllerIndexRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicUserIntegrationEventControllerIndex(ctx context.Context, userId string, params *V5ApiWebPublicUserIntegrationEventControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicUserIntegrationEventControllerIndexRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebPublicUserTeamControllerIndex(ctx context.Context, userId string, params *V5ApiWebPublicUserTeamControllerIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebPublicUserTeamControllerIndexRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebOauthAuthorizeWithBody(ctx context.Context, params *V5ApiWebOauthAuthorizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebOauthAuthorizeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebOauthAuthorize(ctx context.Context, params *V5ApiWebOauthAuthorizeParams, body V5ApiWebOauthAuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebOauthAuthorizeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebOauthTokenWithBody(ctx context.Context, params *V5ApiWebOauthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebOauthTokenRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebOauthToken(ctx context.Context, params *V5ApiWebOauthTokenParams, body V5ApiWebOauthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebOauthTokenRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewV5ApiWebPublicCampaignControllerShowRequest generates requests for V5ApiWebPublicCampaignControllerShow
func NewV5ApiWebPublicCampaignControllerShowRequest(server string, campaignId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/campaigns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicCampaignDonationControllerIndexRequest generates requests for V5ApiWebPublicCampaignDonationControllerIndex
func NewV5ApiWebPublicCampaignDonationControllerIndexRequest(server string, campaignId string, params *V5ApiWebPublicCampaignDonationControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/campaigns/%s/donations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CompletedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed_before", runtime.ParamLocationQuery, *params.CompletedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CompletedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed_after", runtime.ParamLocationQuery, *params.CompletedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicCampaignLeaderboardControllerDonorRequest generates requests for V5ApiWebPublicCampaignLeaderboardControllerDonor
func NewV5ApiWebPublicCampaignLeaderboardControllerDonorRequest(server string, campaignId string, params *V5ApiWebPublicCampaignLeaderboardControllerDonorParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/campaigns/%s/donor_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicCampaignMilestoneControllerIndexRequest generates requests for V5ApiWebPublicCampaignMilestoneControllerIndex
func NewV5ApiWebPublicCampaignMilestoneControllerIndexRequest(server string, campaignId string, params *V5ApiWebPublicCampaignMilestoneControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/campaigns/%s/milestones", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeDisabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_disabled", runtime.ParamLocationQuery, *params.IncludeDisabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_before", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_after", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdatedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_before", runtime.ParamLocationQuery, *params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdatedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_after", runtime.ParamLocationQuery, *params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicCampaignPollControllerIndexRequest generates requests for V5ApiWebPublicCampaignPollControllerIndex
func NewV5ApiWebPublicCampaignPollControllerIndexRequest(server string, campaignId string, params *V5ApiWebPublicCampaignPollControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/campaigns/%s/polls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicCampaignRewardControllerIndexRequest generates requests for V5ApiWebPublicCampaignRewardControllerIndex
func NewV5ApiWebPublicCampaignRewardControllerIndexRequest(server string, campaignId string, params *V5ApiWebPublicCampaignRewardControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/campaigns/%s/rewards", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicCampaignScheduleControllerIndexRequest generates requests for V5ApiWebPublicCampaignScheduleControllerIndex
func NewV5ApiWebPublicCampaignScheduleControllerIndexRequest(server string, campaignId string, params *V5ApiWebPublicCampaignScheduleControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/campaigns/%s/schedules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicCampaignChallengeControllerIndexRequest generates requests for V5ApiWebPublicCampaignChallengeControllerIndex
func NewV5ApiWebPublicCampaignChallengeControllerIndexRequest(server string, campaignId string, params *V5ApiWebPublicCampaignChallengeControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/campaigns/%s/targets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicCauseControllerShowRequest generates requests for V5ApiWebPublicCauseControllerShow
func NewV5ApiWebPublicCauseControllerShowRequest(server string, causeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, causeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicCauseCampaignControllerIndexRequest generates requests for V5ApiWebPublicCauseCampaignControllerIndex
func NewV5ApiWebPublicCauseCampaignControllerIndexRequest(server string, causeId string, params *V5ApiWebPublicCauseCampaignControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, causeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/causes/%s/campaigns", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicCauseLeaderboardControllerConfiguredRequest generates requests for V5ApiWebPublicCauseLeaderboardControllerConfigured
func NewV5ApiWebPublicCauseLeaderboardControllerConfiguredRequest(server string, causeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, causeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/causes/%s/configured_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicCauseLeaderboardControllerDonorRequest generates requests for V5ApiWebPublicCauseLeaderboardControllerDonor
func NewV5ApiWebPublicCauseLeaderboardControllerDonorRequest(server string, causeId string, params *V5ApiWebPublicCauseLeaderboardControllerDonorParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, causeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/causes/%s/donor_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicCauseFundraisingEventControllerIndexRequest generates requests for V5ApiWebPublicCauseFundraisingEventControllerIndex
func NewV5ApiWebPublicCauseFundraisingEventControllerIndexRequest(server string, causeId string, params *V5ApiWebPublicCauseFundraisingEventControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, causeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/causes/%s/fundraising_events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicCauseLeaderboardControllerTeamRequest generates requests for V5ApiWebPublicCauseLeaderboardControllerTeam
func NewV5ApiWebPublicCauseLeaderboardControllerTeamRequest(server string, causeId string, params *V5ApiWebPublicCauseLeaderboardControllerTeamParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, causeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/causes/%s/team_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicCauseLeaderboardControllerUserRequest generates requests for V5ApiWebPublicCauseLeaderboardControllerUser
func NewV5ApiWebPublicCauseLeaderboardControllerUserRequest(server string, causeId string, params *V5ApiWebPublicCauseLeaderboardControllerUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, causeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/causes/%s/user_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicUserControllerCurrentUserRequest generates requests for V5ApiWebPublicUserControllerCurrentUser
func NewV5ApiWebPublicUserControllerCurrentUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/current-user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicFundraisingEventControllerShowRequest generates requests for V5ApiWebPublicFundraisingEventControllerShow
func NewV5ApiWebPublicFundraisingEventControllerShowRequest(server string, fundraisingEventId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredRequest generates requests for V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured
func NewV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredRequest(server string, fundraisingEventId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s/configured_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicFundraisingEventLeaderboardControllerDonorRequest generates requests for V5ApiWebPublicFundraisingEventLeaderboardControllerDonor
func NewV5ApiWebPublicFundraisingEventLeaderboardControllerDonorRequest(server string, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s/donor_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicFundraisingEventSupportingEventControllerIndexRequest generates requests for V5ApiWebPublicFundraisingEventSupportingEventControllerIndex
func NewV5ApiWebPublicFundraisingEventSupportingEventControllerIndexRequest(server string, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventSupportingEventControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s/supporting_events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceRequest generates requests for V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance
func NewV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceRequest(server string, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s/team_fitness_distance_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeRequest generates requests for V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime
func NewV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeRequest(server string, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s/team_fitness_time_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicFundraisingEventLeaderboardControllerTeamRequest generates requests for V5ApiWebPublicFundraisingEventLeaderboardControllerTeam
func NewV5ApiWebPublicFundraisingEventLeaderboardControllerTeamRequest(server string, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s/team_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceRequest generates requests for V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance
func NewV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceRequest(server string, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s/user_fitness_distance_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeRequest generates requests for V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime
func NewV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeRequest(server string, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s/user_fitness_time_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicFundraisingEventLeaderboardControllerUserRequest generates requests for V5ApiWebPublicFundraisingEventLeaderboardControllerUser
func NewV5ApiWebPublicFundraisingEventLeaderboardControllerUserRequest(server string, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s/user_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicTeamCampaignControllerShowRequest generates requests for V5ApiWebPublicTeamCampaignControllerShow
func NewV5ApiWebPublicTeamCampaignControllerShowRequest(server string, teamCampaignId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicTeamCampaignDonationControllerIndexRequest generates requests for V5ApiWebPublicTeamCampaignDonationControllerIndex
func NewV5ApiWebPublicTeamCampaignDonationControllerIndexRequest(server string, teamCampaignId string, params *V5ApiWebPublicTeamCampaignDonationControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s/donations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CompletedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed_before", runtime.ParamLocationQuery, *params.CompletedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CompletedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed_after", runtime.ParamLocationQuery, *params.CompletedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicTeamCampaignLeaderboardControllerDonorRequest generates requests for V5ApiWebPublicTeamCampaignLeaderboardControllerDonor
func NewV5ApiWebPublicTeamCampaignLeaderboardControllerDonorRequest(server string, teamCampaignId string, params *V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s/donor_leaderboards", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicTeamCampaignMilestoneControllerIndexRequest generates requests for V5ApiWebPublicTeamCampaignMilestoneControllerIndex
func NewV5ApiWebPublicTeamCampaignMilestoneControllerIndexRequest(server string, teamCampaignId string, params *V5ApiWebPublicTeamCampaignMilestoneControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s/milestones", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeDisabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_disabled", runtime.ParamLocationQuery, *params.IncludeDisabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_before", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_after", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdatedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_before", runtime.ParamLocationQuery, *params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdatedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_after", runtime.ParamLocationQuery, *params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicTeamCampaignPollControllerIndexRequest generates requests for V5ApiWebPublicTeamCampaignPollControllerIndex
func NewV5ApiWebPublicTeamCampaignPollControllerIndexRequest(server string, teamCampaignId string, params *V5ApiWebPublicTeamCampaignPollControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s/polls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicTeamCampaignRewardControllerIndexRequest generates requests for V5ApiWebPublicTeamCampaignRewardControllerIndex
func NewV5ApiWebPublicTeamCampaignRewardControllerIndexRequest(server string, teamCampaignId string, params *V5ApiWebPublicTeamCampaignRewardControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s/rewards", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicTeamCampaignScheduleControllerIndexRequest generates requests for V5ApiWebPublicTeamCampaignScheduleControllerIndex
func NewV5ApiWebPublicTeamCampaignScheduleControllerIndexRequest(server string, teamCampaignId string, params *V5ApiWebPublicTeamCampaignScheduleControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s/schedules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexRequest generates requests for V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex
func NewV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexRequest(server string, teamCampaignId string, params *V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s/supporting_campaigns", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicTeamCampaignChallengeControllerIndexRequest generates requests for V5ApiWebPublicTeamCampaignChallengeControllerIndex
func NewV5ApiWebPublicTeamCampaignChallengeControllerIndexRequest(server string, teamCampaignId string, params *V5ApiWebPublicTeamCampaignChallengeControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s/targets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicTeamCampaignLeaderboardControllerUserRequest generates requests for V5ApiWebPublicTeamCampaignLeaderboardControllerUser
func NewV5ApiWebPublicTeamCampaignLeaderboardControllerUserRequest(server string, teamCampaignId string, params *V5ApiWebPublicTeamCampaignLeaderboardControllerUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s/user_leaderboards", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicTeamControllerShowRequest generates requests for V5ApiWebPublicTeamControllerShow
func NewV5ApiWebPublicTeamControllerShowRequest(server string, teamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicTeamMemberControllerIndexRequest generates requests for V5ApiWebPublicTeamMemberControllerIndex
func NewV5ApiWebPublicTeamMemberControllerIndexRequest(server string, teamId string, params *V5ApiWebPublicTeamMemberControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/teams/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicTeamTeamCampaignControllerIndexRequest generates requests for V5ApiWebPublicTeamTeamCampaignControllerIndex
func NewV5ApiWebPublicTeamTeamCampaignControllerIndexRequest(server string, teamId string, params *V5ApiWebPublicTeamTeamCampaignControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/teams/%s/team_campaigns", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicUserControllerShowRequest generates requests for V5ApiWebPublicUserControllerShow
func NewV5ApiWebPublicUserControllerShowRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicUserCampaignControllerIndexRequest generates requests for V5ApiWebPublicUserCampaignControllerIndex
func NewV5ApiWebPublicUserCampaignControllerIndexRequest(server string, userId string, params *V5ApiWebPublicUserCampaignControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/users/%s/campaigns", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicUserIntegrationEventControllerIndexRequest generates requests for V5ApiWebPublicUserIntegrationEventControllerIndex
func NewV5ApiWebPublicUserIntegrationEventControllerIndexRequest(server string, userId string, params *V5ApiWebPublicUserIntegrationEventControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/users/%s/integration_events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebPublicUserTeamControllerIndexRequest generates requests for V5ApiWebPublicUserTeamControllerIndex
func NewV5ApiWebPublicUserTeamControllerIndexRequest(server string, userId string, params *V5ApiWebPublicUserTeamControllerIndexParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/users/%s/teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Role != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, *params.Role); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebOauthAuthorizeRequest calls the generic V5ApiWebOauthAuthorize builder with application/json body
func NewV5ApiWebOauthAuthorizeRequest(server string, params *V5ApiWebOauthAuthorizeParams, body V5ApiWebOauthAuthorizeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV5ApiWebOauthAuthorizeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewV5ApiWebOauthAuthorizeRequestWithBody generates requests for V5ApiWebOauthAuthorize with any type of body
func NewV5ApiWebOauthAuthorizeRequestWithBody(server string, params *V5ApiWebOauthAuthorizeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, params.ClientId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, params.RedirectUri); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "response_type", runtime.ParamLocationQuery, params.ResponseType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Scope != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV5ApiWebOauthTokenRequest calls the generic V5ApiWebOauthToken builder with application/json body
func NewV5ApiWebOauthTokenRequest(server string, params *V5ApiWebOauthTokenParams, body V5ApiWebOauthTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV5ApiWebOauthTokenRequestWithBody(server, params, "application/json", bodyReader)
}

// NewV5ApiWebOauthTokenRequestWithBody generates requests for V5ApiWebOauthToken with any type of body
func NewV5ApiWebOauthTokenRequestWithBody(server string, params *V5ApiWebOauthTokenParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, params.ClientId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_secret", runtime.ParamLocationQuery, params.ClientSecret); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "grant_type", runtime.ParamLocationQuery, params.GrantType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Code != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, *params.Code); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Scope != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
	OkOnNon200 bool
}

// StatusFailureError is the error returned if the response was a non-success code.
type StatusFailureError struct {
	Resp *http.Response
	Err  error
}

func (s StatusFailureError) Error() string {
	if s.Err != nil {
		return s.Err.Error()
	}
	return fmt.Sprintf("got non success response code: %d", s.Resp.StatusCode)
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, OkOnNon200 bool, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{
		ClientInterface: client,
		OkOnNon200:      OkOnNon200,
	}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// V5ApiWebPublicCampaignControllerShow request
	V5ApiWebPublicCampaignControllerShowWithResponse(ctx context.Context, campaignId string, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCampaignControllerShowResponse, error)

	// V5ApiWebPublicCampaignDonationControllerIndex request
	V5ApiWebPublicCampaignDonationControllerIndexWithResponse(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignDonationControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCampaignDonationControllerIndexResponse, error)

	// V5ApiWebPublicCampaignLeaderboardControllerDonor request
	V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCampaignLeaderboardControllerDonorResponse, error)

	// V5ApiWebPublicCampaignMilestoneControllerIndex request
	V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignMilestoneControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCampaignMilestoneControllerIndexResponse, error)

	// V5ApiWebPublicCampaignPollControllerIndex request
	V5ApiWebPublicCampaignPollControllerIndexWithResponse(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignPollControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCampaignPollControllerIndexResponse, error)

	// V5ApiWebPublicCampaignRewardControllerIndex request
	V5ApiWebPublicCampaignRewardControllerIndexWithResponse(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignRewardControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCampaignRewardControllerIndexResponse, error)

	// V5ApiWebPublicCampaignScheduleControllerIndex request
	V5ApiWebPublicCampaignScheduleControllerIndexWithResponse(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignScheduleControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCampaignScheduleControllerIndexResponse, error)

	// V5ApiWebPublicCampaignChallengeControllerIndex request
	V5ApiWebPublicCampaignChallengeControllerIndexWithResponse(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignChallengeControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCampaignChallengeControllerIndexResponse, error)

	// V5ApiWebPublicCauseControllerShow request
	V5ApiWebPublicCauseControllerShowWithResponse(ctx context.Context, causeId string, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCauseControllerShowResponse, error)

	// V5ApiWebPublicCauseCampaignControllerIndex request
	V5ApiWebPublicCauseCampaignControllerIndexWithResponse(ctx context.Context, causeId string, params *V5ApiWebPublicCauseCampaignControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCauseCampaignControllerIndexResponse, error)

	// V5ApiWebPublicCauseLeaderboardControllerConfigured request
	V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse(ctx context.Context, causeId string, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCauseLeaderboardControllerConfiguredResponse, error)

	// V5ApiWebPublicCauseLeaderboardControllerDonor request
	V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse(ctx context.Context, causeId string, params *V5ApiWebPublicCauseLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCauseLeaderboardControllerDonorResponse, error)

	// V5ApiWebPublicCauseFundraisingEventControllerIndex request
	V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse(ctx context.Context, causeId string, params *V5ApiWebPublicCauseFundraisingEventControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCauseFundraisingEventControllerIndexResponse, error)

	// V5ApiWebPublicCauseLeaderboardControllerTeam request
	V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse(ctx context.Context, causeId string, params *V5ApiWebPublicCauseLeaderboardControllerTeamParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCauseLeaderboardControllerTeamResponse, error)

	// V5ApiWebPublicCauseLeaderboardControllerUser request
	V5ApiWebPublicCauseLeaderboardControllerUserWithResponse(ctx context.Context, causeId string, params *V5ApiWebPublicCauseLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCauseLeaderboardControllerUserResponse, error)

	// V5ApiWebPublicUserControllerCurrentUser request
	V5ApiWebPublicUserControllerCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*V5ApiWebPublicUserControllerCurrentUserResponse, error)

	// V5ApiWebPublicFundraisingEventControllerShow request
	V5ApiWebPublicFundraisingEventControllerShowWithResponse(ctx context.Context, fundraisingEventId string, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventControllerShowResponse, error)

	// V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured request
	V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse(ctx context.Context, fundraisingEventId string, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse, error)

	// V5ApiWebPublicFundraisingEventLeaderboardControllerDonor request
	V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse, error)

	// V5ApiWebPublicFundraisingEventSupportingEventControllerIndex request
	V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventSupportingEventControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse, error)

	// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance request
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse, error)

	// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime request
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse, error)

	// V5ApiWebPublicFundraisingEventLeaderboardControllerTeam request
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse, error)

	// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance request
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse, error)

	// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime request
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse, error)

	// V5ApiWebPublicFundraisingEventLeaderboardControllerUser request
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse, error)

	// V5ApiWebPublicTeamCampaignControllerShow request
	V5ApiWebPublicTeamCampaignControllerShowWithResponse(ctx context.Context, teamCampaignId string, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignControllerShowResponse, error)

	// V5ApiWebPublicTeamCampaignDonationControllerIndex request
	V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignDonationControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignDonationControllerIndexResponse, error)

	// V5ApiWebPublicTeamCampaignLeaderboardControllerDonor request
	V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse, error)

	// V5ApiWebPublicTeamCampaignMilestoneControllerIndex request
	V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignMilestoneControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse, error)

	// V5ApiWebPublicTeamCampaignPollControllerIndex request
	V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignPollControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignPollControllerIndexResponse, error)

	// V5ApiWebPublicTeamCampaignRewardControllerIndex request
	V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignRewardControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignRewardControllerIndexResponse, error)

	// V5ApiWebPublicTeamCampaignScheduleControllerIndex request
	V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignScheduleControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignScheduleControllerIndexResponse, error)

	// V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex request
	V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse, error)

	// V5ApiWebPublicTeamCampaignChallengeControllerIndex request
	V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignChallengeControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignChallengeControllerIndexResponse, error)

	// V5ApiWebPublicTeamCampaignLeaderboardControllerUser request
	V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse, error)

	// V5ApiWebPublicTeamControllerShow request
	V5ApiWebPublicTeamControllerShowWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamControllerShowResponse, error)

	// V5ApiWebPublicTeamMemberControllerIndex request
	V5ApiWebPublicTeamMemberControllerIndexWithResponse(ctx context.Context, teamId string, params *V5ApiWebPublicTeamMemberControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamMemberControllerIndexResponse, error)

	// V5ApiWebPublicTeamTeamCampaignControllerIndex request
	V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse(ctx context.Context, teamId string, params *V5ApiWebPublicTeamTeamCampaignControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamTeamCampaignControllerIndexResponse, error)

	// V5ApiWebPublicUserControllerShow request
	V5ApiWebPublicUserControllerShowWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*V5ApiWebPublicUserControllerShowResponse, error)

	// V5ApiWebPublicUserCampaignControllerIndex request
	V5ApiWebPublicUserCampaignControllerIndexWithResponse(ctx context.Context, userId string, params *V5ApiWebPublicUserCampaignControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicUserCampaignControllerIndexResponse, error)

	// V5ApiWebPublicUserIntegrationEventControllerIndex request
	V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse(ctx context.Context, userId string, params *V5ApiWebPublicUserIntegrationEventControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicUserIntegrationEventControllerIndexResponse, error)

	// V5ApiWebPublicUserTeamControllerIndex request
	V5ApiWebPublicUserTeamControllerIndexWithResponse(ctx context.Context, userId string, params *V5ApiWebPublicUserTeamControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicUserTeamControllerIndexResponse, error)

	// V5ApiWebOauthAuthorize request with any body
	V5ApiWebOauthAuthorizeWithBodyWithResponse(ctx context.Context, params *V5ApiWebOauthAuthorizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V5ApiWebOauthAuthorizeResponse, error)

	V5ApiWebOauthAuthorizeWithResponse(ctx context.Context, params *V5ApiWebOauthAuthorizeParams, body V5ApiWebOauthAuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*V5ApiWebOauthAuthorizeResponse, error)

	// V5ApiWebOauthToken request with any body
	V5ApiWebOauthTokenWithBodyWithResponse(ctx context.Context, params *V5ApiWebOauthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V5ApiWebOauthTokenResponse, error)

	V5ApiWebOauthTokenWithResponse(ctx context.Context, params *V5ApiWebOauthTokenParams, body V5ApiWebOauthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*V5ApiWebOauthTokenResponse, error)
}

type V5ApiWebPublicCampaignControllerShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *Campaign `json:"data,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicCampaignControllerShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicCampaignControllerShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicCampaignDonationControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicCampaignDonationControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicCampaignDonationControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicCampaignLeaderboardControllerDonorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicCampaignLeaderboardControllerDonorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicCampaignLeaderboardControllerDonorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicCampaignMilestoneControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicCampaignMilestoneControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicCampaignMilestoneControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicCampaignPollControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicCampaignPollControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicCampaignPollControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicCampaignRewardControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicCampaignRewardControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicCampaignRewardControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicCampaignScheduleControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicCampaignScheduleControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicCampaignScheduleControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicCampaignChallengeControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicCampaignChallengeControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicCampaignChallengeControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicCauseControllerShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *Cause `json:"data,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicCauseControllerShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicCauseControllerShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicCauseCampaignControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicCauseCampaignControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicCauseCampaignControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicCauseLeaderboardControllerConfiguredResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Configured Leaderboards Like V3
		Data *ConfiguredLeaderboard `json:"data,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicCauseLeaderboardControllerConfiguredResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicCauseLeaderboardControllerConfiguredResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicCauseLeaderboardControllerDonorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicCauseLeaderboardControllerDonorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicCauseLeaderboardControllerDonorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicCauseFundraisingEventControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicCauseFundraisingEventControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicCauseFundraisingEventControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicCauseLeaderboardControllerTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicCauseLeaderboardControllerTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicCauseLeaderboardControllerTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicCauseLeaderboardControllerUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicCauseLeaderboardControllerUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicCauseLeaderboardControllerUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicUserControllerCurrentUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CurrentUserObj
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicUserControllerCurrentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicUserControllerCurrentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicFundraisingEventControllerShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *FundraisingEvent `json:"data,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicFundraisingEventControllerShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicFundraisingEventControllerShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Configured Leaderboards Like V3
		Data *ConfiguredLeaderboard `json:"data,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicTeamCampaignControllerShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *TeamCampaign `json:"data,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicTeamCampaignControllerShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicTeamCampaignControllerShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicTeamCampaignDonationControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicTeamCampaignDonationControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicTeamCampaignDonationControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicTeamCampaignPollControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicTeamCampaignPollControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicTeamCampaignPollControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicTeamCampaignRewardControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicTeamCampaignRewardControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicTeamCampaignRewardControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicTeamCampaignScheduleControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicTeamCampaignScheduleControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicTeamCampaignScheduleControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicTeamCampaignChallengeControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicTeamCampaignChallengeControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicTeamCampaignChallengeControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicTeamControllerShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *Team `json:"data,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicTeamControllerShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicTeamControllerShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicTeamMemberControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicTeamMemberControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicTeamMemberControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicTeamTeamCampaignControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicTeamTeamCampaignControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicTeamTeamCampaignControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicUserControllerShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *User `json:"data,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicUserControllerShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicUserControllerShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicUserCampaignControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicUserCampaignControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicUserCampaignControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicUserIntegrationEventControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicUserIntegrationEventControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicUserIntegrationEventControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebPublicUserTeamControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r V5ApiWebPublicUserTeamControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebPublicUserTeamControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebOauthAuthorizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r V5ApiWebOauthAuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebOauthAuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebOauthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r V5ApiWebOauthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebOauthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// V5ApiWebPublicCampaignControllerShowWithResponse request returning *V5ApiWebPublicCampaignControllerShowResponse
func (c *ClientWithResponses) V5ApiWebPublicCampaignControllerShowWithResponse(ctx context.Context, campaignId string, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCampaignControllerShowResponse, error) {
	rsp, err := c.V5ApiWebPublicCampaignControllerShow(ctx, campaignId, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicCampaignControllerShowResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicCampaignDonationControllerIndexWithResponse request returning *V5ApiWebPublicCampaignDonationControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicCampaignDonationControllerIndexWithResponse(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignDonationControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCampaignDonationControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicCampaignDonationControllerIndex(ctx, campaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicCampaignDonationControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse request returning *V5ApiWebPublicCampaignLeaderboardControllerDonorResponse
func (c *ClientWithResponses) V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCampaignLeaderboardControllerDonorResponse, error) {
	rsp, err := c.V5ApiWebPublicCampaignLeaderboardControllerDonor(ctx, campaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicCampaignLeaderboardControllerDonorResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse request returning *V5ApiWebPublicCampaignMilestoneControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignMilestoneControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCampaignMilestoneControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicCampaignMilestoneControllerIndex(ctx, campaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicCampaignMilestoneControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicCampaignPollControllerIndexWithResponse request returning *V5ApiWebPublicCampaignPollControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicCampaignPollControllerIndexWithResponse(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignPollControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCampaignPollControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicCampaignPollControllerIndex(ctx, campaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicCampaignPollControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicCampaignRewardControllerIndexWithResponse request returning *V5ApiWebPublicCampaignRewardControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicCampaignRewardControllerIndexWithResponse(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignRewardControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCampaignRewardControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicCampaignRewardControllerIndex(ctx, campaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicCampaignRewardControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicCampaignScheduleControllerIndexWithResponse request returning *V5ApiWebPublicCampaignScheduleControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicCampaignScheduleControllerIndexWithResponse(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignScheduleControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCampaignScheduleControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicCampaignScheduleControllerIndex(ctx, campaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicCampaignScheduleControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicCampaignChallengeControllerIndexWithResponse request returning *V5ApiWebPublicCampaignChallengeControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicCampaignChallengeControllerIndexWithResponse(ctx context.Context, campaignId string, params *V5ApiWebPublicCampaignChallengeControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCampaignChallengeControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicCampaignChallengeControllerIndex(ctx, campaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicCampaignChallengeControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicCauseControllerShowWithResponse request returning *V5ApiWebPublicCauseControllerShowResponse
func (c *ClientWithResponses) V5ApiWebPublicCauseControllerShowWithResponse(ctx context.Context, causeId string, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCauseControllerShowResponse, error) {
	rsp, err := c.V5ApiWebPublicCauseControllerShow(ctx, causeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicCauseControllerShowResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicCauseCampaignControllerIndexWithResponse request returning *V5ApiWebPublicCauseCampaignControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicCauseCampaignControllerIndexWithResponse(ctx context.Context, causeId string, params *V5ApiWebPublicCauseCampaignControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCauseCampaignControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicCauseCampaignControllerIndex(ctx, causeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicCauseCampaignControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse request returning *V5ApiWebPublicCauseLeaderboardControllerConfiguredResponse
func (c *ClientWithResponses) V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse(ctx context.Context, causeId string, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCauseLeaderboardControllerConfiguredResponse, error) {
	rsp, err := c.V5ApiWebPublicCauseLeaderboardControllerConfigured(ctx, causeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicCauseLeaderboardControllerConfiguredResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse request returning *V5ApiWebPublicCauseLeaderboardControllerDonorResponse
func (c *ClientWithResponses) V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse(ctx context.Context, causeId string, params *V5ApiWebPublicCauseLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCauseLeaderboardControllerDonorResponse, error) {
	rsp, err := c.V5ApiWebPublicCauseLeaderboardControllerDonor(ctx, causeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicCauseLeaderboardControllerDonorResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse request returning *V5ApiWebPublicCauseFundraisingEventControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse(ctx context.Context, causeId string, params *V5ApiWebPublicCauseFundraisingEventControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCauseFundraisingEventControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicCauseFundraisingEventControllerIndex(ctx, causeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicCauseFundraisingEventControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse request returning *V5ApiWebPublicCauseLeaderboardControllerTeamResponse
func (c *ClientWithResponses) V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse(ctx context.Context, causeId string, params *V5ApiWebPublicCauseLeaderboardControllerTeamParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCauseLeaderboardControllerTeamResponse, error) {
	rsp, err := c.V5ApiWebPublicCauseLeaderboardControllerTeam(ctx, causeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicCauseLeaderboardControllerTeamResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicCauseLeaderboardControllerUserWithResponse request returning *V5ApiWebPublicCauseLeaderboardControllerUserResponse
func (c *ClientWithResponses) V5ApiWebPublicCauseLeaderboardControllerUserWithResponse(ctx context.Context, causeId string, params *V5ApiWebPublicCauseLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicCauseLeaderboardControllerUserResponse, error) {
	rsp, err := c.V5ApiWebPublicCauseLeaderboardControllerUser(ctx, causeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicCauseLeaderboardControllerUserResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicUserControllerCurrentUserWithResponse request returning *V5ApiWebPublicUserControllerCurrentUserResponse
func (c *ClientWithResponses) V5ApiWebPublicUserControllerCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*V5ApiWebPublicUserControllerCurrentUserResponse, error) {
	rsp, err := c.V5ApiWebPublicUserControllerCurrentUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicUserControllerCurrentUserResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicFundraisingEventControllerShowWithResponse request returning *V5ApiWebPublicFundraisingEventControllerShowResponse
func (c *ClientWithResponses) V5ApiWebPublicFundraisingEventControllerShowWithResponse(ctx context.Context, fundraisingEventId string, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventControllerShowResponse, error) {
	rsp, err := c.V5ApiWebPublicFundraisingEventControllerShow(ctx, fundraisingEventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicFundraisingEventControllerShowResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse request returning *V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse
func (c *ClientWithResponses) V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse(ctx context.Context, fundraisingEventId string, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse, error) {
	rsp, err := c.V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured(ctx, fundraisingEventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse request returning *V5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse
func (c *ClientWithResponses) V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse, error) {
	rsp, err := c.V5ApiWebPublicFundraisingEventLeaderboardControllerDonor(ctx, fundraisingEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse request returning *V5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventSupportingEventControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicFundraisingEventSupportingEventControllerIndex(ctx, fundraisingEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse request returning *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse
func (c *ClientWithResponses) V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse, error) {
	rsp, err := c.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance(ctx, fundraisingEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse request returning *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse
func (c *ClientWithResponses) V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse, error) {
	rsp, err := c.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime(ctx, fundraisingEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse request returning *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse
func (c *ClientWithResponses) V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse, error) {
	rsp, err := c.V5ApiWebPublicFundraisingEventLeaderboardControllerTeam(ctx, fundraisingEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse request returning *V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse
func (c *ClientWithResponses) V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse, error) {
	rsp, err := c.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance(ctx, fundraisingEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse request returning *V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse
func (c *ClientWithResponses) V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse, error) {
	rsp, err := c.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime(ctx, fundraisingEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse request returning *V5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse
func (c *ClientWithResponses) V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse(ctx context.Context, fundraisingEventId string, params *V5ApiWebPublicFundraisingEventLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse, error) {
	rsp, err := c.V5ApiWebPublicFundraisingEventLeaderboardControllerUser(ctx, fundraisingEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicTeamCampaignControllerShowWithResponse request returning *V5ApiWebPublicTeamCampaignControllerShowResponse
func (c *ClientWithResponses) V5ApiWebPublicTeamCampaignControllerShowWithResponse(ctx context.Context, teamCampaignId string, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignControllerShowResponse, error) {
	rsp, err := c.V5ApiWebPublicTeamCampaignControllerShow(ctx, teamCampaignId, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicTeamCampaignControllerShowResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse request returning *V5ApiWebPublicTeamCampaignDonationControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignDonationControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignDonationControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicTeamCampaignDonationControllerIndex(ctx, teamCampaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicTeamCampaignDonationControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse request returning *V5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse
func (c *ClientWithResponses) V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse, error) {
	rsp, err := c.V5ApiWebPublicTeamCampaignLeaderboardControllerDonor(ctx, teamCampaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse request returning *V5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignMilestoneControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicTeamCampaignMilestoneControllerIndex(ctx, teamCampaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse request returning *V5ApiWebPublicTeamCampaignPollControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignPollControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignPollControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicTeamCampaignPollControllerIndex(ctx, teamCampaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicTeamCampaignPollControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse request returning *V5ApiWebPublicTeamCampaignRewardControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignRewardControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignRewardControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicTeamCampaignRewardControllerIndex(ctx, teamCampaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicTeamCampaignRewardControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse request returning *V5ApiWebPublicTeamCampaignScheduleControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignScheduleControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignScheduleControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicTeamCampaignScheduleControllerIndex(ctx, teamCampaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicTeamCampaignScheduleControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse request returning *V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex(ctx, teamCampaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse request returning *V5ApiWebPublicTeamCampaignChallengeControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignChallengeControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignChallengeControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicTeamCampaignChallengeControllerIndex(ctx, teamCampaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicTeamCampaignChallengeControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse request returning *V5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse
func (c *ClientWithResponses) V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse(ctx context.Context, teamCampaignId string, params *V5ApiWebPublicTeamCampaignLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse, error) {
	rsp, err := c.V5ApiWebPublicTeamCampaignLeaderboardControllerUser(ctx, teamCampaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicTeamControllerShowWithResponse request returning *V5ApiWebPublicTeamControllerShowResponse
func (c *ClientWithResponses) V5ApiWebPublicTeamControllerShowWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamControllerShowResponse, error) {
	rsp, err := c.V5ApiWebPublicTeamControllerShow(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicTeamControllerShowResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicTeamMemberControllerIndexWithResponse request returning *V5ApiWebPublicTeamMemberControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicTeamMemberControllerIndexWithResponse(ctx context.Context, teamId string, params *V5ApiWebPublicTeamMemberControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamMemberControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicTeamMemberControllerIndex(ctx, teamId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicTeamMemberControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse request returning *V5ApiWebPublicTeamTeamCampaignControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse(ctx context.Context, teamId string, params *V5ApiWebPublicTeamTeamCampaignControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicTeamTeamCampaignControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicTeamTeamCampaignControllerIndex(ctx, teamId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicTeamTeamCampaignControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicUserControllerShowWithResponse request returning *V5ApiWebPublicUserControllerShowResponse
func (c *ClientWithResponses) V5ApiWebPublicUserControllerShowWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*V5ApiWebPublicUserControllerShowResponse, error) {
	rsp, err := c.V5ApiWebPublicUserControllerShow(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicUserControllerShowResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicUserCampaignControllerIndexWithResponse request returning *V5ApiWebPublicUserCampaignControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicUserCampaignControllerIndexWithResponse(ctx context.Context, userId string, params *V5ApiWebPublicUserCampaignControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicUserCampaignControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicUserCampaignControllerIndex(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicUserCampaignControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse request returning *V5ApiWebPublicUserIntegrationEventControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse(ctx context.Context, userId string, params *V5ApiWebPublicUserIntegrationEventControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicUserIntegrationEventControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicUserIntegrationEventControllerIndex(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicUserIntegrationEventControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebPublicUserTeamControllerIndexWithResponse request returning *V5ApiWebPublicUserTeamControllerIndexResponse
func (c *ClientWithResponses) V5ApiWebPublicUserTeamControllerIndexWithResponse(ctx context.Context, userId string, params *V5ApiWebPublicUserTeamControllerIndexParams, reqEditors ...RequestEditorFn) (*V5ApiWebPublicUserTeamControllerIndexResponse, error) {
	rsp, err := c.V5ApiWebPublicUserTeamControllerIndex(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebPublicUserTeamControllerIndexResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebOauthAuthorizeWithBodyWithResponse request with arbitrary body returning *V5ApiWebOauthAuthorizeResponse
func (c *ClientWithResponses) V5ApiWebOauthAuthorizeWithBodyWithResponse(ctx context.Context, params *V5ApiWebOauthAuthorizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V5ApiWebOauthAuthorizeResponse, error) {
	rsp, err := c.V5ApiWebOauthAuthorizeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebOauthAuthorizeResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

func (c *ClientWithResponses) V5ApiWebOauthAuthorizeWithResponse(ctx context.Context, params *V5ApiWebOauthAuthorizeParams, body V5ApiWebOauthAuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*V5ApiWebOauthAuthorizeResponse, error) {
	rsp, err := c.V5ApiWebOauthAuthorize(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebOauthAuthorizeResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebOauthTokenWithBodyWithResponse request with arbitrary body returning *V5ApiWebOauthTokenResponse
func (c *ClientWithResponses) V5ApiWebOauthTokenWithBodyWithResponse(ctx context.Context, params *V5ApiWebOauthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V5ApiWebOauthTokenResponse, error) {
	rsp, err := c.V5ApiWebOauthTokenWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebOauthTokenResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

func (c *ClientWithResponses) V5ApiWebOauthTokenWithResponse(ctx context.Context, params *V5ApiWebOauthTokenParams, body V5ApiWebOauthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*V5ApiWebOauthTokenResponse, error) {
	rsp, err := c.V5ApiWebOauthToken(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebOauthTokenResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// ParseV5ApiWebPublicCampaignControllerShowResponse parses an HTTP response from a V5ApiWebPublicCampaignControllerShowWithResponse call
func ParseV5ApiWebPublicCampaignControllerShowResponse(rsp *http.Response) (*V5ApiWebPublicCampaignControllerShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicCampaignControllerShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *Campaign `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicCampaignDonationControllerIndexResponse parses an HTTP response from a V5ApiWebPublicCampaignDonationControllerIndexWithResponse call
func ParseV5ApiWebPublicCampaignDonationControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicCampaignDonationControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicCampaignDonationControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicCampaignLeaderboardControllerDonorResponse parses an HTTP response from a V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse call
func ParseV5ApiWebPublicCampaignLeaderboardControllerDonorResponse(rsp *http.Response) (*V5ApiWebPublicCampaignLeaderboardControllerDonorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicCampaignLeaderboardControllerDonorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicCampaignMilestoneControllerIndexResponse parses an HTTP response from a V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse call
func ParseV5ApiWebPublicCampaignMilestoneControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicCampaignMilestoneControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicCampaignMilestoneControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicCampaignPollControllerIndexResponse parses an HTTP response from a V5ApiWebPublicCampaignPollControllerIndexWithResponse call
func ParseV5ApiWebPublicCampaignPollControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicCampaignPollControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicCampaignPollControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicCampaignRewardControllerIndexResponse parses an HTTP response from a V5ApiWebPublicCampaignRewardControllerIndexWithResponse call
func ParseV5ApiWebPublicCampaignRewardControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicCampaignRewardControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicCampaignRewardControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicCampaignScheduleControllerIndexResponse parses an HTTP response from a V5ApiWebPublicCampaignScheduleControllerIndexWithResponse call
func ParseV5ApiWebPublicCampaignScheduleControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicCampaignScheduleControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicCampaignScheduleControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicCampaignChallengeControllerIndexResponse parses an HTTP response from a V5ApiWebPublicCampaignChallengeControllerIndexWithResponse call
func ParseV5ApiWebPublicCampaignChallengeControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicCampaignChallengeControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicCampaignChallengeControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicCauseControllerShowResponse parses an HTTP response from a V5ApiWebPublicCauseControllerShowWithResponse call
func ParseV5ApiWebPublicCauseControllerShowResponse(rsp *http.Response) (*V5ApiWebPublicCauseControllerShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicCauseControllerShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *Cause `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicCauseCampaignControllerIndexResponse parses an HTTP response from a V5ApiWebPublicCauseCampaignControllerIndexWithResponse call
func ParseV5ApiWebPublicCauseCampaignControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicCauseCampaignControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicCauseCampaignControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicCauseLeaderboardControllerConfiguredResponse parses an HTTP response from a V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse call
func ParseV5ApiWebPublicCauseLeaderboardControllerConfiguredResponse(rsp *http.Response) (*V5ApiWebPublicCauseLeaderboardControllerConfiguredResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicCauseLeaderboardControllerConfiguredResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Configured Leaderboards Like V3
			Data *ConfiguredLeaderboard `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicCauseLeaderboardControllerDonorResponse parses an HTTP response from a V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse call
func ParseV5ApiWebPublicCauseLeaderboardControllerDonorResponse(rsp *http.Response) (*V5ApiWebPublicCauseLeaderboardControllerDonorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicCauseLeaderboardControllerDonorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicCauseFundraisingEventControllerIndexResponse parses an HTTP response from a V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse call
func ParseV5ApiWebPublicCauseFundraisingEventControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicCauseFundraisingEventControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicCauseFundraisingEventControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicCauseLeaderboardControllerTeamResponse parses an HTTP response from a V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse call
func ParseV5ApiWebPublicCauseLeaderboardControllerTeamResponse(rsp *http.Response) (*V5ApiWebPublicCauseLeaderboardControllerTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicCauseLeaderboardControllerTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicCauseLeaderboardControllerUserResponse parses an HTTP response from a V5ApiWebPublicCauseLeaderboardControllerUserWithResponse call
func ParseV5ApiWebPublicCauseLeaderboardControllerUserResponse(rsp *http.Response) (*V5ApiWebPublicCauseLeaderboardControllerUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicCauseLeaderboardControllerUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicUserControllerCurrentUserResponse parses an HTTP response from a V5ApiWebPublicUserControllerCurrentUserWithResponse call
func ParseV5ApiWebPublicUserControllerCurrentUserResponse(rsp *http.Response) (*V5ApiWebPublicUserControllerCurrentUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicUserControllerCurrentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CurrentUserObj
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicFundraisingEventControllerShowResponse parses an HTTP response from a V5ApiWebPublicFundraisingEventControllerShowWithResponse call
func ParseV5ApiWebPublicFundraisingEventControllerShowResponse(rsp *http.Response) (*V5ApiWebPublicFundraisingEventControllerShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicFundraisingEventControllerShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *FundraisingEvent `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse parses an HTTP response from a V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse call
func ParseV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse(rsp *http.Response) (*V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Configured Leaderboards Like V3
			Data *ConfiguredLeaderboard `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse parses an HTTP response from a V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse call
func ParseV5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse(rsp *http.Response) (*V5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse parses an HTTP response from a V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse call
func ParseV5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse parses an HTTP response from a V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse call
func ParseV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse(rsp *http.Response) (*V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse parses an HTTP response from a V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse call
func ParseV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse(rsp *http.Response) (*V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse parses an HTTP response from a V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse call
func ParseV5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse(rsp *http.Response) (*V5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse parses an HTTP response from a V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse call
func ParseV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse(rsp *http.Response) (*V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse parses an HTTP response from a V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse call
func ParseV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse(rsp *http.Response) (*V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse parses an HTTP response from a V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse call
func ParseV5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse(rsp *http.Response) (*V5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicTeamCampaignControllerShowResponse parses an HTTP response from a V5ApiWebPublicTeamCampaignControllerShowWithResponse call
func ParseV5ApiWebPublicTeamCampaignControllerShowResponse(rsp *http.Response) (*V5ApiWebPublicTeamCampaignControllerShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicTeamCampaignControllerShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *TeamCampaign `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicTeamCampaignDonationControllerIndexResponse parses an HTTP response from a V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse call
func ParseV5ApiWebPublicTeamCampaignDonationControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicTeamCampaignDonationControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicTeamCampaignDonationControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse parses an HTTP response from a V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse call
func ParseV5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse(rsp *http.Response) (*V5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse parses an HTTP response from a V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse call
func ParseV5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicTeamCampaignPollControllerIndexResponse parses an HTTP response from a V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse call
func ParseV5ApiWebPublicTeamCampaignPollControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicTeamCampaignPollControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicTeamCampaignPollControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicTeamCampaignRewardControllerIndexResponse parses an HTTP response from a V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse call
func ParseV5ApiWebPublicTeamCampaignRewardControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicTeamCampaignRewardControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicTeamCampaignRewardControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicTeamCampaignScheduleControllerIndexResponse parses an HTTP response from a V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse call
func ParseV5ApiWebPublicTeamCampaignScheduleControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicTeamCampaignScheduleControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicTeamCampaignScheduleControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse parses an HTTP response from a V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse call
func ParseV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicTeamCampaignChallengeControllerIndexResponse parses an HTTP response from a V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse call
func ParseV5ApiWebPublicTeamCampaignChallengeControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicTeamCampaignChallengeControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicTeamCampaignChallengeControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse parses an HTTP response from a V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse call
func ParseV5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse(rsp *http.Response) (*V5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicTeamControllerShowResponse parses an HTTP response from a V5ApiWebPublicTeamControllerShowWithResponse call
func ParseV5ApiWebPublicTeamControllerShowResponse(rsp *http.Response) (*V5ApiWebPublicTeamControllerShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicTeamControllerShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *Team `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicTeamMemberControllerIndexResponse parses an HTTP response from a V5ApiWebPublicTeamMemberControllerIndexWithResponse call
func ParseV5ApiWebPublicTeamMemberControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicTeamMemberControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicTeamMemberControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicTeamTeamCampaignControllerIndexResponse parses an HTTP response from a V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse call
func ParseV5ApiWebPublicTeamTeamCampaignControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicTeamTeamCampaignControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicTeamTeamCampaignControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicUserControllerShowResponse parses an HTTP response from a V5ApiWebPublicUserControllerShowWithResponse call
func ParseV5ApiWebPublicUserControllerShowResponse(rsp *http.Response) (*V5ApiWebPublicUserControllerShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicUserControllerShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *User `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicUserCampaignControllerIndexResponse parses an HTTP response from a V5ApiWebPublicUserCampaignControllerIndexWithResponse call
func ParseV5ApiWebPublicUserCampaignControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicUserCampaignControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicUserCampaignControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicUserIntegrationEventControllerIndexResponse parses an HTTP response from a V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse call
func ParseV5ApiWebPublicUserIntegrationEventControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicUserIntegrationEventControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicUserIntegrationEventControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebPublicUserTeamControllerIndexResponse parses an HTTP response from a V5ApiWebPublicUserTeamControllerIndexWithResponse call
func ParseV5ApiWebPublicUserTeamControllerIndexResponse(rsp *http.Response) (*V5ApiWebPublicUserTeamControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebPublicUserTeamControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebOauthAuthorizeResponse parses an HTTP response from a V5ApiWebOauthAuthorizeWithResponse call
func ParseV5ApiWebOauthAuthorizeResponse(rsp *http.Response) (*V5ApiWebOauthAuthorizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebOauthAuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseV5ApiWebOauthTokenResponse parses an HTTP response from a V5ApiWebOauthTokenWithResponse call
func ParseV5ApiWebOauthTokenResponse(rsp *http.Response) (*V5ApiWebOauthTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebOauthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get by ID
	// (GET /api/public/campaigns/{campaign_id})
	V5ApiWebPublicCampaignControllerShow(ctx echo.Context, campaignId string) error
	// List donations
	// (GET /api/public/campaigns/{campaign_id}/donations)
	V5ApiWebPublicCampaignDonationControllerIndex(ctx echo.Context, campaignId string, params V5ApiWebPublicCampaignDonationControllerIndexParams) error
	// List top donors
	// (GET /api/public/campaigns/{campaign_id}/donor_leaderboard)
	V5ApiWebPublicCampaignLeaderboardControllerDonor(ctx echo.Context, campaignId string, params V5ApiWebPublicCampaignLeaderboardControllerDonorParams) error
	// List milestones
	// (GET /api/public/campaigns/{campaign_id}/milestones)
	V5ApiWebPublicCampaignMilestoneControllerIndex(ctx echo.Context, campaignId string, params V5ApiWebPublicCampaignMilestoneControllerIndexParams) error
	// List polls
	// (GET /api/public/campaigns/{campaign_id}/polls)
	V5ApiWebPublicCampaignPollControllerIndex(ctx echo.Context, campaignId string, params V5ApiWebPublicCampaignPollControllerIndexParams) error
	// List rewards
	// (GET /api/public/campaigns/{campaign_id}/rewards)
	V5ApiWebPublicCampaignRewardControllerIndex(ctx echo.Context, campaignId string, params V5ApiWebPublicCampaignRewardControllerIndexParams) error
	// List schedules
	// (GET /api/public/campaigns/{campaign_id}/schedules)
	V5ApiWebPublicCampaignScheduleControllerIndex(ctx echo.Context, campaignId string, params V5ApiWebPublicCampaignScheduleControllerIndexParams) error
	// List targets
	// (GET /api/public/campaigns/{campaign_id}/targets)
	V5ApiWebPublicCampaignChallengeControllerIndex(ctx echo.Context, campaignId string, params V5ApiWebPublicCampaignChallengeControllerIndexParams) error
	// Get by ID
	// (GET /api/public/causes/{cause_id})
	V5ApiWebPublicCauseControllerShow(ctx echo.Context, causeId string) error
	// List campaigns
	// (GET /api/public/causes/{cause_id}/campaigns)
	V5ApiWebPublicCauseCampaignControllerIndex(ctx echo.Context, causeId string, params V5ApiWebPublicCauseCampaignControllerIndexParams) error
	// List configured leaderboards
	// (GET /api/public/causes/{cause_id}/configured_leaderboard)
	V5ApiWebPublicCauseLeaderboardControllerConfigured(ctx echo.Context, causeId string) error
	// List top donors
	// (GET /api/public/causes/{cause_id}/donor_leaderboard)
	V5ApiWebPublicCauseLeaderboardControllerDonor(ctx echo.Context, causeId string, params V5ApiWebPublicCauseLeaderboardControllerDonorParams) error
	// List fundraising events
	// (GET /api/public/causes/{cause_id}/fundraising_events)
	V5ApiWebPublicCauseFundraisingEventControllerIndex(ctx echo.Context, causeId string, params V5ApiWebPublicCauseFundraisingEventControllerIndexParams) error
	// List top teams
	// (GET /api/public/causes/{cause_id}/team_leaderboard)
	V5ApiWebPublicCauseLeaderboardControllerTeam(ctx echo.Context, causeId string, params V5ApiWebPublicCauseLeaderboardControllerTeamParams) error
	// List top fundraisers
	// (GET /api/public/causes/{cause_id}/user_leaderboard)
	V5ApiWebPublicCauseLeaderboardControllerUser(ctx echo.Context, causeId string, params V5ApiWebPublicCauseLeaderboardControllerUserParams) error
	// Gets the current user for an access token
	// (GET /api/public/current-user)
	V5ApiWebPublicUserControllerCurrentUser(ctx echo.Context) error
	// Get by ID
	// (GET /api/public/fundraising_events/{fundraising_event_id})
	V5ApiWebPublicFundraisingEventControllerShow(ctx echo.Context, fundraisingEventId string) error
	// List configured leaderboards
	// (GET /api/public/fundraising_events/{fundraising_event_id}/configured_leaderboard)
	V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured(ctx echo.Context, fundraisingEventId string) error
	// List top donors
	// (GET /api/public/fundraising_events/{fundraising_event_id}/donor_leaderboard)
	V5ApiWebPublicFundraisingEventLeaderboardControllerDonor(ctx echo.Context, fundraisingEventId string, params V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParams) error
	// List campaigns
	// (GET /api/public/fundraising_events/{fundraising_event_id}/supporting_events)
	V5ApiWebPublicFundraisingEventSupportingEventControllerIndex(ctx echo.Context, fundraisingEventId string, params V5ApiWebPublicFundraisingEventSupportingEventControllerIndexParams) error
	// List top teams fitness distances
	// (GET /api/public/fundraising_events/{fundraising_event_id}/team_fitness_distance_leaderboard)
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance(ctx echo.Context, fundraisingEventId string, params V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParams) error
	// List top teams fitness times
	// (GET /api/public/fundraising_events/{fundraising_event_id}/team_fitness_time_leaderboard)
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime(ctx echo.Context, fundraisingEventId string, params V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParams) error
	// List top teams
	// (GET /api/public/fundraising_events/{fundraising_event_id}/team_leaderboard)
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeam(ctx echo.Context, fundraisingEventId string, params V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParams) error
	// List top users fitness distances
	// (GET /api/public/fundraising_events/{fundraising_event_id}/user_fitness_distance_leaderboard)
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance(ctx echo.Context, fundraisingEventId string, params V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParams) error
	// List top users fitness times
	// (GET /api/public/fundraising_events/{fundraising_event_id}/user_fitness_time_leaderboard)
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime(ctx echo.Context, fundraisingEventId string, params V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParams) error
	// List top fundraisers
	// (GET /api/public/fundraising_events/{fundraising_event_id}/user_leaderboard)
	V5ApiWebPublicFundraisingEventLeaderboardControllerUser(ctx echo.Context, fundraisingEventId string, params V5ApiWebPublicFundraisingEventLeaderboardControllerUserParams) error
	// Get by ID
	// (GET /api/public/team_campaigns/{team_campaign_id})
	V5ApiWebPublicTeamCampaignControllerShow(ctx echo.Context, teamCampaignId string) error
	// List donations
	// (GET /api/public/team_campaigns/{team_campaign_id}/donations)
	V5ApiWebPublicTeamCampaignDonationControllerIndex(ctx echo.Context, teamCampaignId string, params V5ApiWebPublicTeamCampaignDonationControllerIndexParams) error
	// List top donors
	// (GET /api/public/team_campaigns/{team_campaign_id}/donor_leaderboards)
	V5ApiWebPublicTeamCampaignLeaderboardControllerDonor(ctx echo.Context, teamCampaignId string, params V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParams) error
	// List milestones
	// (GET /api/public/team_campaigns/{team_campaign_id}/milestones)
	V5ApiWebPublicTeamCampaignMilestoneControllerIndex(ctx echo.Context, teamCampaignId string, params V5ApiWebPublicTeamCampaignMilestoneControllerIndexParams) error
	// List polls
	// (GET /api/public/team_campaigns/{team_campaign_id}/polls)
	V5ApiWebPublicTeamCampaignPollControllerIndex(ctx echo.Context, teamCampaignId string, params V5ApiWebPublicTeamCampaignPollControllerIndexParams) error
	// List rewards
	// (GET /api/public/team_campaigns/{team_campaign_id}/rewards)
	V5ApiWebPublicTeamCampaignRewardControllerIndex(ctx echo.Context, teamCampaignId string, params V5ApiWebPublicTeamCampaignRewardControllerIndexParams) error
	// List schedules
	// (GET /api/public/team_campaigns/{team_campaign_id}/schedules)
	V5ApiWebPublicTeamCampaignScheduleControllerIndex(ctx echo.Context, teamCampaignId string, params V5ApiWebPublicTeamCampaignScheduleControllerIndexParams) error
	// List supporting campaigns
	// (GET /api/public/team_campaigns/{team_campaign_id}/supporting_campaigns)
	V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex(ctx echo.Context, teamCampaignId string, params V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexParams) error
	// List targets
	// (GET /api/public/team_campaigns/{team_campaign_id}/targets)
	V5ApiWebPublicTeamCampaignChallengeControllerIndex(ctx echo.Context, teamCampaignId string, params V5ApiWebPublicTeamCampaignChallengeControllerIndexParams) error
	// List top fundraisers
	// (GET /api/public/team_campaigns/{team_campaign_id}/user_leaderboards)
	V5ApiWebPublicTeamCampaignLeaderboardControllerUser(ctx echo.Context, teamCampaignId string, params V5ApiWebPublicTeamCampaignLeaderboardControllerUserParams) error
	// Get by ID
	// (GET /api/public/teams/{team_id})
	V5ApiWebPublicTeamControllerShow(ctx echo.Context, teamId string) error
	// List team members
	// (GET /api/public/teams/{team_id}/members)
	V5ApiWebPublicTeamMemberControllerIndex(ctx echo.Context, teamId string, params V5ApiWebPublicTeamMemberControllerIndexParams) error
	// List Team Campaigns
	// (GET /api/public/teams/{team_id}/team_campaigns)
	V5ApiWebPublicTeamTeamCampaignControllerIndex(ctx echo.Context, teamId string, params V5ApiWebPublicTeamTeamCampaignControllerIndexParams) error
	// Get by ID
	// (GET /api/public/users/{user_id})
	V5ApiWebPublicUserControllerShow(ctx echo.Context, userId string) error
	// List campaigns
	// (GET /api/public/users/{user_id}/campaigns)
	V5ApiWebPublicUserCampaignControllerIndex(ctx echo.Context, userId string, params V5ApiWebPublicUserCampaignControllerIndexParams) error
	// List all Campaigns and Team Campaigns by User ID
	// (GET /api/public/users/{user_id}/integration_events)
	V5ApiWebPublicUserIntegrationEventControllerIndex(ctx echo.Context, userId string, params V5ApiWebPublicUserIntegrationEventControllerIndexParams) error
	// List teams
	// (GET /api/public/users/{user_id}/teams)
	V5ApiWebPublicUserTeamControllerIndex(ctx echo.Context, userId string, params V5ApiWebPublicUserTeamControllerIndexParams) error
	// Authorize
	// (GET /oauth/authorize)
	V5ApiWebOauthAuthorize(ctx echo.Context, params V5ApiWebOauthAuthorizeParams) error
	// Token
	// (POST /oauth/token)
	V5ApiWebOauthToken(ctx echo.Context, params V5ApiWebOauthTokenParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// V5ApiWebPublicCampaignControllerShow converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicCampaignControllerShow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campaign_id" -------------
	var campaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, ctx.Param("campaign_id"), &campaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicCampaignControllerShow(ctx, campaignId)
	return err
}

// V5ApiWebPublicCampaignDonationControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicCampaignDonationControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campaign_id" -------------
	var campaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, ctx.Param("campaign_id"), &campaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicCampaignDonationControllerIndexParams
	// ------------- Optional query parameter "completed_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "completed_before", ctx.QueryParams(), &params.CompletedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter completed_before: %s", err))
	}

	// ------------- Optional query parameter "completed_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "completed_after", ctx.QueryParams(), &params.CompletedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter completed_after: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicCampaignDonationControllerIndex(ctx, campaignId, params)
	return err
}

// V5ApiWebPublicCampaignLeaderboardControllerDonor converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicCampaignLeaderboardControllerDonor(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campaign_id" -------------
	var campaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, ctx.Param("campaign_id"), &campaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicCampaignLeaderboardControllerDonorParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicCampaignLeaderboardControllerDonor(ctx, campaignId, params)
	return err
}

// V5ApiWebPublicCampaignMilestoneControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicCampaignMilestoneControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campaign_id" -------------
	var campaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, ctx.Param("campaign_id"), &campaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicCampaignMilestoneControllerIndexParams
	// ------------- Optional query parameter "include_disabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_disabled", ctx.QueryParams(), &params.IncludeDisabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_disabled: %s", err))
	}

	// ------------- Optional query parameter "created_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_before", ctx.QueryParams(), &params.CreatedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_before: %s", err))
	}

	// ------------- Optional query parameter "created_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_after", ctx.QueryParams(), &params.CreatedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_after: %s", err))
	}

	// ------------- Optional query parameter "updated_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "updated_before", ctx.QueryParams(), &params.UpdatedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updated_before: %s", err))
	}

	// ------------- Optional query parameter "updated_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "updated_after", ctx.QueryParams(), &params.UpdatedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updated_after: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicCampaignMilestoneControllerIndex(ctx, campaignId, params)
	return err
}

// V5ApiWebPublicCampaignPollControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicCampaignPollControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campaign_id" -------------
	var campaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, ctx.Param("campaign_id"), &campaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicCampaignPollControllerIndexParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicCampaignPollControllerIndex(ctx, campaignId, params)
	return err
}

// V5ApiWebPublicCampaignRewardControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicCampaignRewardControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campaign_id" -------------
	var campaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, ctx.Param("campaign_id"), &campaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicCampaignRewardControllerIndexParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicCampaignRewardControllerIndex(ctx, campaignId, params)
	return err
}

// V5ApiWebPublicCampaignScheduleControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicCampaignScheduleControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campaign_id" -------------
	var campaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, ctx.Param("campaign_id"), &campaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicCampaignScheduleControllerIndexParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicCampaignScheduleControllerIndex(ctx, campaignId, params)
	return err
}

// V5ApiWebPublicCampaignChallengeControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicCampaignChallengeControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campaign_id" -------------
	var campaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, ctx.Param("campaign_id"), &campaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicCampaignChallengeControllerIndexParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicCampaignChallengeControllerIndex(ctx, campaignId, params)
	return err
}

// V5ApiWebPublicCauseControllerShow converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicCauseControllerShow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cause_id" -------------
	var causeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, ctx.Param("cause_id"), &causeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cause_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicCauseControllerShow(ctx, causeId)
	return err
}

// V5ApiWebPublicCauseCampaignControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicCauseCampaignControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cause_id" -------------
	var causeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, ctx.Param("cause_id"), &causeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cause_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicCauseCampaignControllerIndexParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicCauseCampaignControllerIndex(ctx, causeId, params)
	return err
}

// V5ApiWebPublicCauseLeaderboardControllerConfigured converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicCauseLeaderboardControllerConfigured(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cause_id" -------------
	var causeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, ctx.Param("cause_id"), &causeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cause_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicCauseLeaderboardControllerConfigured(ctx, causeId)
	return err
}

// V5ApiWebPublicCauseLeaderboardControllerDonor converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicCauseLeaderboardControllerDonor(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cause_id" -------------
	var causeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, ctx.Param("cause_id"), &causeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cause_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicCauseLeaderboardControllerDonorParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicCauseLeaderboardControllerDonor(ctx, causeId, params)
	return err
}

// V5ApiWebPublicCauseFundraisingEventControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicCauseFundraisingEventControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cause_id" -------------
	var causeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, ctx.Param("cause_id"), &causeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cause_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicCauseFundraisingEventControllerIndexParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicCauseFundraisingEventControllerIndex(ctx, causeId, params)
	return err
}

// V5ApiWebPublicCauseLeaderboardControllerTeam converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicCauseLeaderboardControllerTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cause_id" -------------
	var causeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, ctx.Param("cause_id"), &causeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cause_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicCauseLeaderboardControllerTeamParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicCauseLeaderboardControllerTeam(ctx, causeId, params)
	return err
}

// V5ApiWebPublicCauseLeaderboardControllerUser converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicCauseLeaderboardControllerUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cause_id" -------------
	var causeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, ctx.Param("cause_id"), &causeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cause_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicCauseLeaderboardControllerUserParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicCauseLeaderboardControllerUser(ctx, causeId, params)
	return err
}

// V5ApiWebPublicUserControllerCurrentUser converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicUserControllerCurrentUser(ctx echo.Context) error {
	var err error

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicUserControllerCurrentUser(ctx)
	return err
}

// V5ApiWebPublicFundraisingEventControllerShow converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicFundraisingEventControllerShow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicFundraisingEventControllerShow(ctx, fundraisingEventId)
	return err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured(ctx, fundraisingEventId)
	return err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerDonor converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicFundraisingEventLeaderboardControllerDonor(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicFundraisingEventLeaderboardControllerDonor(ctx, fundraisingEventId, params)
	return err
}

// V5ApiWebPublicFundraisingEventSupportingEventControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicFundraisingEventSupportingEventControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicFundraisingEventSupportingEventControllerIndexParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicFundraisingEventSupportingEventControllerIndex(ctx, fundraisingEventId, params)
	return err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance(ctx, fundraisingEventId, params)
	return err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime(ctx, fundraisingEventId, params)
	return err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeam converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicFundraisingEventLeaderboardControllerTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicFundraisingEventLeaderboardControllerTeam(ctx, fundraisingEventId, params)
	return err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance(ctx, fundraisingEventId, params)
	return err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime(ctx, fundraisingEventId, params)
	return err
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUser converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicFundraisingEventLeaderboardControllerUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicFundraisingEventLeaderboardControllerUserParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicFundraisingEventLeaderboardControllerUser(ctx, fundraisingEventId, params)
	return err
}

// V5ApiWebPublicTeamCampaignControllerShow converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicTeamCampaignControllerShow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicTeamCampaignControllerShow(ctx, teamCampaignId)
	return err
}

// V5ApiWebPublicTeamCampaignDonationControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicTeamCampaignDonationControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicTeamCampaignDonationControllerIndexParams
	// ------------- Optional query parameter "completed_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "completed_before", ctx.QueryParams(), &params.CompletedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter completed_before: %s", err))
	}

	// ------------- Optional query parameter "completed_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "completed_after", ctx.QueryParams(), &params.CompletedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter completed_after: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicTeamCampaignDonationControllerIndex(ctx, teamCampaignId, params)
	return err
}

// V5ApiWebPublicTeamCampaignLeaderboardControllerDonor converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicTeamCampaignLeaderboardControllerDonor(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicTeamCampaignLeaderboardControllerDonor(ctx, teamCampaignId, params)
	return err
}

// V5ApiWebPublicTeamCampaignMilestoneControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicTeamCampaignMilestoneControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicTeamCampaignMilestoneControllerIndexParams
	// ------------- Optional query parameter "include_disabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_disabled", ctx.QueryParams(), &params.IncludeDisabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_disabled: %s", err))
	}

	// ------------- Optional query parameter "created_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_before", ctx.QueryParams(), &params.CreatedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_before: %s", err))
	}

	// ------------- Optional query parameter "created_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_after", ctx.QueryParams(), &params.CreatedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_after: %s", err))
	}

	// ------------- Optional query parameter "updated_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "updated_before", ctx.QueryParams(), &params.UpdatedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updated_before: %s", err))
	}

	// ------------- Optional query parameter "updated_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "updated_after", ctx.QueryParams(), &params.UpdatedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updated_after: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicTeamCampaignMilestoneControllerIndex(ctx, teamCampaignId, params)
	return err
}

// V5ApiWebPublicTeamCampaignPollControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicTeamCampaignPollControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicTeamCampaignPollControllerIndexParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicTeamCampaignPollControllerIndex(ctx, teamCampaignId, params)
	return err
}

// V5ApiWebPublicTeamCampaignRewardControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicTeamCampaignRewardControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicTeamCampaignRewardControllerIndexParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicTeamCampaignRewardControllerIndex(ctx, teamCampaignId, params)
	return err
}

// V5ApiWebPublicTeamCampaignScheduleControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicTeamCampaignScheduleControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicTeamCampaignScheduleControllerIndexParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicTeamCampaignScheduleControllerIndex(ctx, teamCampaignId, params)
	return err
}

// V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex(ctx, teamCampaignId, params)
	return err
}

// V5ApiWebPublicTeamCampaignChallengeControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicTeamCampaignChallengeControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicTeamCampaignChallengeControllerIndexParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicTeamCampaignChallengeControllerIndex(ctx, teamCampaignId, params)
	return err
}

// V5ApiWebPublicTeamCampaignLeaderboardControllerUser converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicTeamCampaignLeaderboardControllerUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicTeamCampaignLeaderboardControllerUserParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicTeamCampaignLeaderboardControllerUser(ctx, teamCampaignId, params)
	return err
}

// V5ApiWebPublicTeamControllerShow converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicTeamControllerShow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_id", runtime.ParamLocationPath, ctx.Param("team_id"), &teamId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicTeamControllerShow(ctx, teamId)
	return err
}

// V5ApiWebPublicTeamMemberControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicTeamMemberControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_id", runtime.ParamLocationPath, ctx.Param("team_id"), &teamId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicTeamMemberControllerIndexParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicTeamMemberControllerIndex(ctx, teamId, params)
	return err
}

// V5ApiWebPublicTeamTeamCampaignControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicTeamTeamCampaignControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_id", runtime.ParamLocationPath, ctx.Param("team_id"), &teamId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicTeamTeamCampaignControllerIndexParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicTeamTeamCampaignControllerIndex(ctx, teamId, params)
	return err
}

// V5ApiWebPublicUserControllerShow converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicUserControllerShow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicUserControllerShow(ctx, userId)
	return err
}

// V5ApiWebPublicUserCampaignControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicUserCampaignControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicUserCampaignControllerIndexParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicUserCampaignControllerIndex(ctx, userId, params)
	return err
}

// V5ApiWebPublicUserIntegrationEventControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicUserIntegrationEventControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicUserIntegrationEventControllerIndexParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicUserIntegrationEventControllerIndex(ctx, userId, params)
	return err
}

// V5ApiWebPublicUserTeamControllerIndex converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebPublicUserTeamControllerIndex(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebPublicUserTeamControllerIndexParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebPublicUserTeamControllerIndex(ctx, userId, params)
	return err
}

// V5ApiWebOauthAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebOauthAuthorize(ctx echo.Context) error {
	var err error

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebOauthAuthorizeParams
	// ------------- Required query parameter "client_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "client_id", ctx.QueryParams(), &params.ClientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter client_id: %s", err))
	}

	// ------------- Required query parameter "redirect_uri" -------------

	err = runtime.BindQueryParameter("form", true, true, "redirect_uri", ctx.QueryParams(), &params.RedirectUri)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter redirect_uri: %s", err))
	}

	// ------------- Required query parameter "response_type" -------------

	err = runtime.BindQueryParameter("form", true, true, "response_type", ctx.QueryParams(), &params.ResponseType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter response_type: %s", err))
	}

	// ------------- Optional query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebOauthAuthorize(ctx, params)
	return err
}

// V5ApiWebOauthToken converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebOauthToken(ctx echo.Context) error {
	var err error

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebOauthTokenParams
	// ------------- Required query parameter "client_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "client_id", ctx.QueryParams(), &params.ClientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter client_id: %s", err))
	}

	// ------------- Required query parameter "client_secret" -------------

	err = runtime.BindQueryParameter("form", true, true, "client_secret", ctx.QueryParams(), &params.ClientSecret)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter client_secret: %s", err))
	}

	// ------------- Required query parameter "grant_type" -------------

	err = runtime.BindQueryParameter("form", true, true, "grant_type", ctx.QueryParams(), &params.GrantType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter grant_type: %s", err))
	}

	// ------------- Optional query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, false, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// ------------- Optional query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebOauthToken(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/public/campaigns/:campaign_id", wrapper.V5ApiWebPublicCampaignControllerShow)
	router.GET(baseURL+"/api/public/campaigns/:campaign_id/donations", wrapper.V5ApiWebPublicCampaignDonationControllerIndex)
	router.GET(baseURL+"/api/public/campaigns/:campaign_id/donor_leaderboard", wrapper.V5ApiWebPublicCampaignLeaderboardControllerDonor)
	router.GET(baseURL+"/api/public/campaigns/:campaign_id/milestones", wrapper.V5ApiWebPublicCampaignMilestoneControllerIndex)
	router.GET(baseURL+"/api/public/campaigns/:campaign_id/polls", wrapper.V5ApiWebPublicCampaignPollControllerIndex)
	router.GET(baseURL+"/api/public/campaigns/:campaign_id/rewards", wrapper.V5ApiWebPublicCampaignRewardControllerIndex)
	router.GET(baseURL+"/api/public/campaigns/:campaign_id/schedules", wrapper.V5ApiWebPublicCampaignScheduleControllerIndex)
	router.GET(baseURL+"/api/public/campaigns/:campaign_id/targets", wrapper.V5ApiWebPublicCampaignChallengeControllerIndex)
	router.GET(baseURL+"/api/public/causes/:cause_id", wrapper.V5ApiWebPublicCauseControllerShow)
	router.GET(baseURL+"/api/public/causes/:cause_id/campaigns", wrapper.V5ApiWebPublicCauseCampaignControllerIndex)
	router.GET(baseURL+"/api/public/causes/:cause_id/configured_leaderboard", wrapper.V5ApiWebPublicCauseLeaderboardControllerConfigured)
	router.GET(baseURL+"/api/public/causes/:cause_id/donor_leaderboard", wrapper.V5ApiWebPublicCauseLeaderboardControllerDonor)
	router.GET(baseURL+"/api/public/causes/:cause_id/fundraising_events", wrapper.V5ApiWebPublicCauseFundraisingEventControllerIndex)
	router.GET(baseURL+"/api/public/causes/:cause_id/team_leaderboard", wrapper.V5ApiWebPublicCauseLeaderboardControllerTeam)
	router.GET(baseURL+"/api/public/causes/:cause_id/user_leaderboard", wrapper.V5ApiWebPublicCauseLeaderboardControllerUser)
	router.GET(baseURL+"/api/public/current-user", wrapper.V5ApiWebPublicUserControllerCurrentUser)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id", wrapper.V5ApiWebPublicFundraisingEventControllerShow)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id/configured_leaderboard", wrapper.V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id/donor_leaderboard", wrapper.V5ApiWebPublicFundraisingEventLeaderboardControllerDonor)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id/supporting_events", wrapper.V5ApiWebPublicFundraisingEventSupportingEventControllerIndex)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id/team_fitness_distance_leaderboard", wrapper.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id/team_fitness_time_leaderboard", wrapper.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id/team_leaderboard", wrapper.V5ApiWebPublicFundraisingEventLeaderboardControllerTeam)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id/user_fitness_distance_leaderboard", wrapper.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id/user_fitness_time_leaderboard", wrapper.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id/user_leaderboard", wrapper.V5ApiWebPublicFundraisingEventLeaderboardControllerUser)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id", wrapper.V5ApiWebPublicTeamCampaignControllerShow)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id/donations", wrapper.V5ApiWebPublicTeamCampaignDonationControllerIndex)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id/donor_leaderboards", wrapper.V5ApiWebPublicTeamCampaignLeaderboardControllerDonor)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id/milestones", wrapper.V5ApiWebPublicTeamCampaignMilestoneControllerIndex)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id/polls", wrapper.V5ApiWebPublicTeamCampaignPollControllerIndex)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id/rewards", wrapper.V5ApiWebPublicTeamCampaignRewardControllerIndex)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id/schedules", wrapper.V5ApiWebPublicTeamCampaignScheduleControllerIndex)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id/supporting_campaigns", wrapper.V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id/targets", wrapper.V5ApiWebPublicTeamCampaignChallengeControllerIndex)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id/user_leaderboards", wrapper.V5ApiWebPublicTeamCampaignLeaderboardControllerUser)
	router.GET(baseURL+"/api/public/teams/:team_id", wrapper.V5ApiWebPublicTeamControllerShow)
	router.GET(baseURL+"/api/public/teams/:team_id/members", wrapper.V5ApiWebPublicTeamMemberControllerIndex)
	router.GET(baseURL+"/api/public/teams/:team_id/team_campaigns", wrapper.V5ApiWebPublicTeamTeamCampaignControllerIndex)
	router.GET(baseURL+"/api/public/users/:user_id", wrapper.V5ApiWebPublicUserControllerShow)
	router.GET(baseURL+"/api/public/users/:user_id/campaigns", wrapper.V5ApiWebPublicUserCampaignControllerIndex)
	router.GET(baseURL+"/api/public/users/:user_id/integration_events", wrapper.V5ApiWebPublicUserIntegrationEventControllerIndex)
	router.GET(baseURL+"/api/public/users/:user_id/teams", wrapper.V5ApiWebPublicUserTeamControllerIndex)
	router.GET(baseURL+"/oauth/authorize", wrapper.V5ApiWebOauthAuthorize)
	router.POST(baseURL+"/oauth/token", wrapper.V5ApiWebOauthToken)

}

type CurrentUserJSONResponse CurrentUserObj

type V5ApiWebPublicCampaignControllerShowRequestObject struct {
	CampaignId string `json:"campaign_id"`
}

type V5ApiWebPublicCampaignControllerShowResponseObject interface {
	VisitV5ApiWebPublicCampaignControllerShowResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicCampaignControllerShow200JSONResponse struct {
	Data *Campaign `json:"data,omitempty"`
}

func (response V5ApiWebPublicCampaignControllerShow200JSONResponse) VisitV5ApiWebPublicCampaignControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignControllerShow401JSONResponse Unauthorized

func (response V5ApiWebPublicCampaignControllerShow401JSONResponse) VisitV5ApiWebPublicCampaignControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignControllerShow404JSONResponse NotFound

func (response V5ApiWebPublicCampaignControllerShow404JSONResponse) VisitV5ApiWebPublicCampaignControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignControllerShow422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicCampaignControllerShow422JSONResponse) VisitV5ApiWebPublicCampaignControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignDonationControllerIndexRequestObject struct {
	CampaignId string `json:"campaign_id"`
	Params     V5ApiWebPublicCampaignDonationControllerIndexParams
}

type V5ApiWebPublicCampaignDonationControllerIndexResponseObject interface {
	VisitV5ApiWebPublicCampaignDonationControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicCampaignDonationControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicCampaignDonationControllerIndex200JSONResponse) VisitV5ApiWebPublicCampaignDonationControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignDonationControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicCampaignDonationControllerIndex401JSONResponse) VisitV5ApiWebPublicCampaignDonationControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignDonationControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicCampaignDonationControllerIndex404JSONResponse) VisitV5ApiWebPublicCampaignDonationControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignDonationControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicCampaignDonationControllerIndex422JSONResponse) VisitV5ApiWebPublicCampaignDonationControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignLeaderboardControllerDonorRequestObject struct {
	CampaignId string `json:"campaign_id"`
	Params     V5ApiWebPublicCampaignLeaderboardControllerDonorParams
}

type V5ApiWebPublicCampaignLeaderboardControllerDonorResponseObject interface {
	VisitV5ApiWebPublicCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicCampaignLeaderboardControllerDonor200JSONResponse PaginatedResponse

func (response V5ApiWebPublicCampaignLeaderboardControllerDonor200JSONResponse) VisitV5ApiWebPublicCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignLeaderboardControllerDonor401JSONResponse Unauthorized

func (response V5ApiWebPublicCampaignLeaderboardControllerDonor401JSONResponse) VisitV5ApiWebPublicCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignLeaderboardControllerDonor403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response V5ApiWebPublicCampaignLeaderboardControllerDonor403ApplictionjsonResponse) VisitV5ApiWebPublicCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type V5ApiWebPublicCampaignLeaderboardControllerDonor404JSONResponse NotFound

func (response V5ApiWebPublicCampaignLeaderboardControllerDonor404JSONResponse) VisitV5ApiWebPublicCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignLeaderboardControllerDonor422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicCampaignLeaderboardControllerDonor422JSONResponse) VisitV5ApiWebPublicCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignMilestoneControllerIndexRequestObject struct {
	CampaignId string `json:"campaign_id"`
	Params     V5ApiWebPublicCampaignMilestoneControllerIndexParams
}

type V5ApiWebPublicCampaignMilestoneControllerIndexResponseObject interface {
	VisitV5ApiWebPublicCampaignMilestoneControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicCampaignMilestoneControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicCampaignMilestoneControllerIndex200JSONResponse) VisitV5ApiWebPublicCampaignMilestoneControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignMilestoneControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicCampaignMilestoneControllerIndex401JSONResponse) VisitV5ApiWebPublicCampaignMilestoneControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignMilestoneControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicCampaignMilestoneControllerIndex404JSONResponse) VisitV5ApiWebPublicCampaignMilestoneControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignMilestoneControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicCampaignMilestoneControllerIndex422JSONResponse) VisitV5ApiWebPublicCampaignMilestoneControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignPollControllerIndexRequestObject struct {
	CampaignId string `json:"campaign_id"`
	Params     V5ApiWebPublicCampaignPollControllerIndexParams
}

type V5ApiWebPublicCampaignPollControllerIndexResponseObject interface {
	VisitV5ApiWebPublicCampaignPollControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicCampaignPollControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicCampaignPollControllerIndex200JSONResponse) VisitV5ApiWebPublicCampaignPollControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignPollControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicCampaignPollControllerIndex401JSONResponse) VisitV5ApiWebPublicCampaignPollControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignPollControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicCampaignPollControllerIndex404JSONResponse) VisitV5ApiWebPublicCampaignPollControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignPollControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicCampaignPollControllerIndex422JSONResponse) VisitV5ApiWebPublicCampaignPollControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignRewardControllerIndexRequestObject struct {
	CampaignId string `json:"campaign_id"`
	Params     V5ApiWebPublicCampaignRewardControllerIndexParams
}

type V5ApiWebPublicCampaignRewardControllerIndexResponseObject interface {
	VisitV5ApiWebPublicCampaignRewardControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicCampaignRewardControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicCampaignRewardControllerIndex200JSONResponse) VisitV5ApiWebPublicCampaignRewardControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignRewardControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicCampaignRewardControllerIndex401JSONResponse) VisitV5ApiWebPublicCampaignRewardControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignRewardControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicCampaignRewardControllerIndex404JSONResponse) VisitV5ApiWebPublicCampaignRewardControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignRewardControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicCampaignRewardControllerIndex422JSONResponse) VisitV5ApiWebPublicCampaignRewardControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignScheduleControllerIndexRequestObject struct {
	CampaignId string `json:"campaign_id"`
	Params     V5ApiWebPublicCampaignScheduleControllerIndexParams
}

type V5ApiWebPublicCampaignScheduleControllerIndexResponseObject interface {
	VisitV5ApiWebPublicCampaignScheduleControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicCampaignScheduleControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicCampaignScheduleControllerIndex200JSONResponse) VisitV5ApiWebPublicCampaignScheduleControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignScheduleControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicCampaignScheduleControllerIndex401JSONResponse) VisitV5ApiWebPublicCampaignScheduleControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignScheduleControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicCampaignScheduleControllerIndex404JSONResponse) VisitV5ApiWebPublicCampaignScheduleControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignScheduleControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicCampaignScheduleControllerIndex422JSONResponse) VisitV5ApiWebPublicCampaignScheduleControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignChallengeControllerIndexRequestObject struct {
	CampaignId string `json:"campaign_id"`
	Params     V5ApiWebPublicCampaignChallengeControllerIndexParams
}

type V5ApiWebPublicCampaignChallengeControllerIndexResponseObject interface {
	VisitV5ApiWebPublicCampaignChallengeControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicCampaignChallengeControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicCampaignChallengeControllerIndex200JSONResponse) VisitV5ApiWebPublicCampaignChallengeControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignChallengeControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicCampaignChallengeControllerIndex401JSONResponse) VisitV5ApiWebPublicCampaignChallengeControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignChallengeControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicCampaignChallengeControllerIndex404JSONResponse) VisitV5ApiWebPublicCampaignChallengeControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCampaignChallengeControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicCampaignChallengeControllerIndex422JSONResponse) VisitV5ApiWebPublicCampaignChallengeControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseControllerShowRequestObject struct {
	CauseId string `json:"cause_id"`
}

type V5ApiWebPublicCauseControllerShowResponseObject interface {
	VisitV5ApiWebPublicCauseControllerShowResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicCauseControllerShow200JSONResponse struct {
	Data *Cause `json:"data,omitempty"`
}

func (response V5ApiWebPublicCauseControllerShow200JSONResponse) VisitV5ApiWebPublicCauseControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseControllerShow401JSONResponse Unauthorized

func (response V5ApiWebPublicCauseControllerShow401JSONResponse) VisitV5ApiWebPublicCauseControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseControllerShow404JSONResponse NotFound

func (response V5ApiWebPublicCauseControllerShow404JSONResponse) VisitV5ApiWebPublicCauseControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseControllerShow422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicCauseControllerShow422JSONResponse) VisitV5ApiWebPublicCauseControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseCampaignControllerIndexRequestObject struct {
	CauseId string `json:"cause_id"`
	Params  V5ApiWebPublicCauseCampaignControllerIndexParams
}

type V5ApiWebPublicCauseCampaignControllerIndexResponseObject interface {
	VisitV5ApiWebPublicCauseCampaignControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicCauseCampaignControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicCauseCampaignControllerIndex200JSONResponse) VisitV5ApiWebPublicCauseCampaignControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseCampaignControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicCauseCampaignControllerIndex401JSONResponse) VisitV5ApiWebPublicCauseCampaignControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseCampaignControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicCauseCampaignControllerIndex404JSONResponse) VisitV5ApiWebPublicCauseCampaignControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseCampaignControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicCauseCampaignControllerIndex422JSONResponse) VisitV5ApiWebPublicCauseCampaignControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseLeaderboardControllerConfiguredRequestObject struct {
	CauseId string `json:"cause_id"`
}

type V5ApiWebPublicCauseLeaderboardControllerConfiguredResponseObject interface {
	VisitV5ApiWebPublicCauseLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicCauseLeaderboardControllerConfigured200JSONResponse struct {
	// Data Configured Leaderboards Like V3
	Data *ConfiguredLeaderboard `json:"data,omitempty"`
}

func (response V5ApiWebPublicCauseLeaderboardControllerConfigured200JSONResponse) VisitV5ApiWebPublicCauseLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseLeaderboardControllerConfigured401JSONResponse Unauthorized

func (response V5ApiWebPublicCauseLeaderboardControllerConfigured401JSONResponse) VisitV5ApiWebPublicCauseLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseLeaderboardControllerConfigured403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response V5ApiWebPublicCauseLeaderboardControllerConfigured403ApplictionjsonResponse) VisitV5ApiWebPublicCauseLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type V5ApiWebPublicCauseLeaderboardControllerConfigured404JSONResponse NotFound

func (response V5ApiWebPublicCauseLeaderboardControllerConfigured404JSONResponse) VisitV5ApiWebPublicCauseLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseLeaderboardControllerConfigured422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicCauseLeaderboardControllerConfigured422JSONResponse) VisitV5ApiWebPublicCauseLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseLeaderboardControllerDonorRequestObject struct {
	CauseId string `json:"cause_id"`
	Params  V5ApiWebPublicCauseLeaderboardControllerDonorParams
}

type V5ApiWebPublicCauseLeaderboardControllerDonorResponseObject interface {
	VisitV5ApiWebPublicCauseLeaderboardControllerDonorResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicCauseLeaderboardControllerDonor200JSONResponse PaginatedResponse

func (response V5ApiWebPublicCauseLeaderboardControllerDonor200JSONResponse) VisitV5ApiWebPublicCauseLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseLeaderboardControllerDonor401JSONResponse Unauthorized

func (response V5ApiWebPublicCauseLeaderboardControllerDonor401JSONResponse) VisitV5ApiWebPublicCauseLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseLeaderboardControllerDonor403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response V5ApiWebPublicCauseLeaderboardControllerDonor403ApplictionjsonResponse) VisitV5ApiWebPublicCauseLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type V5ApiWebPublicCauseLeaderboardControllerDonor404JSONResponse NotFound

func (response V5ApiWebPublicCauseLeaderboardControllerDonor404JSONResponse) VisitV5ApiWebPublicCauseLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseLeaderboardControllerDonor422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicCauseLeaderboardControllerDonor422JSONResponse) VisitV5ApiWebPublicCauseLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseFundraisingEventControllerIndexRequestObject struct {
	CauseId string `json:"cause_id"`
	Params  V5ApiWebPublicCauseFundraisingEventControllerIndexParams
}

type V5ApiWebPublicCauseFundraisingEventControllerIndexResponseObject interface {
	VisitV5ApiWebPublicCauseFundraisingEventControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicCauseFundraisingEventControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicCauseFundraisingEventControllerIndex200JSONResponse) VisitV5ApiWebPublicCauseFundraisingEventControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseFundraisingEventControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicCauseFundraisingEventControllerIndex401JSONResponse) VisitV5ApiWebPublicCauseFundraisingEventControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseFundraisingEventControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicCauseFundraisingEventControllerIndex404JSONResponse) VisitV5ApiWebPublicCauseFundraisingEventControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseFundraisingEventControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicCauseFundraisingEventControllerIndex422JSONResponse) VisitV5ApiWebPublicCauseFundraisingEventControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseLeaderboardControllerTeamRequestObject struct {
	CauseId string `json:"cause_id"`
	Params  V5ApiWebPublicCauseLeaderboardControllerTeamParams
}

type V5ApiWebPublicCauseLeaderboardControllerTeamResponseObject interface {
	VisitV5ApiWebPublicCauseLeaderboardControllerTeamResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicCauseLeaderboardControllerTeam200JSONResponse PaginatedResponse

func (response V5ApiWebPublicCauseLeaderboardControllerTeam200JSONResponse) VisitV5ApiWebPublicCauseLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseLeaderboardControllerTeam401JSONResponse Unauthorized

func (response V5ApiWebPublicCauseLeaderboardControllerTeam401JSONResponse) VisitV5ApiWebPublicCauseLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseLeaderboardControllerTeam403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response V5ApiWebPublicCauseLeaderboardControllerTeam403ApplictionjsonResponse) VisitV5ApiWebPublicCauseLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type V5ApiWebPublicCauseLeaderboardControllerTeam404JSONResponse NotFound

func (response V5ApiWebPublicCauseLeaderboardControllerTeam404JSONResponse) VisitV5ApiWebPublicCauseLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseLeaderboardControllerTeam422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicCauseLeaderboardControllerTeam422JSONResponse) VisitV5ApiWebPublicCauseLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseLeaderboardControllerUserRequestObject struct {
	CauseId string `json:"cause_id"`
	Params  V5ApiWebPublicCauseLeaderboardControllerUserParams
}

type V5ApiWebPublicCauseLeaderboardControllerUserResponseObject interface {
	VisitV5ApiWebPublicCauseLeaderboardControllerUserResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicCauseLeaderboardControllerUser200JSONResponse PaginatedResponse

func (response V5ApiWebPublicCauseLeaderboardControllerUser200JSONResponse) VisitV5ApiWebPublicCauseLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseLeaderboardControllerUser401JSONResponse Unauthorized

func (response V5ApiWebPublicCauseLeaderboardControllerUser401JSONResponse) VisitV5ApiWebPublicCauseLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseLeaderboardControllerUser403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response V5ApiWebPublicCauseLeaderboardControllerUser403ApplictionjsonResponse) VisitV5ApiWebPublicCauseLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type V5ApiWebPublicCauseLeaderboardControllerUser404JSONResponse NotFound

func (response V5ApiWebPublicCauseLeaderboardControllerUser404JSONResponse) VisitV5ApiWebPublicCauseLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicCauseLeaderboardControllerUser422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicCauseLeaderboardControllerUser422JSONResponse) VisitV5ApiWebPublicCauseLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserControllerCurrentUserRequestObject struct {
}

type V5ApiWebPublicUserControllerCurrentUserResponseObject interface {
	VisitV5ApiWebPublicUserControllerCurrentUserResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicUserControllerCurrentUser200JSONResponse struct{ CurrentUserJSONResponse }

func (response V5ApiWebPublicUserControllerCurrentUser200JSONResponse) VisitV5ApiWebPublicUserControllerCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserControllerCurrentUser401JSONResponse Unauthorized

func (response V5ApiWebPublicUserControllerCurrentUser401JSONResponse) VisitV5ApiWebPublicUserControllerCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserControllerCurrentUser404JSONResponse NotFound

func (response V5ApiWebPublicUserControllerCurrentUser404JSONResponse) VisitV5ApiWebPublicUserControllerCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserControllerCurrentUser422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicUserControllerCurrentUser422JSONResponse) VisitV5ApiWebPublicUserControllerCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventControllerShowRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
}

type V5ApiWebPublicFundraisingEventControllerShowResponseObject interface {
	VisitV5ApiWebPublicFundraisingEventControllerShowResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicFundraisingEventControllerShow200JSONResponse struct {
	Data *FundraisingEvent `json:"data,omitempty"`
}

func (response V5ApiWebPublicFundraisingEventControllerShow200JSONResponse) VisitV5ApiWebPublicFundraisingEventControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventControllerShow401JSONResponse Unauthorized

func (response V5ApiWebPublicFundraisingEventControllerShow401JSONResponse) VisitV5ApiWebPublicFundraisingEventControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventControllerShow404JSONResponse NotFound

func (response V5ApiWebPublicFundraisingEventControllerShow404JSONResponse) VisitV5ApiWebPublicFundraisingEventControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventControllerShow422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicFundraisingEventControllerShow422JSONResponse) VisitV5ApiWebPublicFundraisingEventControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponseObject interface {
	VisitV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured200JSONResponse struct {
	// Data Configured Leaderboards Like V3
	Data *ConfiguredLeaderboard `json:"data,omitempty"`
}

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured200JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured401JSONResponse Unauthorized

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured401JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured403ApplictionjsonResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured404JSONResponse NotFound

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured404JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured422JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerDonorRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
	Params             V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParams
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponseObject interface {
	VisitV5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerDonor200JSONResponse PaginatedResponse

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerDonor200JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerDonor401JSONResponse Unauthorized

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerDonor401JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerDonor403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerDonor403ApplictionjsonResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerDonor404JSONResponse NotFound

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerDonor404JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerDonor422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerDonor422JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventSupportingEventControllerIndexRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
	Params             V5ApiWebPublicFundraisingEventSupportingEventControllerIndexParams
}

type V5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponseObject interface {
	VisitV5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicFundraisingEventSupportingEventControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicFundraisingEventSupportingEventControllerIndex200JSONResponse) VisitV5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventSupportingEventControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicFundraisingEventSupportingEventControllerIndex401JSONResponse) VisitV5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventSupportingEventControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicFundraisingEventSupportingEventControllerIndex404JSONResponse) VisitV5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventSupportingEventControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicFundraisingEventSupportingEventControllerIndex422JSONResponse) VisitV5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
	Params             V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParams
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponseObject interface {
	VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance200JSONResponse PaginatedResponse

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance200JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance401JSONResponse Unauthorized

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance401JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance403ApplictionjsonResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance404JSONResponse NotFound

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance404JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance422JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
	Params             V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParams
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponseObject interface {
	VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime200JSONResponse PaginatedResponse

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime200JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime401JSONResponse Unauthorized

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime401JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime403ApplictionjsonResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime404JSONResponse NotFound

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime404JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime422JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
	Params             V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParams
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponseObject interface {
	VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeam200JSONResponse PaginatedResponse

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerTeam200JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeam401JSONResponse Unauthorized

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerTeam401JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeam403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerTeam403ApplictionjsonResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeam404JSONResponse NotFound

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerTeam404JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerTeam422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerTeam422JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
	Params             V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParams
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponseObject interface {
	VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance200JSONResponse PaginatedResponse

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance200JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance401JSONResponse Unauthorized

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance401JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance403ApplictionjsonResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance404JSONResponse NotFound

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance404JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance422JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
	Params             V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParams
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponseObject interface {
	VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime200JSONResponse PaginatedResponse

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime200JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime401JSONResponse Unauthorized

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime401JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime403ApplictionjsonResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime404JSONResponse NotFound

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime404JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime422JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUserRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
	Params             V5ApiWebPublicFundraisingEventLeaderboardControllerUserParams
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUserResponseObject interface {
	VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUser200JSONResponse PaginatedResponse

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerUser200JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUser401JSONResponse Unauthorized

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerUser401JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUser403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerUser403ApplictionjsonResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUser404JSONResponse NotFound

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerUser404JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicFundraisingEventLeaderboardControllerUser422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicFundraisingEventLeaderboardControllerUser422JSONResponse) VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignControllerShowRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
}

type V5ApiWebPublicTeamCampaignControllerShowResponseObject interface {
	VisitV5ApiWebPublicTeamCampaignControllerShowResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicTeamCampaignControllerShow200JSONResponse struct {
	Data *TeamCampaign `json:"data,omitempty"`
}

func (response V5ApiWebPublicTeamCampaignControllerShow200JSONResponse) VisitV5ApiWebPublicTeamCampaignControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignControllerShow401JSONResponse Unauthorized

func (response V5ApiWebPublicTeamCampaignControllerShow401JSONResponse) VisitV5ApiWebPublicTeamCampaignControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignControllerShow404JSONResponse NotFound

func (response V5ApiWebPublicTeamCampaignControllerShow404JSONResponse) VisitV5ApiWebPublicTeamCampaignControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignControllerShow422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicTeamCampaignControllerShow422JSONResponse) VisitV5ApiWebPublicTeamCampaignControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignDonationControllerIndexRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
	Params         V5ApiWebPublicTeamCampaignDonationControllerIndexParams
}

type V5ApiWebPublicTeamCampaignDonationControllerIndexResponseObject interface {
	VisitV5ApiWebPublicTeamCampaignDonationControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicTeamCampaignDonationControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicTeamCampaignDonationControllerIndex200JSONResponse) VisitV5ApiWebPublicTeamCampaignDonationControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignDonationControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicTeamCampaignDonationControllerIndex401JSONResponse) VisitV5ApiWebPublicTeamCampaignDonationControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignDonationControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicTeamCampaignDonationControllerIndex404JSONResponse) VisitV5ApiWebPublicTeamCampaignDonationControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignDonationControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicTeamCampaignDonationControllerIndex422JSONResponse) VisitV5ApiWebPublicTeamCampaignDonationControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignLeaderboardControllerDonorRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
	Params         V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParams
}

type V5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponseObject interface {
	VisitV5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicTeamCampaignLeaderboardControllerDonor200JSONResponse PaginatedResponse

func (response V5ApiWebPublicTeamCampaignLeaderboardControllerDonor200JSONResponse) VisitV5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignLeaderboardControllerDonor401JSONResponse Unauthorized

func (response V5ApiWebPublicTeamCampaignLeaderboardControllerDonor401JSONResponse) VisitV5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignLeaderboardControllerDonor403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response V5ApiWebPublicTeamCampaignLeaderboardControllerDonor403ApplictionjsonResponse) VisitV5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type V5ApiWebPublicTeamCampaignLeaderboardControllerDonor404JSONResponse NotFound

func (response V5ApiWebPublicTeamCampaignLeaderboardControllerDonor404JSONResponse) VisitV5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignLeaderboardControllerDonor422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicTeamCampaignLeaderboardControllerDonor422JSONResponse) VisitV5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignMilestoneControllerIndexRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
	Params         V5ApiWebPublicTeamCampaignMilestoneControllerIndexParams
}

type V5ApiWebPublicTeamCampaignMilestoneControllerIndexResponseObject interface {
	VisitV5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicTeamCampaignMilestoneControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicTeamCampaignMilestoneControllerIndex200JSONResponse) VisitV5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignMilestoneControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicTeamCampaignMilestoneControllerIndex401JSONResponse) VisitV5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignMilestoneControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicTeamCampaignMilestoneControllerIndex404JSONResponse) VisitV5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignMilestoneControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicTeamCampaignMilestoneControllerIndex422JSONResponse) VisitV5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignPollControllerIndexRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
	Params         V5ApiWebPublicTeamCampaignPollControllerIndexParams
}

type V5ApiWebPublicTeamCampaignPollControllerIndexResponseObject interface {
	VisitV5ApiWebPublicTeamCampaignPollControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicTeamCampaignPollControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicTeamCampaignPollControllerIndex200JSONResponse) VisitV5ApiWebPublicTeamCampaignPollControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignPollControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicTeamCampaignPollControllerIndex401JSONResponse) VisitV5ApiWebPublicTeamCampaignPollControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignPollControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicTeamCampaignPollControllerIndex404JSONResponse) VisitV5ApiWebPublicTeamCampaignPollControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignPollControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicTeamCampaignPollControllerIndex422JSONResponse) VisitV5ApiWebPublicTeamCampaignPollControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignRewardControllerIndexRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
	Params         V5ApiWebPublicTeamCampaignRewardControllerIndexParams
}

type V5ApiWebPublicTeamCampaignRewardControllerIndexResponseObject interface {
	VisitV5ApiWebPublicTeamCampaignRewardControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicTeamCampaignRewardControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicTeamCampaignRewardControllerIndex200JSONResponse) VisitV5ApiWebPublicTeamCampaignRewardControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignRewardControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicTeamCampaignRewardControllerIndex401JSONResponse) VisitV5ApiWebPublicTeamCampaignRewardControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignRewardControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicTeamCampaignRewardControllerIndex404JSONResponse) VisitV5ApiWebPublicTeamCampaignRewardControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignRewardControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicTeamCampaignRewardControllerIndex422JSONResponse) VisitV5ApiWebPublicTeamCampaignRewardControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignScheduleControllerIndexRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
	Params         V5ApiWebPublicTeamCampaignScheduleControllerIndexParams
}

type V5ApiWebPublicTeamCampaignScheduleControllerIndexResponseObject interface {
	VisitV5ApiWebPublicTeamCampaignScheduleControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicTeamCampaignScheduleControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicTeamCampaignScheduleControllerIndex200JSONResponse) VisitV5ApiWebPublicTeamCampaignScheduleControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignScheduleControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicTeamCampaignScheduleControllerIndex401JSONResponse) VisitV5ApiWebPublicTeamCampaignScheduleControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignScheduleControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicTeamCampaignScheduleControllerIndex404JSONResponse) VisitV5ApiWebPublicTeamCampaignScheduleControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignScheduleControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicTeamCampaignScheduleControllerIndex422JSONResponse) VisitV5ApiWebPublicTeamCampaignScheduleControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
	Params         V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexParams
}

type V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponseObject interface {
	VisitV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex200JSONResponse) VisitV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex401JSONResponse) VisitV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex404JSONResponse) VisitV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex422JSONResponse) VisitV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignChallengeControllerIndexRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
	Params         V5ApiWebPublicTeamCampaignChallengeControllerIndexParams
}

type V5ApiWebPublicTeamCampaignChallengeControllerIndexResponseObject interface {
	VisitV5ApiWebPublicTeamCampaignChallengeControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicTeamCampaignChallengeControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicTeamCampaignChallengeControllerIndex200JSONResponse) VisitV5ApiWebPublicTeamCampaignChallengeControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignChallengeControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicTeamCampaignChallengeControllerIndex401JSONResponse) VisitV5ApiWebPublicTeamCampaignChallengeControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignChallengeControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicTeamCampaignChallengeControllerIndex404JSONResponse) VisitV5ApiWebPublicTeamCampaignChallengeControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignChallengeControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicTeamCampaignChallengeControllerIndex422JSONResponse) VisitV5ApiWebPublicTeamCampaignChallengeControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignLeaderboardControllerUserRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
	Params         V5ApiWebPublicTeamCampaignLeaderboardControllerUserParams
}

type V5ApiWebPublicTeamCampaignLeaderboardControllerUserResponseObject interface {
	VisitV5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicTeamCampaignLeaderboardControllerUser200JSONResponse PaginatedResponse

func (response V5ApiWebPublicTeamCampaignLeaderboardControllerUser200JSONResponse) VisitV5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignLeaderboardControllerUser401JSONResponse Unauthorized

func (response V5ApiWebPublicTeamCampaignLeaderboardControllerUser401JSONResponse) VisitV5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignLeaderboardControllerUser403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response V5ApiWebPublicTeamCampaignLeaderboardControllerUser403ApplictionjsonResponse) VisitV5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type V5ApiWebPublicTeamCampaignLeaderboardControllerUser404JSONResponse NotFound

func (response V5ApiWebPublicTeamCampaignLeaderboardControllerUser404JSONResponse) VisitV5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamCampaignLeaderboardControllerUser422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicTeamCampaignLeaderboardControllerUser422JSONResponse) VisitV5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamControllerShowRequestObject struct {
	TeamId string `json:"team_id"`
}

type V5ApiWebPublicTeamControllerShowResponseObject interface {
	VisitV5ApiWebPublicTeamControllerShowResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicTeamControllerShow200JSONResponse struct {
	Data *Team `json:"data,omitempty"`
}

func (response V5ApiWebPublicTeamControllerShow200JSONResponse) VisitV5ApiWebPublicTeamControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamControllerShow401JSONResponse Unauthorized

func (response V5ApiWebPublicTeamControllerShow401JSONResponse) VisitV5ApiWebPublicTeamControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamControllerShow404JSONResponse NotFound

func (response V5ApiWebPublicTeamControllerShow404JSONResponse) VisitV5ApiWebPublicTeamControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamControllerShow422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicTeamControllerShow422JSONResponse) VisitV5ApiWebPublicTeamControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamMemberControllerIndexRequestObject struct {
	TeamId string `json:"team_id"`
	Params V5ApiWebPublicTeamMemberControllerIndexParams
}

type V5ApiWebPublicTeamMemberControllerIndexResponseObject interface {
	VisitV5ApiWebPublicTeamMemberControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicTeamMemberControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicTeamMemberControllerIndex200JSONResponse) VisitV5ApiWebPublicTeamMemberControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamMemberControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicTeamMemberControllerIndex401JSONResponse) VisitV5ApiWebPublicTeamMemberControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamMemberControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicTeamMemberControllerIndex404JSONResponse) VisitV5ApiWebPublicTeamMemberControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamMemberControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicTeamMemberControllerIndex422JSONResponse) VisitV5ApiWebPublicTeamMemberControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamTeamCampaignControllerIndexRequestObject struct {
	TeamId string `json:"team_id"`
	Params V5ApiWebPublicTeamTeamCampaignControllerIndexParams
}

type V5ApiWebPublicTeamTeamCampaignControllerIndexResponseObject interface {
	VisitV5ApiWebPublicTeamTeamCampaignControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicTeamTeamCampaignControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicTeamTeamCampaignControllerIndex200JSONResponse) VisitV5ApiWebPublicTeamTeamCampaignControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamTeamCampaignControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicTeamTeamCampaignControllerIndex401JSONResponse) VisitV5ApiWebPublicTeamTeamCampaignControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamTeamCampaignControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicTeamTeamCampaignControllerIndex404JSONResponse) VisitV5ApiWebPublicTeamTeamCampaignControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicTeamTeamCampaignControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicTeamTeamCampaignControllerIndex422JSONResponse) VisitV5ApiWebPublicTeamTeamCampaignControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserControllerShowRequestObject struct {
	UserId string `json:"user_id"`
}

type V5ApiWebPublicUserControllerShowResponseObject interface {
	VisitV5ApiWebPublicUserControllerShowResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicUserControllerShow200JSONResponse struct {
	Data *User `json:"data,omitempty"`
}

func (response V5ApiWebPublicUserControllerShow200JSONResponse) VisitV5ApiWebPublicUserControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserControllerShow401JSONResponse Unauthorized

func (response V5ApiWebPublicUserControllerShow401JSONResponse) VisitV5ApiWebPublicUserControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserControllerShow404JSONResponse NotFound

func (response V5ApiWebPublicUserControllerShow404JSONResponse) VisitV5ApiWebPublicUserControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserControllerShow422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicUserControllerShow422JSONResponse) VisitV5ApiWebPublicUserControllerShowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserCampaignControllerIndexRequestObject struct {
	UserId string `json:"user_id"`
	Params V5ApiWebPublicUserCampaignControllerIndexParams
}

type V5ApiWebPublicUserCampaignControllerIndexResponseObject interface {
	VisitV5ApiWebPublicUserCampaignControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicUserCampaignControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicUserCampaignControllerIndex200JSONResponse) VisitV5ApiWebPublicUserCampaignControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserCampaignControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicUserCampaignControllerIndex401JSONResponse) VisitV5ApiWebPublicUserCampaignControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserCampaignControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicUserCampaignControllerIndex404JSONResponse) VisitV5ApiWebPublicUserCampaignControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserCampaignControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicUserCampaignControllerIndex422JSONResponse) VisitV5ApiWebPublicUserCampaignControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserIntegrationEventControllerIndexRequestObject struct {
	UserId string `json:"user_id"`
	Params V5ApiWebPublicUserIntegrationEventControllerIndexParams
}

type V5ApiWebPublicUserIntegrationEventControllerIndexResponseObject interface {
	VisitV5ApiWebPublicUserIntegrationEventControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicUserIntegrationEventControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicUserIntegrationEventControllerIndex200JSONResponse) VisitV5ApiWebPublicUserIntegrationEventControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserIntegrationEventControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicUserIntegrationEventControllerIndex401JSONResponse) VisitV5ApiWebPublicUserIntegrationEventControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserIntegrationEventControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicUserIntegrationEventControllerIndex404JSONResponse) VisitV5ApiWebPublicUserIntegrationEventControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserIntegrationEventControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicUserIntegrationEventControllerIndex422JSONResponse) VisitV5ApiWebPublicUserIntegrationEventControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserTeamControllerIndexRequestObject struct {
	UserId string `json:"user_id"`
	Params V5ApiWebPublicUserTeamControllerIndexParams
}

type V5ApiWebPublicUserTeamControllerIndexResponseObject interface {
	VisitV5ApiWebPublicUserTeamControllerIndexResponse(w http.ResponseWriter) error
}

type V5ApiWebPublicUserTeamControllerIndex200JSONResponse PaginatedResponse

func (response V5ApiWebPublicUserTeamControllerIndex200JSONResponse) VisitV5ApiWebPublicUserTeamControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserTeamControllerIndex401JSONResponse Unauthorized

func (response V5ApiWebPublicUserTeamControllerIndex401JSONResponse) VisitV5ApiWebPublicUserTeamControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserTeamControllerIndex404JSONResponse NotFound

func (response V5ApiWebPublicUserTeamControllerIndex404JSONResponse) VisitV5ApiWebPublicUserTeamControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebPublicUserTeamControllerIndex422JSONResponse UnprocessableEntity

func (response V5ApiWebPublicUserTeamControllerIndex422JSONResponse) VisitV5ApiWebPublicUserTeamControllerIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebOauthAuthorizeRequestObject struct {
	Params V5ApiWebOauthAuthorizeParams
	Body   *V5ApiWebOauthAuthorizeJSONRequestBody
}

type V5ApiWebOauthAuthorizeResponseObject interface {
	VisitV5ApiWebOauthAuthorizeResponse(w http.ResponseWriter) error
}

type V5ApiWebOauthAuthorize200JSONResponse map[string]interface{}

func (response V5ApiWebOauthAuthorize200JSONResponse) VisitV5ApiWebOauthAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebOauthTokenRequestObject struct {
	Params V5ApiWebOauthTokenParams
	Body   *V5ApiWebOauthTokenJSONRequestBody
}

type V5ApiWebOauthTokenResponseObject interface {
	VisitV5ApiWebOauthTokenResponse(w http.ResponseWriter) error
}

type V5ApiWebOauthToken200JSONResponse map[string]interface{}

func (response V5ApiWebOauthToken200JSONResponse) VisitV5ApiWebOauthTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebOauthToken401JSONResponse Unauthorized

func (response V5ApiWebOauthToken401JSONResponse) VisitV5ApiWebOauthTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebOauthToken404JSONResponse NotFound

func (response V5ApiWebOauthToken404JSONResponse) VisitV5ApiWebOauthTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebOauthToken422JSONResponse map[string]interface{}

func (response V5ApiWebOauthToken422JSONResponse) VisitV5ApiWebOauthTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get by ID
	// (GET /api/public/campaigns/{campaign_id})
	V5ApiWebPublicCampaignControllerShow(ctx context.Context, request V5ApiWebPublicCampaignControllerShowRequestObject) (V5ApiWebPublicCampaignControllerShowResponseObject, error)
	// List donations
	// (GET /api/public/campaigns/{campaign_id}/donations)
	V5ApiWebPublicCampaignDonationControllerIndex(ctx context.Context, request V5ApiWebPublicCampaignDonationControllerIndexRequestObject) (V5ApiWebPublicCampaignDonationControllerIndexResponseObject, error)
	// List top donors
	// (GET /api/public/campaigns/{campaign_id}/donor_leaderboard)
	V5ApiWebPublicCampaignLeaderboardControllerDonor(ctx context.Context, request V5ApiWebPublicCampaignLeaderboardControllerDonorRequestObject) (V5ApiWebPublicCampaignLeaderboardControllerDonorResponseObject, error)
	// List milestones
	// (GET /api/public/campaigns/{campaign_id}/milestones)
	V5ApiWebPublicCampaignMilestoneControllerIndex(ctx context.Context, request V5ApiWebPublicCampaignMilestoneControllerIndexRequestObject) (V5ApiWebPublicCampaignMilestoneControllerIndexResponseObject, error)
	// List polls
	// (GET /api/public/campaigns/{campaign_id}/polls)
	V5ApiWebPublicCampaignPollControllerIndex(ctx context.Context, request V5ApiWebPublicCampaignPollControllerIndexRequestObject) (V5ApiWebPublicCampaignPollControllerIndexResponseObject, error)
	// List rewards
	// (GET /api/public/campaigns/{campaign_id}/rewards)
	V5ApiWebPublicCampaignRewardControllerIndex(ctx context.Context, request V5ApiWebPublicCampaignRewardControllerIndexRequestObject) (V5ApiWebPublicCampaignRewardControllerIndexResponseObject, error)
	// List schedules
	// (GET /api/public/campaigns/{campaign_id}/schedules)
	V5ApiWebPublicCampaignScheduleControllerIndex(ctx context.Context, request V5ApiWebPublicCampaignScheduleControllerIndexRequestObject) (V5ApiWebPublicCampaignScheduleControllerIndexResponseObject, error)
	// List targets
	// (GET /api/public/campaigns/{campaign_id}/targets)
	V5ApiWebPublicCampaignChallengeControllerIndex(ctx context.Context, request V5ApiWebPublicCampaignChallengeControllerIndexRequestObject) (V5ApiWebPublicCampaignChallengeControllerIndexResponseObject, error)
	// Get by ID
	// (GET /api/public/causes/{cause_id})
	V5ApiWebPublicCauseControllerShow(ctx context.Context, request V5ApiWebPublicCauseControllerShowRequestObject) (V5ApiWebPublicCauseControllerShowResponseObject, error)
	// List campaigns
	// (GET /api/public/causes/{cause_id}/campaigns)
	V5ApiWebPublicCauseCampaignControllerIndex(ctx context.Context, request V5ApiWebPublicCauseCampaignControllerIndexRequestObject) (V5ApiWebPublicCauseCampaignControllerIndexResponseObject, error)
	// List configured leaderboards
	// (GET /api/public/causes/{cause_id}/configured_leaderboard)
	V5ApiWebPublicCauseLeaderboardControllerConfigured(ctx context.Context, request V5ApiWebPublicCauseLeaderboardControllerConfiguredRequestObject) (V5ApiWebPublicCauseLeaderboardControllerConfiguredResponseObject, error)
	// List top donors
	// (GET /api/public/causes/{cause_id}/donor_leaderboard)
	V5ApiWebPublicCauseLeaderboardControllerDonor(ctx context.Context, request V5ApiWebPublicCauseLeaderboardControllerDonorRequestObject) (V5ApiWebPublicCauseLeaderboardControllerDonorResponseObject, error)
	// List fundraising events
	// (GET /api/public/causes/{cause_id}/fundraising_events)
	V5ApiWebPublicCauseFundraisingEventControllerIndex(ctx context.Context, request V5ApiWebPublicCauseFundraisingEventControllerIndexRequestObject) (V5ApiWebPublicCauseFundraisingEventControllerIndexResponseObject, error)
	// List top teams
	// (GET /api/public/causes/{cause_id}/team_leaderboard)
	V5ApiWebPublicCauseLeaderboardControllerTeam(ctx context.Context, request V5ApiWebPublicCauseLeaderboardControllerTeamRequestObject) (V5ApiWebPublicCauseLeaderboardControllerTeamResponseObject, error)
	// List top fundraisers
	// (GET /api/public/causes/{cause_id}/user_leaderboard)
	V5ApiWebPublicCauseLeaderboardControllerUser(ctx context.Context, request V5ApiWebPublicCauseLeaderboardControllerUserRequestObject) (V5ApiWebPublicCauseLeaderboardControllerUserResponseObject, error)
	// Gets the current user for an access token
	// (GET /api/public/current-user)
	V5ApiWebPublicUserControllerCurrentUser(ctx context.Context, request V5ApiWebPublicUserControllerCurrentUserRequestObject) (V5ApiWebPublicUserControllerCurrentUserResponseObject, error)
	// Get by ID
	// (GET /api/public/fundraising_events/{fundraising_event_id})
	V5ApiWebPublicFundraisingEventControllerShow(ctx context.Context, request V5ApiWebPublicFundraisingEventControllerShowRequestObject) (V5ApiWebPublicFundraisingEventControllerShowResponseObject, error)
	// List configured leaderboards
	// (GET /api/public/fundraising_events/{fundraising_event_id}/configured_leaderboard)
	V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured(ctx context.Context, request V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredRequestObject) (V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponseObject, error)
	// List top donors
	// (GET /api/public/fundraising_events/{fundraising_event_id}/donor_leaderboard)
	V5ApiWebPublicFundraisingEventLeaderboardControllerDonor(ctx context.Context, request V5ApiWebPublicFundraisingEventLeaderboardControllerDonorRequestObject) (V5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponseObject, error)
	// List campaigns
	// (GET /api/public/fundraising_events/{fundraising_event_id}/supporting_events)
	V5ApiWebPublicFundraisingEventSupportingEventControllerIndex(ctx context.Context, request V5ApiWebPublicFundraisingEventSupportingEventControllerIndexRequestObject) (V5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponseObject, error)
	// List top teams fitness distances
	// (GET /api/public/fundraising_events/{fundraising_event_id}/team_fitness_distance_leaderboard)
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance(ctx context.Context, request V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceRequestObject) (V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponseObject, error)
	// List top teams fitness times
	// (GET /api/public/fundraising_events/{fundraising_event_id}/team_fitness_time_leaderboard)
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime(ctx context.Context, request V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeRequestObject) (V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponseObject, error)
	// List top teams
	// (GET /api/public/fundraising_events/{fundraising_event_id}/team_leaderboard)
	V5ApiWebPublicFundraisingEventLeaderboardControllerTeam(ctx context.Context, request V5ApiWebPublicFundraisingEventLeaderboardControllerTeamRequestObject) (V5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponseObject, error)
	// List top users fitness distances
	// (GET /api/public/fundraising_events/{fundraising_event_id}/user_fitness_distance_leaderboard)
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance(ctx context.Context, request V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceRequestObject) (V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponseObject, error)
	// List top users fitness times
	// (GET /api/public/fundraising_events/{fundraising_event_id}/user_fitness_time_leaderboard)
	V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime(ctx context.Context, request V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeRequestObject) (V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponseObject, error)
	// List top fundraisers
	// (GET /api/public/fundraising_events/{fundraising_event_id}/user_leaderboard)
	V5ApiWebPublicFundraisingEventLeaderboardControllerUser(ctx context.Context, request V5ApiWebPublicFundraisingEventLeaderboardControllerUserRequestObject) (V5ApiWebPublicFundraisingEventLeaderboardControllerUserResponseObject, error)
	// Get by ID
	// (GET /api/public/team_campaigns/{team_campaign_id})
	V5ApiWebPublicTeamCampaignControllerShow(ctx context.Context, request V5ApiWebPublicTeamCampaignControllerShowRequestObject) (V5ApiWebPublicTeamCampaignControllerShowResponseObject, error)
	// List donations
	// (GET /api/public/team_campaigns/{team_campaign_id}/donations)
	V5ApiWebPublicTeamCampaignDonationControllerIndex(ctx context.Context, request V5ApiWebPublicTeamCampaignDonationControllerIndexRequestObject) (V5ApiWebPublicTeamCampaignDonationControllerIndexResponseObject, error)
	// List top donors
	// (GET /api/public/team_campaigns/{team_campaign_id}/donor_leaderboards)
	V5ApiWebPublicTeamCampaignLeaderboardControllerDonor(ctx context.Context, request V5ApiWebPublicTeamCampaignLeaderboardControllerDonorRequestObject) (V5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponseObject, error)
	// List milestones
	// (GET /api/public/team_campaigns/{team_campaign_id}/milestones)
	V5ApiWebPublicTeamCampaignMilestoneControllerIndex(ctx context.Context, request V5ApiWebPublicTeamCampaignMilestoneControllerIndexRequestObject) (V5ApiWebPublicTeamCampaignMilestoneControllerIndexResponseObject, error)
	// List polls
	// (GET /api/public/team_campaigns/{team_campaign_id}/polls)
	V5ApiWebPublicTeamCampaignPollControllerIndex(ctx context.Context, request V5ApiWebPublicTeamCampaignPollControllerIndexRequestObject) (V5ApiWebPublicTeamCampaignPollControllerIndexResponseObject, error)
	// List rewards
	// (GET /api/public/team_campaigns/{team_campaign_id}/rewards)
	V5ApiWebPublicTeamCampaignRewardControllerIndex(ctx context.Context, request V5ApiWebPublicTeamCampaignRewardControllerIndexRequestObject) (V5ApiWebPublicTeamCampaignRewardControllerIndexResponseObject, error)
	// List schedules
	// (GET /api/public/team_campaigns/{team_campaign_id}/schedules)
	V5ApiWebPublicTeamCampaignScheduleControllerIndex(ctx context.Context, request V5ApiWebPublicTeamCampaignScheduleControllerIndexRequestObject) (V5ApiWebPublicTeamCampaignScheduleControllerIndexResponseObject, error)
	// List supporting campaigns
	// (GET /api/public/team_campaigns/{team_campaign_id}/supporting_campaigns)
	V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex(ctx context.Context, request V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexRequestObject) (V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponseObject, error)
	// List targets
	// (GET /api/public/team_campaigns/{team_campaign_id}/targets)
	V5ApiWebPublicTeamCampaignChallengeControllerIndex(ctx context.Context, request V5ApiWebPublicTeamCampaignChallengeControllerIndexRequestObject) (V5ApiWebPublicTeamCampaignChallengeControllerIndexResponseObject, error)
	// List top fundraisers
	// (GET /api/public/team_campaigns/{team_campaign_id}/user_leaderboards)
	V5ApiWebPublicTeamCampaignLeaderboardControllerUser(ctx context.Context, request V5ApiWebPublicTeamCampaignLeaderboardControllerUserRequestObject) (V5ApiWebPublicTeamCampaignLeaderboardControllerUserResponseObject, error)
	// Get by ID
	// (GET /api/public/teams/{team_id})
	V5ApiWebPublicTeamControllerShow(ctx context.Context, request V5ApiWebPublicTeamControllerShowRequestObject) (V5ApiWebPublicTeamControllerShowResponseObject, error)
	// List team members
	// (GET /api/public/teams/{team_id}/members)
	V5ApiWebPublicTeamMemberControllerIndex(ctx context.Context, request V5ApiWebPublicTeamMemberControllerIndexRequestObject) (V5ApiWebPublicTeamMemberControllerIndexResponseObject, error)
	// List Team Campaigns
	// (GET /api/public/teams/{team_id}/team_campaigns)
	V5ApiWebPublicTeamTeamCampaignControllerIndex(ctx context.Context, request V5ApiWebPublicTeamTeamCampaignControllerIndexRequestObject) (V5ApiWebPublicTeamTeamCampaignControllerIndexResponseObject, error)
	// Get by ID
	// (GET /api/public/users/{user_id})
	V5ApiWebPublicUserControllerShow(ctx context.Context, request V5ApiWebPublicUserControllerShowRequestObject) (V5ApiWebPublicUserControllerShowResponseObject, error)
	// List campaigns
	// (GET /api/public/users/{user_id}/campaigns)
	V5ApiWebPublicUserCampaignControllerIndex(ctx context.Context, request V5ApiWebPublicUserCampaignControllerIndexRequestObject) (V5ApiWebPublicUserCampaignControllerIndexResponseObject, error)
	// List all Campaigns and Team Campaigns by User ID
	// (GET /api/public/users/{user_id}/integration_events)
	V5ApiWebPublicUserIntegrationEventControllerIndex(ctx context.Context, request V5ApiWebPublicUserIntegrationEventControllerIndexRequestObject) (V5ApiWebPublicUserIntegrationEventControllerIndexResponseObject, error)
	// List teams
	// (GET /api/public/users/{user_id}/teams)
	V5ApiWebPublicUserTeamControllerIndex(ctx context.Context, request V5ApiWebPublicUserTeamControllerIndexRequestObject) (V5ApiWebPublicUserTeamControllerIndexResponseObject, error)
	// Authorize
	// (GET /oauth/authorize)
	V5ApiWebOauthAuthorize(ctx context.Context, request V5ApiWebOauthAuthorizeRequestObject) (V5ApiWebOauthAuthorizeResponseObject, error)
	// Token
	// (POST /oauth/token)
	V5ApiWebOauthToken(ctx context.Context, request V5ApiWebOauthTokenRequestObject) (V5ApiWebOauthTokenResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// V5ApiWebPublicCampaignControllerShow operation middleware
func (sh *strictHandler) V5ApiWebPublicCampaignControllerShow(ctx echo.Context, campaignId string) error {
	var request V5ApiWebPublicCampaignControllerShowRequestObject

	request.CampaignId = campaignId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicCampaignControllerShow(ctx.Request().Context(), request.(V5ApiWebPublicCampaignControllerShowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicCampaignControllerShow")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicCampaignControllerShowResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicCampaignControllerShowResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicCampaignDonationControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicCampaignDonationControllerIndex(ctx echo.Context, campaignId string, params V5ApiWebPublicCampaignDonationControllerIndexParams) error {
	var request V5ApiWebPublicCampaignDonationControllerIndexRequestObject

	request.CampaignId = campaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicCampaignDonationControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicCampaignDonationControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicCampaignDonationControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicCampaignDonationControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicCampaignDonationControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicCampaignLeaderboardControllerDonor operation middleware
func (sh *strictHandler) V5ApiWebPublicCampaignLeaderboardControllerDonor(ctx echo.Context, campaignId string, params V5ApiWebPublicCampaignLeaderboardControllerDonorParams) error {
	var request V5ApiWebPublicCampaignLeaderboardControllerDonorRequestObject

	request.CampaignId = campaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicCampaignLeaderboardControllerDonor(ctx.Request().Context(), request.(V5ApiWebPublicCampaignLeaderboardControllerDonorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicCampaignLeaderboardControllerDonor")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicCampaignLeaderboardControllerDonorResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicCampaignLeaderboardControllerDonorResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicCampaignMilestoneControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicCampaignMilestoneControllerIndex(ctx echo.Context, campaignId string, params V5ApiWebPublicCampaignMilestoneControllerIndexParams) error {
	var request V5ApiWebPublicCampaignMilestoneControllerIndexRequestObject

	request.CampaignId = campaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicCampaignMilestoneControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicCampaignMilestoneControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicCampaignMilestoneControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicCampaignMilestoneControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicCampaignMilestoneControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicCampaignPollControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicCampaignPollControllerIndex(ctx echo.Context, campaignId string, params V5ApiWebPublicCampaignPollControllerIndexParams) error {
	var request V5ApiWebPublicCampaignPollControllerIndexRequestObject

	request.CampaignId = campaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicCampaignPollControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicCampaignPollControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicCampaignPollControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicCampaignPollControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicCampaignPollControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicCampaignRewardControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicCampaignRewardControllerIndex(ctx echo.Context, campaignId string, params V5ApiWebPublicCampaignRewardControllerIndexParams) error {
	var request V5ApiWebPublicCampaignRewardControllerIndexRequestObject

	request.CampaignId = campaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicCampaignRewardControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicCampaignRewardControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicCampaignRewardControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicCampaignRewardControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicCampaignRewardControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicCampaignScheduleControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicCampaignScheduleControllerIndex(ctx echo.Context, campaignId string, params V5ApiWebPublicCampaignScheduleControllerIndexParams) error {
	var request V5ApiWebPublicCampaignScheduleControllerIndexRequestObject

	request.CampaignId = campaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicCampaignScheduleControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicCampaignScheduleControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicCampaignScheduleControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicCampaignScheduleControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicCampaignScheduleControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicCampaignChallengeControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicCampaignChallengeControllerIndex(ctx echo.Context, campaignId string, params V5ApiWebPublicCampaignChallengeControllerIndexParams) error {
	var request V5ApiWebPublicCampaignChallengeControllerIndexRequestObject

	request.CampaignId = campaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicCampaignChallengeControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicCampaignChallengeControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicCampaignChallengeControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicCampaignChallengeControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicCampaignChallengeControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicCauseControllerShow operation middleware
func (sh *strictHandler) V5ApiWebPublicCauseControllerShow(ctx echo.Context, causeId string) error {
	var request V5ApiWebPublicCauseControllerShowRequestObject

	request.CauseId = causeId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicCauseControllerShow(ctx.Request().Context(), request.(V5ApiWebPublicCauseControllerShowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicCauseControllerShow")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicCauseControllerShowResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicCauseControllerShowResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicCauseCampaignControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicCauseCampaignControllerIndex(ctx echo.Context, causeId string, params V5ApiWebPublicCauseCampaignControllerIndexParams) error {
	var request V5ApiWebPublicCauseCampaignControllerIndexRequestObject

	request.CauseId = causeId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicCauseCampaignControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicCauseCampaignControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicCauseCampaignControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicCauseCampaignControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicCauseCampaignControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicCauseLeaderboardControllerConfigured operation middleware
func (sh *strictHandler) V5ApiWebPublicCauseLeaderboardControllerConfigured(ctx echo.Context, causeId string) error {
	var request V5ApiWebPublicCauseLeaderboardControllerConfiguredRequestObject

	request.CauseId = causeId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicCauseLeaderboardControllerConfigured(ctx.Request().Context(), request.(V5ApiWebPublicCauseLeaderboardControllerConfiguredRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicCauseLeaderboardControllerConfigured")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicCauseLeaderboardControllerConfiguredResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicCauseLeaderboardControllerConfiguredResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicCauseLeaderboardControllerDonor operation middleware
func (sh *strictHandler) V5ApiWebPublicCauseLeaderboardControllerDonor(ctx echo.Context, causeId string, params V5ApiWebPublicCauseLeaderboardControllerDonorParams) error {
	var request V5ApiWebPublicCauseLeaderboardControllerDonorRequestObject

	request.CauseId = causeId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicCauseLeaderboardControllerDonor(ctx.Request().Context(), request.(V5ApiWebPublicCauseLeaderboardControllerDonorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicCauseLeaderboardControllerDonor")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicCauseLeaderboardControllerDonorResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicCauseLeaderboardControllerDonorResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicCauseFundraisingEventControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicCauseFundraisingEventControllerIndex(ctx echo.Context, causeId string, params V5ApiWebPublicCauseFundraisingEventControllerIndexParams) error {
	var request V5ApiWebPublicCauseFundraisingEventControllerIndexRequestObject

	request.CauseId = causeId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicCauseFundraisingEventControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicCauseFundraisingEventControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicCauseFundraisingEventControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicCauseFundraisingEventControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicCauseFundraisingEventControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicCauseLeaderboardControllerTeam operation middleware
func (sh *strictHandler) V5ApiWebPublicCauseLeaderboardControllerTeam(ctx echo.Context, causeId string, params V5ApiWebPublicCauseLeaderboardControllerTeamParams) error {
	var request V5ApiWebPublicCauseLeaderboardControllerTeamRequestObject

	request.CauseId = causeId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicCauseLeaderboardControllerTeam(ctx.Request().Context(), request.(V5ApiWebPublicCauseLeaderboardControllerTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicCauseLeaderboardControllerTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicCauseLeaderboardControllerTeamResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicCauseLeaderboardControllerTeamResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicCauseLeaderboardControllerUser operation middleware
func (sh *strictHandler) V5ApiWebPublicCauseLeaderboardControllerUser(ctx echo.Context, causeId string, params V5ApiWebPublicCauseLeaderboardControllerUserParams) error {
	var request V5ApiWebPublicCauseLeaderboardControllerUserRequestObject

	request.CauseId = causeId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicCauseLeaderboardControllerUser(ctx.Request().Context(), request.(V5ApiWebPublicCauseLeaderboardControllerUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicCauseLeaderboardControllerUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicCauseLeaderboardControllerUserResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicCauseLeaderboardControllerUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicUserControllerCurrentUser operation middleware
func (sh *strictHandler) V5ApiWebPublicUserControllerCurrentUser(ctx echo.Context) error {
	var request V5ApiWebPublicUserControllerCurrentUserRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicUserControllerCurrentUser(ctx.Request().Context(), request.(V5ApiWebPublicUserControllerCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicUserControllerCurrentUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicUserControllerCurrentUserResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicUserControllerCurrentUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicFundraisingEventControllerShow operation middleware
func (sh *strictHandler) V5ApiWebPublicFundraisingEventControllerShow(ctx echo.Context, fundraisingEventId string) error {
	var request V5ApiWebPublicFundraisingEventControllerShowRequestObject

	request.FundraisingEventId = fundraisingEventId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicFundraisingEventControllerShow(ctx.Request().Context(), request.(V5ApiWebPublicFundraisingEventControllerShowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicFundraisingEventControllerShow")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicFundraisingEventControllerShowResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicFundraisingEventControllerShowResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured operation middleware
func (sh *strictHandler) V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured(ctx echo.Context, fundraisingEventId string) error {
	var request V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredRequestObject

	request.FundraisingEventId = fundraisingEventId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured(ctx.Request().Context(), request.(V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicFundraisingEventLeaderboardControllerConfigured")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerDonor operation middleware
func (sh *strictHandler) V5ApiWebPublicFundraisingEventLeaderboardControllerDonor(ctx echo.Context, fundraisingEventId string, params V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParams) error {
	var request V5ApiWebPublicFundraisingEventLeaderboardControllerDonorRequestObject

	request.FundraisingEventId = fundraisingEventId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicFundraisingEventLeaderboardControllerDonor(ctx.Request().Context(), request.(V5ApiWebPublicFundraisingEventLeaderboardControllerDonorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicFundraisingEventLeaderboardControllerDonor")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicFundraisingEventSupportingEventControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicFundraisingEventSupportingEventControllerIndex(ctx echo.Context, fundraisingEventId string, params V5ApiWebPublicFundraisingEventSupportingEventControllerIndexParams) error {
	var request V5ApiWebPublicFundraisingEventSupportingEventControllerIndexRequestObject

	request.FundraisingEventId = fundraisingEventId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicFundraisingEventSupportingEventControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicFundraisingEventSupportingEventControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicFundraisingEventSupportingEventControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance operation middleware
func (sh *strictHandler) V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance(ctx echo.Context, fundraisingEventId string, params V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParams) error {
	var request V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceRequestObject

	request.FundraisingEventId = fundraisingEventId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance(ctx.Request().Context(), request.(V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistance")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime operation middleware
func (sh *strictHandler) V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime(ctx echo.Context, fundraisingEventId string, params V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParams) error {
	var request V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeRequestObject

	request.FundraisingEventId = fundraisingEventId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime(ctx.Request().Context(), request.(V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTime")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeam operation middleware
func (sh *strictHandler) V5ApiWebPublicFundraisingEventLeaderboardControllerTeam(ctx echo.Context, fundraisingEventId string, params V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParams) error {
	var request V5ApiWebPublicFundraisingEventLeaderboardControllerTeamRequestObject

	request.FundraisingEventId = fundraisingEventId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicFundraisingEventLeaderboardControllerTeam(ctx.Request().Context(), request.(V5ApiWebPublicFundraisingEventLeaderboardControllerTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicFundraisingEventLeaderboardControllerTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance operation middleware
func (sh *strictHandler) V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance(ctx echo.Context, fundraisingEventId string, params V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParams) error {
	var request V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceRequestObject

	request.FundraisingEventId = fundraisingEventId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance(ctx.Request().Context(), request.(V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistance")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime operation middleware
func (sh *strictHandler) V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime(ctx echo.Context, fundraisingEventId string, params V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParams) error {
	var request V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeRequestObject

	request.FundraisingEventId = fundraisingEventId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime(ctx.Request().Context(), request.(V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTime")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUser operation middleware
func (sh *strictHandler) V5ApiWebPublicFundraisingEventLeaderboardControllerUser(ctx echo.Context, fundraisingEventId string, params V5ApiWebPublicFundraisingEventLeaderboardControllerUserParams) error {
	var request V5ApiWebPublicFundraisingEventLeaderboardControllerUserRequestObject

	request.FundraisingEventId = fundraisingEventId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicFundraisingEventLeaderboardControllerUser(ctx.Request().Context(), request.(V5ApiWebPublicFundraisingEventLeaderboardControllerUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicFundraisingEventLeaderboardControllerUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicFundraisingEventLeaderboardControllerUserResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicTeamCampaignControllerShow operation middleware
func (sh *strictHandler) V5ApiWebPublicTeamCampaignControllerShow(ctx echo.Context, teamCampaignId string) error {
	var request V5ApiWebPublicTeamCampaignControllerShowRequestObject

	request.TeamCampaignId = teamCampaignId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicTeamCampaignControllerShow(ctx.Request().Context(), request.(V5ApiWebPublicTeamCampaignControllerShowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicTeamCampaignControllerShow")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicTeamCampaignControllerShowResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicTeamCampaignControllerShowResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicTeamCampaignDonationControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicTeamCampaignDonationControllerIndex(ctx echo.Context, teamCampaignId string, params V5ApiWebPublicTeamCampaignDonationControllerIndexParams) error {
	var request V5ApiWebPublicTeamCampaignDonationControllerIndexRequestObject

	request.TeamCampaignId = teamCampaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicTeamCampaignDonationControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicTeamCampaignDonationControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicTeamCampaignDonationControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicTeamCampaignDonationControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicTeamCampaignDonationControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicTeamCampaignLeaderboardControllerDonor operation middleware
func (sh *strictHandler) V5ApiWebPublicTeamCampaignLeaderboardControllerDonor(ctx echo.Context, teamCampaignId string, params V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParams) error {
	var request V5ApiWebPublicTeamCampaignLeaderboardControllerDonorRequestObject

	request.TeamCampaignId = teamCampaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicTeamCampaignLeaderboardControllerDonor(ctx.Request().Context(), request.(V5ApiWebPublicTeamCampaignLeaderboardControllerDonorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicTeamCampaignLeaderboardControllerDonor")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicTeamCampaignMilestoneControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicTeamCampaignMilestoneControllerIndex(ctx echo.Context, teamCampaignId string, params V5ApiWebPublicTeamCampaignMilestoneControllerIndexParams) error {
	var request V5ApiWebPublicTeamCampaignMilestoneControllerIndexRequestObject

	request.TeamCampaignId = teamCampaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicTeamCampaignMilestoneControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicTeamCampaignMilestoneControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicTeamCampaignMilestoneControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicTeamCampaignMilestoneControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicTeamCampaignPollControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicTeamCampaignPollControllerIndex(ctx echo.Context, teamCampaignId string, params V5ApiWebPublicTeamCampaignPollControllerIndexParams) error {
	var request V5ApiWebPublicTeamCampaignPollControllerIndexRequestObject

	request.TeamCampaignId = teamCampaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicTeamCampaignPollControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicTeamCampaignPollControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicTeamCampaignPollControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicTeamCampaignPollControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicTeamCampaignPollControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicTeamCampaignRewardControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicTeamCampaignRewardControllerIndex(ctx echo.Context, teamCampaignId string, params V5ApiWebPublicTeamCampaignRewardControllerIndexParams) error {
	var request V5ApiWebPublicTeamCampaignRewardControllerIndexRequestObject

	request.TeamCampaignId = teamCampaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicTeamCampaignRewardControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicTeamCampaignRewardControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicTeamCampaignRewardControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicTeamCampaignRewardControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicTeamCampaignRewardControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicTeamCampaignScheduleControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicTeamCampaignScheduleControllerIndex(ctx echo.Context, teamCampaignId string, params V5ApiWebPublicTeamCampaignScheduleControllerIndexParams) error {
	var request V5ApiWebPublicTeamCampaignScheduleControllerIndexRequestObject

	request.TeamCampaignId = teamCampaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicTeamCampaignScheduleControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicTeamCampaignScheduleControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicTeamCampaignScheduleControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicTeamCampaignScheduleControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicTeamCampaignScheduleControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex(ctx echo.Context, teamCampaignId string, params V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexParams) error {
	var request V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexRequestObject

	request.TeamCampaignId = teamCampaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicTeamCampaignChallengeControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicTeamCampaignChallengeControllerIndex(ctx echo.Context, teamCampaignId string, params V5ApiWebPublicTeamCampaignChallengeControllerIndexParams) error {
	var request V5ApiWebPublicTeamCampaignChallengeControllerIndexRequestObject

	request.TeamCampaignId = teamCampaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicTeamCampaignChallengeControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicTeamCampaignChallengeControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicTeamCampaignChallengeControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicTeamCampaignChallengeControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicTeamCampaignChallengeControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicTeamCampaignLeaderboardControllerUser operation middleware
func (sh *strictHandler) V5ApiWebPublicTeamCampaignLeaderboardControllerUser(ctx echo.Context, teamCampaignId string, params V5ApiWebPublicTeamCampaignLeaderboardControllerUserParams) error {
	var request V5ApiWebPublicTeamCampaignLeaderboardControllerUserRequestObject

	request.TeamCampaignId = teamCampaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicTeamCampaignLeaderboardControllerUser(ctx.Request().Context(), request.(V5ApiWebPublicTeamCampaignLeaderboardControllerUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicTeamCampaignLeaderboardControllerUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicTeamCampaignLeaderboardControllerUserResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicTeamControllerShow operation middleware
func (sh *strictHandler) V5ApiWebPublicTeamControllerShow(ctx echo.Context, teamId string) error {
	var request V5ApiWebPublicTeamControllerShowRequestObject

	request.TeamId = teamId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicTeamControllerShow(ctx.Request().Context(), request.(V5ApiWebPublicTeamControllerShowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicTeamControllerShow")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicTeamControllerShowResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicTeamControllerShowResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicTeamMemberControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicTeamMemberControllerIndex(ctx echo.Context, teamId string, params V5ApiWebPublicTeamMemberControllerIndexParams) error {
	var request V5ApiWebPublicTeamMemberControllerIndexRequestObject

	request.TeamId = teamId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicTeamMemberControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicTeamMemberControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicTeamMemberControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicTeamMemberControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicTeamMemberControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicTeamTeamCampaignControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicTeamTeamCampaignControllerIndex(ctx echo.Context, teamId string, params V5ApiWebPublicTeamTeamCampaignControllerIndexParams) error {
	var request V5ApiWebPublicTeamTeamCampaignControllerIndexRequestObject

	request.TeamId = teamId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicTeamTeamCampaignControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicTeamTeamCampaignControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicTeamTeamCampaignControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicTeamTeamCampaignControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicTeamTeamCampaignControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicUserControllerShow operation middleware
func (sh *strictHandler) V5ApiWebPublicUserControllerShow(ctx echo.Context, userId string) error {
	var request V5ApiWebPublicUserControllerShowRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicUserControllerShow(ctx.Request().Context(), request.(V5ApiWebPublicUserControllerShowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicUserControllerShow")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicUserControllerShowResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicUserControllerShowResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicUserCampaignControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicUserCampaignControllerIndex(ctx echo.Context, userId string, params V5ApiWebPublicUserCampaignControllerIndexParams) error {
	var request V5ApiWebPublicUserCampaignControllerIndexRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicUserCampaignControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicUserCampaignControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicUserCampaignControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicUserCampaignControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicUserCampaignControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicUserIntegrationEventControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicUserIntegrationEventControllerIndex(ctx echo.Context, userId string, params V5ApiWebPublicUserIntegrationEventControllerIndexParams) error {
	var request V5ApiWebPublicUserIntegrationEventControllerIndexRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicUserIntegrationEventControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicUserIntegrationEventControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicUserIntegrationEventControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicUserIntegrationEventControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicUserIntegrationEventControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebPublicUserTeamControllerIndex operation middleware
func (sh *strictHandler) V5ApiWebPublicUserTeamControllerIndex(ctx echo.Context, userId string, params V5ApiWebPublicUserTeamControllerIndexParams) error {
	var request V5ApiWebPublicUserTeamControllerIndexRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebPublicUserTeamControllerIndex(ctx.Request().Context(), request.(V5ApiWebPublicUserTeamControllerIndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebPublicUserTeamControllerIndex")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebPublicUserTeamControllerIndexResponseObject); ok {
		return validResponse.VisitV5ApiWebPublicUserTeamControllerIndexResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebOauthAuthorize operation middleware
func (sh *strictHandler) V5ApiWebOauthAuthorize(ctx echo.Context, params V5ApiWebOauthAuthorizeParams) error {
	var request V5ApiWebOauthAuthorizeRequestObject

	request.Params = params

	var body V5ApiWebOauthAuthorizeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebOauthAuthorize(ctx.Request().Context(), request.(V5ApiWebOauthAuthorizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebOauthAuthorize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebOauthAuthorizeResponseObject); ok {
		return validResponse.VisitV5ApiWebOauthAuthorizeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebOauthToken operation middleware
func (sh *strictHandler) V5ApiWebOauthToken(ctx echo.Context, params V5ApiWebOauthTokenParams) error {
	var request V5ApiWebOauthTokenRequestObject

	request.Params = params

	var body V5ApiWebOauthTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebOauthToken(ctx.Request().Context(), request.(V5ApiWebOauthTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebOauthToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebOauthTokenResponseObject); ok {
		return validResponse.VisitV5ApiWebOauthTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9fXfjNtIn+lUQzj5nZrKGDZLgm++Zs9OTTs/0M0m6b7d75m6Svm6QKMpsU6SGpOwo",
	"2f7uewCQFClREmXLr8F/tkjipVCo+lUVqvCbEeXTWZ5BVpXG6W9GAeUsz0qQ/0TzooCs+lBCIf/Nswqy",
	"SvzJZrM0iViV5NnJ5zLPxG9ldAFTJv76HwXExqnxh5Nl2yfqaXnyzbLNN+Fn48uXL0cGhzIqkplozTg1",
	"3tVDMMSj+jPR6jdsOmPJRPYFv7DpLAU5lGk+z6rzgiUl8OWoo4Vxanx4/9I4Mq5YOgfj1DB969i2jC9H",
	"BrtiFZNzYmllnBrvL/KiQsmUTQB1BoPmJXDESsTSCoqMVckVoAp+qY6NI+MCkslFZZxahBwZZREZp8ZF",
	"Vc3K05OTKkmrJF4cR/n0RDZantQDPv48mxhHxnXCqwv56drsv1+gF9dQ5lNA1wCXkHEU1RMXvU5ylo6c",
	"5AUrzwX5+FwQKmZpCUdGwo1Tg7mR5/PIxrbnhZjasYlZGLs4BIh9Egbc9WzjyEiyEooK+DkTNLKIZWNi",
	"YeKemf4pMU+Jc+wTJwjsH40jI4UJixbnonnbJsQnDvGPjIxNoT+ndhGPjLxIJknG0vM95jSbh2lSXmwf",
	"k0ssV4ypgCop6lezeZoeGWU6nxinxnSBmRoPjpbjKStWzUvjdNmJ+HE+m+VFlWST82oxE4PJ8gyMI6PK",
	"K5ae34T55jPOql0zsImYwbxIN7DVX+el4MgpnAxPZl7v2UfM6W+LPIayTPKMpai6TqroApVVAWwKBbq+",
	"yFGaXEKJogtWJNXiK6Nm3jAKLUqcAFOX+pjaboBDJ7AwBIxGJg2pY0KfIV0n8DzqOm7LAA3xxALnUaLY",
	"jydllBe8M7v6l+PJpJmocWTELIIwzy+NU2P5Y5KVFZsUbNr7tczYLLqQ67z8sUouq+brpFI/ycmv/VSJ",
	"Jex8eQ1hmVQwTH7jyFjk82oeiucfvvl39Hby73D+7/l//39O8Y9/T91/hvRf14L9bsG4u7mx5rx63wsh",
	"/4P484v6Wa6G4XqcRz642OEmwRRIiIMgcjGYcRAFVkgo8eReL/IZFFWidNHagFmavomN05+2q5vv8wwW",
	"xpePq8x3dgFINYlUk4gnBURVukDhAlUXSdmK3b7C2NbZa7EDjFVG/22l6xeolJuwu/1YmM+rlW6PjFri",
	"lFWRZBPRbiMpbz/3WrUj0SLKY1SJ3zoT7iuP1Sn8+wKqCyhQXqAsXxk3umAlaj5FSQXTcjmVMM9TYLKH",
	"hO8i51shh6PXXL7d1UUDw8l6M0DXrERRAULOii2bF1O5C4XgxVUi+XSNuB2JsX1c38kX1bgUp/82QGHx",
	"RFF2x6Ku6cHbr27T5Mbl7evRcfRMWVmhrm4cR9auFh7XUf3Fph6EKmehYMuqmMNAj0rIb6fee/HOl6XS",
	"H1pB9WxoDSGbT43Tn4x51qVH9+9mDh+HxreKKX7bKZxWZRJiGUcsTdGyrfZZ2RlgDVbkyCLxR5FcsQqk",
	"xrpKKjjPs3QxOMgNauLQUne/ia2gp93sxKFiSVqiayhAMXD9/Wj2lUpv7Lw/FOngrJMSJaUcWTxPUzQv",
	"UhTnRW+ox42S3KM38fYwkcUjVF2wCuXXWdkn8fHaHuqq57GdL4Xz4ABev5QzZPuORAqM/8zl3jn9aUXr",
	"t3q432OtF1eUltQwfcXRlfG16F4VvyuisSe+asnSCo31nTy8bXpMqziqXuol3cUWTCpBBuObNV2Rh58h",
	"qgSDNM/eMjHmCnhrLI9fuLVPxQp2DGrOKiZb0Za1tqy1Za0ta21ZPyvL+uORMYWKKTH/m8FiRY3w72nG",
	"/vH/Tq75X/5iHBkhxHkBzfZOk2lSGacm+bJmmDftKEtvl/e3Y4PUu54VBVuI/7uD6vp39xvfmt9Aff7b",
	"sA1cChSWSyCWwS8Vmondm8QoqRD8kpRVOcbeaIayu49ZAVdJPi9v1k89yaFuBGaCsgKOChAbC6l320ay",
	"+TQUYHEVXknitDNouvi4hjy+rMOTdRyxBa90Ycoa1NBIQyMNjTQ00tBI45khjY1YYRxEGFA623XNfE3B",
	"PKqtE+VZxSIVP+e8gLI8T5MMTCFCLMsx0d/YhdD1UKCzeZHNkksxz+6rViMEo6QSq/y3QgwNnRUA6F9J",
	"mrKJ+CISbFGI52/mFRToXSI4C6YsEWtfj+KvUMTHFZQCJMzyUvBTlHOQ4owQU4reidrk32Y8LwSFG/5q",
	"3lRM1pcI317nl+gdlNEc0Kt8nnF5SAD96dt3r/6MrvPiskSsEL8rd1heQFmhaZ5nKI+R7EmApVmRT/MK",
	"5DvTvKwQxDFEcllkB7Mir8T/eXaM/jtPxAJKz+EFpDPxd5WjcJ6kHDEUgtiEqumvpPa9giKbQlYpVjYt",
	"bFPH9fygkU6x7TnMDTzMhGCnvh1hn0QWjoI4YLZvc6DBKNVqOrbn0BXVSq3A9akXtJp1mGJC9AhmPV8h",
	"77tXNRWTrEcuQQ5JLtFcabRiEq7zS1zI1nHca/33JjR36myxXL7340Dscb/oX2efr7TT3/VDQD5OirJC",
	"4oU2bKNaQ/XHYwyFFZExGNuAKM/4bTtSYmjQ7kmqxW0abkTYYNvq4S2ar2XhWmQ2Q/JJ05RSC3FeoHie",
	"calni6a74zH99ATr0FTUC0i8cIvpNJJ62DIUz27c+JcBRbuiBsY6nr+pP/tGfLUtKh0tFEHm/QDRvITj",
	"EcH1jWH1eQnDMfWePhii4fIVlPBOPFCOaKDJuwltz0t4DHFtNZAaKK7HNtd11t7nH9RCHTbM2yq7rW+r",
	"t8ZHGQUlbhtiXHXJNBGuRous7rf12FeXf8dGvdbXaRndUlToEaEXnppvwd+7HD0aj2s8rvG4xuN74fEb",
	"+hHm9RnynuTa6kHIsziZzAvg3wHjUIQ5KwYgwfI11HmvRN8ll4D+ZRu9aHoFYi1++ti488Rf1wCX6UL8",
	"vTazJOPJVcLnihNGxVQ6Y/hWypmB2IoaxQEbbKZwsCa76zS4DGPXa4cG2rEeN2O1wQHvnNJWVuyC5TUO",
	"fP3+DaKW6SGWzi5YCFUS9bFzlwdrtTBjYh+Lr396gX/8+Jv9xeiMr9vdANZaydp4Aspd+6l/r37qjVt4",
	"1aLIM9jnlN3mkOgPdcPi1W2b+mWescYmWstgGkmYJj5U++Etj8YesbDHogBTEnMcWjzAlEIYRsw0KbgS",
	"gYq+tgesLOJ4lsBGPM/y4jzKp1OZ7GX8E2CG5jMJZibC9pSA56v2zXoBzgRw/EGtS+MuSbLJOVy10I7E",
	"JPQiEuM4EEAuMG0ceGGIY2BhxD3X55bbbD1qcscGamIXghhTAgwHMQsxuCSwIyvwwoCsADnf8VzXsW0B",
	"oNNUdelExCIhs3FAXdGMGeDAtCNsc4fbnuMDJbFRf5BLaVETFjzmmSTGIQEf0whsHNg+wZRS5rqRzyhj",
	"EpNfs4KrT6KQ05C4FiaMhpj6HuDADW0cgG9bdhwHdqSikWXFkkzshDqeW7FiAjWJIA7MKHRt7AU+xTQM",
	"Q+ybQDC4Pokg4pxRQSKhxbqUdWPPjEgYY9uPKaY2pdg3uY0hMk2L+NTz7WhTTsVBj/XyXJ4JOF5j1QOc",
	"K339cvUoe9MdqvKhQ619tl9zZiRTKCs2nYlWrxujntd7VLlamgaOb3wYfWU3rQ7iB2FVpRBXKFwg+e74",
	"Rod9NIqALE0X6CopkzAF1a502RwjeRh5yhYoBFRCJayVP77I8mwxzeflH1ESr1OBNY9RXqBpzqFgNUnW",
	"Bja88Q+69p0ukOxiBxMcaAAfsuQ/c0CvOWRVEidQtCe4G1od39jZ1oqrQx++fpun6ZFY0zxTvsMlqYTc",
	"GjwJvioK72JMb+STfUfWEbaHHtQ72fS+A+qI8p0ZUp09lZSIoRkrKsHSDE3zrLpIFx0+2igBOulTHaVx",
	"aGKcyab3JcaKSjrcoCSRROv1dt96bG44gcDoK6MVzbAqpHvydYNMq/2sXc9qs4vXtlCXc7tM013EVfp1",
	"HK4tatyCKO8xH0DjVI1T7xinPuQJ5Xa36RPKT/WE8mahOCBBvy2KvOhKzf7Q38gXUQHVvMiAoyRDL96+",
	"RiC+KvueXvmb+CNOIOVls/BTKEs2AYX1VUChc1CVErrOsG1L/Z+bdmW4KqmkM+tt33vccPh6OucKK29Y",
	"yiVd2mGvh28v5lOWoQIYFy2g+s3axRcKXC44SU5i0EjYlnP7j7Ozt73E27qhZTtJVsFkgFOaAbftD/JI",
	"9wvVcEfT9nlhiFmuaiNO15/RZ9f12XV9dl3HBJ5v/Zlx4YFORtv2F8+ATZcvd7XOlTI6h7WNzvTWOkzr",
	"MK3DtA7TOuwpZXorraadKE/VibIBfAzAlFd5ESacQzYemfQN7XXP/6rXRUZnu5Mv83kRAUpKGV1haZpf",
	"y+gECgGxKIKyPJLBjJrBUNKc2C5lnsWsgGkyn6IYWDUvoDze05OznHLXk2N36dd9ZZ1kS7/zoEvhUZ2S",
	"ZvMSlNTxLB77EJrYhsARUifGzGMudi3XpjygYAVgjDuW/B1UfyzRBCr09dflLM/z/HLx9ddfydJlvFzV",
	"6/uBNjnWIHYdLwooZsQDTKnHMaOc4tAPGYtCYsaWNQqfUSfwA28Fn1mea7uB7dEWn72f5flllYdQIIvI",
	"pkfgLOoEAbW24qyybRfX7ZYVK6ohEg2CrzvEWHL0wXaMJbkHi7mcrM7k1ml2LWMeOgAqDwqvFi1bO3dw",
	"/GC5UMNDuU3SzVqLQ37bdmcOJF2xCpozNEPNIfHt2iGa+y9xOjTPDSdGDpu+tU6Rx1aidBQLjKwbOjzb",
	"uywgOtzjPVcSbcTyQF6pitmydPdOUe0M7ZXdwx1fzHRotW9X1fSeC4auE+4glUMHTpc9+hKiQ+pgY1Zh",
	"ozR3pRU2wr4trjkur3Bc9cx6o3QqaY6sm9lxm65h6BE4+36cqRq9a/T+/NH7QzqX1va+9jM9VT/TbhE9",
	"Qq4/qaxzLZG1RL4TiXyj3NV1Ubplc27bk8ovM2T7yCcoyaJ0zkFh2ItqmqLlYFEGEZQlKxZCtBWQcSgQ",
	"y9DPc0LsKJlO5B+AKjbpe2ofwX5elbMr+iIdELHv11wxtXtC9jZGdjejX235H/L3XnNb0gnao3Q1BVZb",
	"eyUsjQ/vvltrb208NUXWzCrx896jWdUqabVcLzXSpsOOOfC6Jt0aX66lnt8i+fJRKZILWAo3dWyd0Tj0",
	"gWESeAzTyPJwaMYuJo5nB8x0HN8jRitgm9MEZ8CmW0XO/2xC4zJ1fksS4TqOkMJygwGfLtcFgVgYQZxx",
	"Z25qb8GOAzffAyvnBfAPWVIZXz7uf4uTIvAgDLtgmRRpaJayaOlDk/PYzOENbNrXxbjZgyeW5I/lxmpM",
	"d+15kFk5syKPkxSOx+fitN4ISeHatdCEvvtW/truHbHDH18yjJYbD2svjqloou3FJ2Ev7t7sgxKiDofI",
	"0c8KiKQDt57pqiUl3kXZfApFEqFl4rFq7hi9jtEinxeIzWZCMHKYCbyaVShvfPoJpPwIzVJgJaBpMilY",
	"JXQhSnidf32dpCkKxd5vxtKcUJBscAVF2UGFL96+7h1QsCzL8og0lpZUqSc4oGt6enAdi8otgjjESZZk",
	"EzSVb8vEjlpvJxmaJFeQoXkm17SzOeQvp8Y0kfctdeWeaRo7sfF8cEDTerhtd3VUQlUsFZx6maT5FBTr",
	"yK6HwhH1YFZbF9ChEnZGq4y2l+OrB6Fa6+ilHlEHOO77JIWyyrO1gtSyaFpDj72UiErecyghDExM4zDG",
	"1CYRDqIoxrHvg+O5ceAyc4QZ7h4Tx3fWzHDqUMf33MBupf13wIoMMXSWXJ7ll4izLAKUJlfwlbHTopWd",
	"uJY7VFG3JsOItOlpQ0mZN62+G0qIvoNiFvX+a0dwbNxHPYGV7raFl7/PZVHStnjFklYPHF1u2X8zNN0S",
	"jds+rQPU2Gy4qBUC44JbwwUxl1t9mxy4H1D6+5QuDwktl6uvMeVTxZRbNunQlpaKYzeQ6iONJYxqN2Nv",
	"D4/YotvR1LKBfY6eHQwodWa1DpYkxQZI+UNeqYToez85HLFMAIwQkCzCeny4VO62KFwzt6F5DxWM00UV",
	"dfKJLqq4d1HFQWC1XSgIpD1rPpP1HIr625WSDjWwumt8sTYnjSOeFI7ofieXqaP7RkGKt3majnAU7Lfb",
	"lbA1Y05N38e2Q0NM7cjBvu272I4Z8xybO77njUP0NHAscwXRmxa1HI9azjhErw7BljdOOZYzsrkfOJwF",
	"OAzcGNModHDAQoIdQhmJzDAmPB41I9M3qbOaeOt4pucTu5N4ezsbRXTi0x9lsEpP+dlP+eOIl63A9T3n",
	"Pp1iBzuO/UKZMu/6kdxZnqb1AXftIDuYg6wVliMdEcu6mkMI4hG525bHu8d53RpCbPK/SeW5Qam+mW2s",
	"t/07ksODJzaemVDo9Le/WOh8/NCCoTuUQ/jOV6d2gO18o128ee++mW2qbiqePpjfXINtjTz1lJ8N2H7I",
	"GJFEKNqt81TDQ8NqaEhfNcBlbcSbccub+lTRhw+vX/ZubfL9kIY0Jph7McHUCSgOADi2nNi3A+LaFu8p",
	"8PlclRFvBt2MZYCsqtr94U6mDGUbN2GAJE3RLIkuEUNlnk1klq7MVE0qNMvzIl1syFHpbHibWqaUKjFL",
	"ivMpKy6hOm/jVmOlHFgBtyPqY8vlDqauxzEzuYNDiHwOruP53BFSrsljeATxlhES16aW46xIXNdzPdf0",
	"7aXEfS8oztB7sQJvG6r/Z86ySl5caRIx0ub/8wKmTAYxjVPL3pQg0x+Dp/JWdspum1q+fTvfh6plfk+n",
	"gWrjJgPgqsBQlLJkqkwcNZCdpTc2ZnvU34+5r3pT5Y1VtF/TBtRBuZsVPRjcZLc/UyWaRapZJJttT81v",
	"oMN9WI2qa2UwLvf9mO7qLIGPQ6Pex/SsV+yBrU6lETYanEtJsfphL8Ojv6C1tr8QQlJpZ+CobWlMUtKQ",
	"QFodQPvorgaxpa7HhrVUX9x4/z2uk3GbqkKsS4nGE1AnYu30CHRWYWCh+3Uihr0H7xrBsYbE1JPHfuZO",
	"4yaNm/bETQ9pxr5r8Y42ZJ+kIbtJKg4J0DxdPZGmcsUcGkQkoJhEsYepxyn2aRzhgLmuG0W+TyxmHBmX",
	"IMSKvP2nnM+gOGd8mmTLJLIzYFP0QvyWlFXBKnWf/cpV2HvlSF4Oncl8nUkhk6JLWCwxXy6zVZq8koFB",
	"yp96/8jKu1OWsYkkeudao5UfpyBXaygjZRh5/au+o3FZi60d4XZVLVXppTxXKVvu6sXe98tFfd9WMu8f",
	"NewOSG3KbYrFPvYoIcrNp4oRM4ea4ATY9pwIU+4BZh7jGDixCbd86jhj3N6q3SBYdXsHQeB7gWW1zPOP",
	"PE04W6D3M4gSlqLvkitQitPYJXRlH6ZljxC69avegLG61dxrqrOjpm486kOowxl7bQfiC5Rk6PX7N75L",
	"TFQDv5sCUB3AP0gAfw/DoV1J9c34tXxUxsMmU2FcgHA33G/F1xbRdi+QXwvMHQLzIVFqyyUapz5VnLp5",
	"Mw/t/LpG63DZCibrVZTpfKIsz0YFqVScJh2kl/7R/IXrepWtJPz/f2L41//zAv/4f/DH//k/OrGW9+rF",
	"NWq+X6YmrNWDVUfSr5PqAl2xQq6YymRAzfn7Utr8aZJdrp5K/33kOWxPd2qJsErcl+oBSrKrpAKx/OOc",
	"3g2x1oog1U/QW7GhOnkSu3HUktbrhkn9aK8Gl8u0FmOon+zVXLPA6xfjy7D8Xk3VjLHWlMoK2repYXmq",
	"HuzVWMuJayh9Xlb5FNXPx3JJy7irzf1v9UAWBsogRTKWu6O5VfRUM3SHF7ss1Fn9duVaui+ptpzycrRd",
	"CKUk0oAYVZd+Hy4mfJPDKNvdmZbtBbbZgqggYi5j4GM/JhRTx/ZwYBMHg+9GbhS6wAkddWhFtOt5axdw",
	"URJQ1yIHOrRi2T4h5HaBT3X/8v0GPqscXST1JQGq/3s7Vr7sbrRFXFNoW/jz/q1dNaj9Td16Mg9s59aj",
	"OMRR1M6E7iJStXoudV8DdNjorOXiRon52GNMWg4Py+GHNFHPWsmmDdQnaaBu2vpDUgIU/n+s13utaOK6",
	"uN+kyOczlMcoLhLpXe7eMSEUW53Uj6p8InHKcSMOOPeIZRGOIQhsTElIcGgHHuaeS1wWB4ybzkpZGNt2",
	"gyCwzE0lBuuc/145QZ33f5C8/121XfcrmLo1LiK2aJe7S4jUYTghzOs6phtLiW7EbWPDgwe+OWlH3dW9",
	"7g1q+Xjr2+qtu7xnZ1uxXmFzowJmBZSQ1eUKP7x/eXz/RWY33mzTjz5IYDcUZajvoGnt4OF7Z/pFaGs5",
	"NCjb28uYb59j+LiuKRh96UCjGkAqgwulTQ9yxzaElsVNj+OQUcA05hZmLAhxFDOL27HpmdY4aElN0/Hp",
	"CrQMfN+yLeIu9c6beYG6uufOb9qWI3NNb+uNBfm8wF0xPfa+bSU9m7u2O5dw34Q3qxrGaOyisctjxS7y",
	"AI5cyDggvgnAccRsF1NuBjiw7RhbALHHgZgm2Hd5l4fa1+oG/S0TkLtZ3uWxeY/fdfb2+g17PCkgqtLF",
	"0hEnRGF3QPte1PoQd6T2Bn3r+1H7JBiBTu/2GtPtw1nTqTt9y0nZtiaPyrfnUZQ7Y8jPfBeXpPam9egu",
	"SF0l+nrFjlWIcPvFb5rsrX5PNoy7kHWdsnd5Get6b/d8EevYW1A7q3m7y097kOu30ZeYtjTaenfpcnA1",
	"lpOjisQfRXKl7oZV0e7zPEsX2wY4CP/u4IpWli023sPaQslR3Z41l0es9yoh+sot3UuJPyAVW4Bw6AvD",
	"9x/J/V6W29+QB7kot9/k478kdxUP7Chqsrwwd+stufXduD11O7quUU9djL06V12X25U3WzZ3vdmWnH+T",
	"i3Z7Xo4dXpB7vHpH+1a0b0X7VrRvRftWtG/lpr6VBz0E0FWr+ijAkz0KsBX97IBLu2r/a6CjgY4GOhro",
	"aKCjgc6tgM6NrobvI5QNOm+XqvteJcQPlBJww8B2Iwsw55aFaUwpDn2LYhtsm9kWN30rHpUF6QS2bbur",
	"tTxMQinxj4wiT0FVQb3rAgYfR9zxT0jgBLLuyLxUZNEX/OgLfh7jBT93FuBTJTLuL7xXC4D1iG+alFUv",
	"oqpG9scSqU+ORpbFyYeTjce70TsUuZnvvBYlu29cGqohstlR3ZCh7x0u6/omHWVQC/mtKuBeXMNasWjF",
	"ohXL41IsD+1kq4WTdrE9ZRfbJh2yQeXcTxxSuzG0G+NRujEeWuRqYfukhe1oMft07y7WAvJ3LSBv7A9d",
	"2yvbtsiHjM2ri7xIfoX7uuK8QEkpD3Uve973bvPeqLvXm5vdua+8NTD3WZFHotEwhW/b6vH3QoILJlNJ",
	"rxIuMxWvWJpwNGMFm0IFRbmLIL8ZjeNcbtufjLoJ4+OXPp3qGcr6rd82tcxbellWn17r9BgiW5FuLmbW",
	"O9g4upzZVqvtpJlqU+2sHW+RDrmaPpRrznztZ9B+hkfgZ3iw3HUxmseXu65T0A94eFz2vUxB73LgEKvU",
	"HNHh2B21jEbmsI9PXu+MsOOql8J7SOmUUDxdKK+F/O84SjkGt7ehr+4+2IzbhUCEaC6Y5b1ooVYnNdpl",
	"jYaQrcukSGBFd1+JiRlfvsigaJwPxP4gjYTRVzsNztT80b8c9OLta8TzaApZxZSeSSo4/jn7OetKJ5X9",
	"JV8W8qn+/hi9lqUBk6yCrL6rLOzlxBYSA1cLxOEKUkHEUr40T1IuP5sUstdSVaVt2hXd/wG9mUEmepQl",
	"pOMkkm+KcYEcyLwENbjB99Cf3rx4/2fRGYc4yUC++eLt62P0fV4AEmQqpqyXc7uppYhlYlpxPs84YhX6",
	"qWGj8ppNJlAcJ/lJ2f3i5OOfdr7y53qSL+bVBWTVcnb10sjZvRFPkXVMEIsEjkdVfgmZJCFbfqfIUZsi",
	"5TH63/kcTdkCTaBCLEMvZrO0mcon1c65bOcTkolkgjNXHhyjn7Ozfh9HaJHP1RVBGdTX0slIuuiCdbpI",
	"sh6LydZfsvIizFnBj2Qi2LxUyzGBDAom9GpUgCxiyNJS9P1z9oc/oL9DJfPEVqbwQlHiTAwU/VzzwxSq",
	"i1wOqp50d0Rd2qE4T9P8WjHON2kCWYW+WXaO3og5W2hSsKxCcZpfq+G0JJW6pfaOCVXaMfGazfWTbKMe",
	"4LcZn+VJVn380x8qNjnJxaM/d8fZH5usNKv2gmiKzZI2Nf54lSyKtF1ybKCGghIbqSCZzJKM2Aob9PcO",
	"AeRNevIDeRdUiRhqeBnVGhPlMbrIr0WXBVRFAleAXvQGqPqdSx+X6lHNZzkhmWacc2hlT9O2ZDopV5rX",
	"lqORkr4U2l9dl3j8c4Z77PL65SkyLZuK39+BIiZqduf19fVxo/OFLijqF8TL7yEqoEL/hMUpYiWP5bCE",
	"fJskmVyhI1SCEAiKvImA5WGRX4t/VsSs2sZ9As+L9Bi9zqJ0zkFsraLhxtcv1SZRXKYUBhJiXtD4kyDQ",
	"JzHd/8yhWHQdDEsmTbqtNlNCH969Rkksd/EFuwI0FWKwumDCooBj9AKVMxYBKkG0KfZkc1SljPIZlLJl",
	"lpZSwjPOgR+JFYcrKI5Eu1leNR3zIzn4T0ppfFINtKvI5lUuBG/E0nSBSkghquS6/Zx9+vTp56xZmyuH",
	"zZLjrqaWm+ekdQH9r5/nhFhuJMl2nvC/yGWWvzV0Oxd0+4tkqvp3RYzzeZH8RXb0X/aL/7Je/Zf1aoUV",
	"/st61TKD/FRO4i9qSvVIf85exBUUqEwm8jLApE5zrQeYZJOjJZJvpt+0KlQkiy4Fq8h1ii7yUrpTOssl",
	"5QBbXeolHxyhKM+q+irCZvso9VvlKAaBSqUY6WzBdUJv2gT/S7QmicrCiEPczvqs6am8yOcpF7OasbLu",
	"VU6mhOIKCjlBuUXKlV1bVjArGxnafCK32yUsjtD1RSLwtGpdMFYICH6Z5XUXS0By3MiQb/LsClRasRjd",
	"N2J0Z/mKCFrKyI6UEo2tvXSEGJrlZdUoVTSdl3IUU8aXIEpKtA/vvhP7WP4S5nzRHO4SphwrYGXiyt0n",
	"OOVVXkzRS1ax+raVY/RDXkErWOXmkNndktI1DJN/N0PnKC7yqeogKcpKUnW5vCv7Ilvn/a0CcG3xpUpU",
	"G6qHS8+VzG54oxZ5kt2VrxSxpRwTZlGfJKftgH8TfyGE0M9GF4z8bJyKX0KXOYFlU5dSyoEFnukR3/bA",
	"JJT7zNn1/GfjqGm8PgB4zirVtDrZZGLLOzODU9s6JfaPndfhl1lSQHmeyJF4wpBsHhUQF1BedMeZff78",
	"eVFN7byCajopPk8TQhaf2XV6DfTXyaL69XPyy8Ka/jq1Fnb2mV1HE9MyLdsMgsAObGZ3OpYSR7Vai53l",
	"M9mjXAz1grIHfjYECb90Nqqs293Rv0KIZ/l1i9JZKbbZtcC3qVLfU3YJHSwpDw3KV1tQ8tNJXR4GC8FW",
	"Axvx54nA9wrd/st5MUv+DeGx8ikdix32TZ5VRZ6mUBzXDcgrzv6MoMZIR0tHyCfx5FNzY4W8WVW53RsU",
	"9EFige6eLaVA5kpx9nXtBTCutLIUNf84O3vbTHG5X3qfnKK/SYoiIfztqMeP4pclw3+rds/pjnZuzb9N",
	"f+3c3ynm60xerhUTCDwRYLa/8kl78vVIbkj1sXrW6KYmfqEgX/+d2ghqlIsClhlc93tp6243FYTyTIpu",
	"sYOOhUTmufSsHSk+W5GytWCtoWKRKp5bCh5UgnzpU2/jfVqyZn/Za9Kr5mod1PsSlawnRtvKN428Gscd",
	"fTFwI/a4tdho+lMjel/7El4K0zdRBvZJM7JOwEVu07dNZZcrKErlLjCPiSwuNIOMzRLj1LCPyTExjowZ",
	"qy6ka+KEzZITJZbacE558lsniPVFvFZf77B68bPYy8KMaGt5hAuUVKW6wqKVIq95M8R/Q6hG2WSALGXJ",
	"+4v8Wg6sAcLrt2Utr8eT7SfiJzGR5QHYbuyt6yZVrnTl0xHzWHWpfhQvK1aRVLEIkf6oPKugvhBhaYqc",
	"fC47Xhz2XPMvV+rxL9rExGsAiQa7RWoOkm3J3MjzeWRj2/NCTO3YxCyMXRwCxD4JA+569oiz186xT5wg",
	"sNeqwRPiE4csL+jtzOmu8yzFmFyi8rE25llOF20K1sgMyySbnDfHeFSW5Z1llKkZ2GR7RtkyNjw8GX2+",
	"XIcEHlXcV17OqzI/PM4jH1zscJNgCiTEQRC5GMw4iAIrJJR4NwwiDCZC7k6C/LLGm8tjLUcGJeZeOmpr",
	"lKN7IGeg3/5z0Tc9WN8/5NWrfJ4N9vtDXqH64ZFBLeuAE14/UTM4785rqH1PyN/plBWCK/8OlUA9EpFU",
	"bCJgSwtDjI/i3REQ64TnmYqfdMDWGPz0sv5uiaNeZxx+2QNIobxASigdHFUdbQKMeZYuUDtl5R6RvswQ",
	"hIWSC0EtHWvy7GnnkNJU3Qo0dMXt8sySRSwTmyYm1plJTy166jjHvmkGlqy/IOcnPXGdCTY9nrenXe9w",
	"VvJk7X1OqjnKe4M5qSPD5dqY1dnlDT0foL+1ld/a4bhVG/qyOQu9/JBDzOapPDA+dMpEnZZGeazK29aB",
	"knmRoRkU8uz2MfrT9+yXU2QS8mfjyJiyX5LpfCraI0fGNMnq/1ppL6OnMsh8WyvkbmrljdTCvWOPhmt5",
	"NPaIhT0WBZiSmOPQ4gGmFMIwYqZJwTWOujy6EXVaxPEsweQ8z/LiPMqnU0kN458AMzSfKSYpgFXoOi8u",
	"v2rfbJMiywr9oEBA54B2fQW/Sr+MSehFJMZxYNmYBqaNAy8McQwsjLjn+txyG5xHTe7YQE3sQhBjSoDh",
	"IGYhBpcEdmQFXhiQlaPbvuO5rmPbR8YsT1PVpRMRi4TMxgF1RTNmgAPTjrDNHW57jg+UxEb9QS4ZsCYs",
	"eMwzSYxDAj6mEdg4sH2CKaXMdSOfUcakkL5mBVefRCGnIXEtTBgNMfU9wIEb2jgA37bsOA7sSJkUZcWS",
	"TAj22ihTd66pRiAOzCh0bewFPsU0DEPsm0AwuD6JIOKcUbepFdmhrBt7ZkTCGNt+TDG1KcW+yW0MkWla",
	"xKeeb0cPm3LSaFCddvJk006aJRyReqIh9ROA1N8lZbUEUrfF1Xlxnsq4gTy4sie+/m755RJivxSN7oLY",
	"8khqMgVUsGwiY43zEgTI6wymOTijjmwuwR5L0w1IR7SoPD5dzNKU+OYsSZVFDpfyj2meVRfyrwWwQv1R",
	"yRLFaTpQ6nsdl92Zx1UjTo04b4k4H5UP8QKW7lyFKRmNQx8YJoHHMI0sD4dm7GLieHbATMfxPWJsSuZ7",
	"Esm6Hdn4bVYVC42gniyCWl3KJ46k7MG+b9D1q7wIE84hG+q381DDt1X4VuUzJMHX7fDbNEmhrPIM9nWM",
	"ft98+LQ8ozyRhOVoOfFj9FIBBKn6pWneBYuqqyGkUZ/iPG/aHEIr7aVMO9yay+Gs+jXrsOH9+WrrU1+3",
	"9tTuntJ9OWqbc2w3B7GPbI2aUPLzWaM2OK5d6dqwuYlhEwmzo5HWe5k5yofrUEIYmJjGYYypTSIcRFGM",
	"Y98Hx3PjwGXmqELkxPGdwFs5GkMd6vieG9jtYn4HTB74PUsuz/JLxFkWAUqTK/jKGFF7mDi+rD38oOZJ",
	"iwC0XfJk7ZJ2DbVr9xnZBh1QfxvbYJan6b5mwds8TZ+WRaBhg4YNPdiw3+E4dTbRjDk1fR/bDg0xtSMH",
	"+7bvYjtmzHNs7vieNw490MCxzBX0YFrUcjxqOePQg4pmlze+jU/OyOZ+4HAW4DBwY0yj0MEBCwl2CGUk",
	"MsOY8HjUjEzfpM7qUWHHMz2f2J2jwrfDQ6ITn/5oiD2gp/zsp/xxxMtW4Pqe88AQWWhDjY6fLDoWy6eB",
	"8TMCxgrR3gYTq3Nf+6Lid/IrjYs1Ln7+7rShe/2b5J4kTdEsiS4RQ2UuK9ZwJHN0E7E3c3WABjJebgEB",
	"NrVMiTRilhTnU1ZcQnVeD2M88gEr4HZEfWy53MHU9ThmJndwCJHPwXU8nzuC5WQFwsdxAmIECrOp5Tir",
	"V6J4rueavr1EYe9VVZz3YgXeNlT/z5zVdWBNIkba/H9ewFQVzjBOLVtmyxXVjvXxgh9H4TmbWr79wBBN",
	"iWYN0p4sSFMLqGHaM4JpDci6DVBrMqD3hWrv6+80WNNg7YmAtd7slf7ZhqHsY48Sorw1KoeEOdQEJ8C2",
	"50SYcg8w8xjHwIlNuOVTx/FGXckm2g2CVe9lEAS+F1hWu5j/yNOEs4UqHslS9F1yBQojGrvwhezDtOwR",
	"+KJ+1XtgfNHIE40wnizCaJZQY4xnhDGW+OA2KENl8O2LMb65YGkK2USDDA0yfgceoZuEp7Y7gSzbC2yz",
	"BTBBxFzGwMd+TCimju3hwCYOBt+N3Ch0gRM6Kowl2vW8tbpGlATUtciBwliW7RNCHhiWnEnBpUHJ070K",
	"Ti6ghiTPKaWjBhPjAMm8BIlG5iWMLiI4L2GPCoLzEvYtHyg62IxH1FAfvHDgY0prlHWpIzURzgsoy/M0",
	"ycAUusOyHBP9jV0IUkCBzuZFNksuxRbvvmo1wjeS3nvjb4UYGjorANC/kjRlE5CFQOYyhfDUeDMX6O1d",
	"IoxtmLIklaVs5Cj+CkV8XEFZycIYZcVSWbNY6jFCTLlwE7XU32Y8l9c2N7q8eVMp9D5ffHudX6J3UEZz",
	"UBuxvnji23ev/ixripSIFfLSCFXxuJCVpPM8E9BK9iQk96zIp3mlcOA0LysEcQwSlSDZwazIK3X10zH6",
	"7zwRCygDTBeQzsTf7XUaDIVQCSLIpr+S1RWvoMimbVUN08I2dVzPDxqIEduew9zAw0xodOrbEfZJZOEo",
	"iANm+zYHGowqnWg6tufQ1fPhVuD61AvavTJMMYFNBbOer5D33auaiknWI5cghySXaK5c3mEJ1/klLmTr",
	"OO61/nsrirezJqNYLt/78cZ16eYlrBSlm5eglfUzrEgnVnq3ml56EnYq7PZNtCxG2mjxUbp7rQTwSCfD",
	"wZW49ihoj8KmWhS6gLMu4KwLOOsCzrqA8zMp4PyQXs1lHWjt13yifs02kVB7Np+PZ3Np9NzEYsqzOJnM",
	"BSAYrjPIYVZAJHil4e2dttFg2cFv2o522UjKkyqtoEfs6JQVzE5/+tiACvFXXbnw9KePN/RotDTqkLC/",
	"gYfe0GWudJmrm0mOlpu6dT1vJEduXqp0k8D4XdUp1V4h7RXSFUp1hVJdoVRXKNXQTUO3m1YoHYnW1m4S",
	"KfeBa6+WX38rPtYxMI12HiXaeVRnkRq+PjU8i8c+hCa2IXAwBRJj5jEXu5ZrUx5QsAJ5qmjE4Z/voPpj",
	"Ka9B/vrrcpbneX65+PrrrzYkeu8XKVOnf2PX8aKAYkY8wJR6HDPKKQ79kLEoJGZsWaOCYtQJ/LXSjZbn",
	"2m5ge3SZPj3L88sqFzxqEdn0iOAWdYKAWluDW2XbLq7bHc6F2hTxusPAlhx9sD2wJbkHi7mcrM7kQTHq",
	"qirQGPXJYtTVpdQxgmcEFzuAD9WA7wawUd6PdkgfX22OaxefBr0a9GoXn3bxafikXXzaxacxW+PiEyLq",
	"RlBNHiw7JFT7UIKOxmqopqGahmoaqmmopqGahmoaqnWhWuNig1EhWSnwK9wkpOwoLiBeQ3FeIFar61ww",
	"AWKRGBuq8kvIdiQtCvjWOYyruq8x3ZBSHCJe+14zfPm99vQ+otTZUgrpenk6bJOt8krDn5IB19hz/XzA",
	"yW9rv40sjLHmeh5dJGPzOYMx9TI6XyP5+UZIPzQzXUdDx6517PrOY9c3SpNYDzpvCWPq6OWzKwexJq9v",
	"ocAOnQC1yn63zIVaV56b8qIeoxLTOVLatHv+OVIHFUc3zaMaJXeeSUqVgJdllU9HefPv0QzQXn7t5dde",
	"fu3l115+7eXXUPB3knN1UPTXqau1lpY1rOo71QuXJQ3DBdoAe/aBkO/bpm+S5fVqzXIdda+CBmEahOly",
	"iLocoi6HqMsh6nKIuhzi4y2HqPMdn7Z9qJMcfw+FEA9qnsn8xzipMijLc56UFcsiuCtn/Rmw6SvV18u6",
	"K+2611ajthq161677rXrXrvuteteu+73zqVENXxDDXy7H7AoMdTdA8WzZKpBogaJGiRqkKhBogaJGiRq",
	"kKhB4i1AokA1dwsQ7xATaiCogaAGghoIaiCogaAGghoIaiB4m8prB4V+8pzLfQWSP5RQ6ECyhoYaGmpo",
	"qKGhhoYaGmpoqKHhLaChQG/3GEjugcW7DCR3gKIOJGuQqEGiBokaJGqQqEGiBokaJN4OJN5pIPmGdz2M",
	"xoQaCGogqIGgBoIaCGogqIGgBoIaCN7+XogRAFCeD2xzmk9+6/0/svi+kKRtOZXRhffFV81H+xXd7/e3",
	"CTetzuTBi+0/9epA48vtt9yIqnwCF0pIHqReEISWxU2P45BRwDTmFmYsCHEUM4vbsemZFh1RL8g9pqbp",
	"+HSlXlDg+5ZtEddsmejNvEBdwHDnVYPkyFzT21o1KJ8XuAtOxtYOUuqxqRvUKSh0E95UdbcfdV2fZuUm",
	"RT6fCVgfFwlkvOxdFxLnRVPZR7JrdQHFcVPih3OPWBbhGILAxpSEBId24GHuucRlccC46fR5iNq2GwSB",
	"ZW4CnPUa9sClLv5zkOI/K4hd8agq9RMHxDcBOI6Y7WLKzQAHth1jCyD2OBDTBPsua2mpfa2qgW2ZgNzN",
	"8haLzXv8ZiXtu+q2B0i7D3SBmmd3j0UPBt0A/53wPJOzKkd6/Lr89LL+ds+ynqsAb0RJz1uhvY0eqzxL",
	"F6glAKouWIUu2BWgECBDYi1TEFbjmkdrmk/lPRoZev3+je8SU6iZKat6bkmLWCY2TUysM5OeWvTUcY59",
	"0wwsiUuGPFptj+fjvGK3m9WqX/DOJ3UA36L2ZWpf5nZF3RUSp4ZreTT2iIU9FgWYkpjj0OIBphTCMGKm",
	"ScE1jro8urFWpkUcT96xpa7XiPLpVFLD+CfADM1nikkKYBW6zovLr9o36yU+g7JCP6jShYNO/1ODxCT0",
	"IhLjOLBsTAPTxoEXhjgGFkbcc31uuQ10pSZ3bKAmdiGIMSXAcBCzEINLAjuyAi8MyAp09R3PdR3bPjJm",
	"eZqqLp2IWCRkNg6oK5oRwMm0I2xzh9ue4wMlsVF/kEsGrAkLHvNMEuOQgI9pBDYObJ9gSilz3chnlDEp",
	"pK9ZwdUnUchpSFwLE0ZDTH0PcOCGNg7Aty07jgM7UsZMWbEkE4K9Ng0rVkygJhHEgRmFro29wKeYhmGI",
	"fRMIBtcnEUScMypIJPVFh7Ju7JkRCWNs+zHF1KYU+ya3MUSmaRGfer4dPawPuNGl2vf7ZH2/zRLqgpDP",
	"yP26xMeHBd39G5pugr6f8/VMY2Ls0ozYHly/G7NBg1ENRnVgXQfWNbjSgXUdWH9eVzHdGtpNkxTKKs/g",
	"JpDu++bjp+pR5YmkOkdLMhyjlwo9SFwgTfouoFRdDcGQJIvSOYfzps0hKBPmeQos2+kOXQ5n1R9aB3bu",
	"z8dbADuIh3f3lO7LwVvP6BYI95GtURPsez5r1IYvtQteWz03sXoiYZM00novG0j5fh1KCAMT0ziMMbVJ",
	"hIMoinHs++B4bhy4zBx1sIc4vhN4Kwd7qEMd33MDu13M74AVGWLoLLk8yy8RZ1kEKE2u4CtjRCyfOL6M",
	"5T+o7dJiAW20PFmjpV1D7RJ+RoZDB+If0HCY5Wl6E5vhbZ6mT9Vc0JhCY4oeptjvUJ66ptGMOTV9H9sO",
	"DTG1Iwf7tu9iO2bMc2zu+J43DlrQwLHMFWhhWtRyPGo546CFCpGXN74vVs7I5n7gcBbgMHBjTKPQwQEL",
	"CXYIZSQyw5jweNSMTN+kzuqtqY5nej6xO7em3g4siU58+qMh9oCe8rOf8scRL1uB63vOA+NnoRc1dH6y",
	"0Fksn0bNzwg1K3x7QMCszpbdBDK/k19q0KxB8+/JEbdOuOUl6EmaolkSXSKGyjybIJZxJNOnErFxc3U8",
	"BzJebkEINrVMCUNilhTnU1ZcQnVeD2M8LAIr4HZEfWy53MHU9ThmJndwCJHPwXU8nzuC5aZsAo/kYMUI",
	"iGZTy3FWIJrruZ5r+vYSor0XFGfovViBtw3V/zNnSqYKbiXL/88LmLIkE1vp1LJlZmBR7VgfL/hxFNiz",
	"qeXbD4zflJDWCO7JIji1gBrDPSMM10CuA6K4JhH8Jjjuff2tRnIayT05JNebvVJO2wCWfexRQpSfR6W0",
	"MIea4ATY9pwIU+4BZh7jGDixCbd86jhj/J6q3SBY9XsGQeB7gWW1i/mPPE04W6D3M4gSlqLvkitQANLY",
	"BT5kH6ZljwAf9aveA4OPRrJo+PFk4UezhBqAPCMAskQLh4Qgy0op7Xs3QSNtM+t1j26ESzQU0VDkHnNa",
	"nnDtqv7yfb9oizpdA1xCxlGzX44PVamKuZHn88jGtueFmNqxiVkYuzgEiH0SBtz17BHoyzn2iRMEq9E7",
	"2ybEJ04neteZ013XqBJjcomqZbOxRtV00ZavGVmdSojXRsurClV3Vo1HzcAm26vx/HVeCo6cwsnwZMTj",
	"R14B622Rx1CWSZ6xFKn6Th2n7kWO0uQSyqb+1VeN6RBGoUWJE2DqUh9T2w1w6AQWhoDRyKQhdUxY8VU6",
	"gedR13FbBmiIp4tbHaa41V87BG3/PDU+lFDIohFf1M91OQOP88gHFzvcJJgCCXEQRC4GMw6iwAoJJd7D",
	"GlDLWlTagHqiBlR7wFAbUM/IgGqVMVraOge0pVStlpuYT99csDSFbKK9udqE+l3F5W+CI7aH4i3bC2yz",
	"9RQHEXMZAx/7MaGYOraHA5s4GHw3cqPQBU7GVdUV7Xremq1CSUBdixzopKFl+4SQB/b/nkkxpsHLkwUv",
	"agE1dHlO+fo1tDggWlm99ehgZZiex5VHugqThlu6CpOuwqSrMGlYpasw6SpM93u90Qh014C6cRcZiVf3",
	"u79o/3uLtmKgR3BLkb7NRd/m8ihvc7nxrSdrt51oW/9Z3nKyUwOcTEHgnH1s+O/lFzcJOBxSzmsTV5u4",
	"6yauCvSHge1GFmDOLQvTmFIc+hbFNtg2sy1u+lY86pC3E9i27a5moJmEUuIfGUUuEzCaXolDg4gEFJMo",
	"9jD1OMU+jSMcMNd1o8j3icWMI+MSFg3Hl/MZFOeMT5Nsubxyo7wQvyVlVbAqL8aUD3COCQmcQGbL6SM4",
	"+gjOIzqC87AhqVZfaf/J0w1LtYuoQ1PPyYkhNF0DP/eFrf0w1R7odfiKZY1hNYbViQX6Umx9Kba+FFu7",
	"UfWl2M/jUuyHtrx0PsOzsL10TsMztL56IGW3/TUvoShPfquzqcYEjsWrowPHH8puRGFM4Fh8sdEYa5K+",
	"dOBYe2C1B/ZGUWJ5GLerCcQPWvA/uyixjBbtEvcn+3rapDy/mZft4IJde9m0l23Ay6a9Edob8Si9EQ9t",
	"tWtr/Ulb69pKf0ZW+lC5gXGITWpehc/O4UqMcQ/o9nr5scxS0xBOQzgdKNUV2HQFNl2BTTsfte3ybCuw",
	"SbSjDaAnawDJ9dMW0DOygFiaLsOU8oqlfuQShQu0tDf2s5HkodI9zKJ+eusjM4XyLF3IM7Ulur6AApoQ",
	"7IXQ7aicQZTESYSKPIV+VZRersmwAVN/pA00baBpH7v2sWsfu/axax+7RpjPJw9pg389F5Q7ack34tTb",
	"pyjn8AlVF0U+n1xIpu9MtESfCuBJAVF1Pi+ST2JfhKD033VSqfc/nVT5JWSfOr80I1DufNXFpGCZ1JDD",
	"qPWN+OZFO/IdMPWbNJHF6PgGgBTJ5wfAqmry6MO715ugZoc+t+1M7Td0pgr7Dfem3mmK/23urikGKHNa",
	"xtT4ex/lG7st62cDqFH5ICN5c6zqsf5hoM+PasBQVn/L+WKv/bVTWsV5bny5JZ4c10lvR3Y5ttmQchf2",
	"dqTcIKKHWV5u244ZYpGQANJuLCAuoLxA8mO1uRiaFflVwoEjxeEo4UeohKiA6kh+JHcZEhM5RmfiwxLB",
	"L7OkkDUnP3kWIZ/E+3nGyx17UX79SPZh3c17OdHtXZXNO7fo7u+SiFu2oaTy7j243CT14KICOGRVwuQl",
	"6e0WbR9mnafrMlT2JXniXDHUmG39otsM+ibn8P+gT183Y/4kQM1cGg+bhTaqNlOiHtcexH1icuZmMqWL",
	"h+WOrlfs1GChy5zAsqlLKeXAAs/0iG97YBLKfebsem4cGVEBq2EZE1vemRmc2tYpkVEutenLc0FlT9qi",
	"fdY5NbLPnz8vqqmdV1BNJ8XnaULI4jO7Tq+B/jpZVL9+Tn5ZWNNfp9bCzj6z62hiWqZlm0EQ2IHNbLlM",
	"uaRWuzSy7Sb8FAIrVB2DPSSsBp378BYURV5Il8oVSxN+riSJWH7x4HxQiIp5CimjWkUxS1LgiM9VceLs",
	"Msuvs1q7HKEsbxTNymdJFqVzDvwI5QWaZ3XwEfjqe1OoLnJ+vCcXjIDCjXpaU7riLYjmhbxN/aff+nLU",
	"OP3poxAP9VersumNkJbIOiYIMj7Lk0wZeko4qR6OjF8wT8pZyhY/1Km04iNjQ9Hk9s6KgQb7tQ/XG+7n",
	"5Q5oRTYvYajhSDwYaFB+MNjQ5kFuGd+WoUk38kBrc1Uye7UldXh/rZVXHd+Wqj490GTHAaYODg20v9bQ",
	"puXasEobFkf6ZX7BFZv8vcjnM8VRjavs7Wv0DmIoIIvWweHR2uI3a7YaGT8anGCd9PTxy/8NAAD//wXR",
	"8ZWdygIA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
