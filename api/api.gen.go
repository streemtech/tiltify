// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	AuthorizationScopes = "authorization.Scopes"
)

// Defines values for CampaignStatus.
const (
	CampaignStatusPublished   CampaignStatus = "published"
	CampaignStatusRetired     CampaignStatus = "retired"
	CampaignStatusUnpublished CampaignStatus = "unpublished"
)

// Defines values for CampaignSupportingType.
const (
	CampaignSupportingTypeInviteOnly CampaignSupportingType = "invite_only"
	CampaignSupportingTypeNone       CampaignSupportingType = "none"
	CampaignSupportingTypePrivate    CampaignSupportingType = "private"
	CampaignSupportingTypePublic     CampaignSupportingType = "public"
)

// Defines values for FundraisingEventStatus.
const (
	FundraisingEventStatusPublished   FundraisingEventStatus = "published"
	FundraisingEventStatusRetired     FundraisingEventStatus = "retired"
	FundraisingEventStatusUnpublished FundraisingEventStatus = "unpublished"
)

// Defines values for MeasuredUnitUnit.
const (
	Kilometer MeasuredUnitUnit = "kilometer"
	Mile      MeasuredUnitUnit = "mile"
	Seconds   MeasuredUnitUnit = "seconds"
)

// Defines values for RoleKey.
const (
	RoleKeyTeamAdmin        RoleKey = "team_admin"
	RoleKeyTeamEventManager RoleKey = "team_event_manager"
	RoleKeyTeamMember       RoleKey = "team_member"
	RoleKeyTeamSuperAdmin   RoleKey = "team_super_admin"
	RoleKeyTeamUserManager  RoleKey = "team_user_manager"
)

// Defines values for TeamCampaignStatus.
const (
	Published   TeamCampaignStatus = "published"
	Retired     TeamCampaignStatus = "retired"
	Unpublished TeamCampaignStatus = "unpublished"
)

// Defines values for TeamCampaignSupportable.
const (
	TeamCampaignSupportableInviteOnly TeamCampaignSupportable = "invite_only"
	TeamCampaignSupportableNone       TeamCampaignSupportable = "none"
	TeamCampaignSupportablePrivate    TeamCampaignSupportable = "private"
	TeamCampaignSupportablePublic     TeamCampaignSupportable = "public"
)

// Defines values for CampaignLeaderboardControllerDonorParamsTimeType.
const (
	CampaignLeaderboardControllerDonorParamsTimeTypeAll     CampaignLeaderboardControllerDonorParamsTimeType = "all"
	CampaignLeaderboardControllerDonorParamsTimeTypeDaily   CampaignLeaderboardControllerDonorParamsTimeType = "daily"
	CampaignLeaderboardControllerDonorParamsTimeTypeMonthly CampaignLeaderboardControllerDonorParamsTimeType = "monthly"
	CampaignLeaderboardControllerDonorParamsTimeTypeWeekly  CampaignLeaderboardControllerDonorParamsTimeType = "weekly"
	CampaignLeaderboardControllerDonorParamsTimeTypeYearly  CampaignLeaderboardControllerDonorParamsTimeType = "yearly"
	CampaignLeaderboardControllerDonorParamsTimeTypeYtd     CampaignLeaderboardControllerDonorParamsTimeType = "ytd"
)

// Defines values for CauseLeaderboardControllerDonorParamsTimeType.
const (
	CauseLeaderboardControllerDonorParamsTimeTypeAll     CauseLeaderboardControllerDonorParamsTimeType = "all"
	CauseLeaderboardControllerDonorParamsTimeTypeDaily   CauseLeaderboardControllerDonorParamsTimeType = "daily"
	CauseLeaderboardControllerDonorParamsTimeTypeMonthly CauseLeaderboardControllerDonorParamsTimeType = "monthly"
	CauseLeaderboardControllerDonorParamsTimeTypeWeekly  CauseLeaderboardControllerDonorParamsTimeType = "weekly"
	CauseLeaderboardControllerDonorParamsTimeTypeYearly  CauseLeaderboardControllerDonorParamsTimeType = "yearly"
	CauseLeaderboardControllerDonorParamsTimeTypeYtd     CauseLeaderboardControllerDonorParamsTimeType = "ytd"
)

// Defines values for CauseLeaderboardControllerTeamParamsTimeType.
const (
	CauseLeaderboardControllerTeamParamsTimeTypeAll     CauseLeaderboardControllerTeamParamsTimeType = "all"
	CauseLeaderboardControllerTeamParamsTimeTypeDaily   CauseLeaderboardControllerTeamParamsTimeType = "daily"
	CauseLeaderboardControllerTeamParamsTimeTypeMonthly CauseLeaderboardControllerTeamParamsTimeType = "monthly"
	CauseLeaderboardControllerTeamParamsTimeTypeWeekly  CauseLeaderboardControllerTeamParamsTimeType = "weekly"
	CauseLeaderboardControllerTeamParamsTimeTypeYearly  CauseLeaderboardControllerTeamParamsTimeType = "yearly"
	CauseLeaderboardControllerTeamParamsTimeTypeYtd     CauseLeaderboardControllerTeamParamsTimeType = "ytd"
)

// Defines values for CauseLeaderboardControllerUserParamsTimeType.
const (
	CauseLeaderboardControllerUserParamsTimeTypeAll     CauseLeaderboardControllerUserParamsTimeType = "all"
	CauseLeaderboardControllerUserParamsTimeTypeDaily   CauseLeaderboardControllerUserParamsTimeType = "daily"
	CauseLeaderboardControllerUserParamsTimeTypeMonthly CauseLeaderboardControllerUserParamsTimeType = "monthly"
	CauseLeaderboardControllerUserParamsTimeTypeWeekly  CauseLeaderboardControllerUserParamsTimeType = "weekly"
	CauseLeaderboardControllerUserParamsTimeTypeYearly  CauseLeaderboardControllerUserParamsTimeType = "yearly"
	CauseLeaderboardControllerUserParamsTimeTypeYtd     CauseLeaderboardControllerUserParamsTimeType = "ytd"
)

// Defines values for FundraisingEventLeaderboardControllerDonorParamsTimeType.
const (
	FundraisingEventLeaderboardControllerDonorParamsTimeTypeAll     FundraisingEventLeaderboardControllerDonorParamsTimeType = "all"
	FundraisingEventLeaderboardControllerDonorParamsTimeTypeCustom  FundraisingEventLeaderboardControllerDonorParamsTimeType = "custom"
	FundraisingEventLeaderboardControllerDonorParamsTimeTypeDaily   FundraisingEventLeaderboardControllerDonorParamsTimeType = "daily"
	FundraisingEventLeaderboardControllerDonorParamsTimeTypeMonthly FundraisingEventLeaderboardControllerDonorParamsTimeType = "monthly"
	FundraisingEventLeaderboardControllerDonorParamsTimeTypeWeekly  FundraisingEventLeaderboardControllerDonorParamsTimeType = "weekly"
	FundraisingEventLeaderboardControllerDonorParamsTimeTypeYearly  FundraisingEventLeaderboardControllerDonorParamsTimeType = "yearly"
	FundraisingEventLeaderboardControllerDonorParamsTimeTypeYtd     FundraisingEventLeaderboardControllerDonorParamsTimeType = "ytd"
)

// Defines values for FundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType.
const (
	FundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeTypeAll     FundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType = "all"
	FundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeTypeCustom  FundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType = "custom"
	FundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeTypeDaily   FundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType = "daily"
	FundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeTypeMonthly FundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType = "monthly"
	FundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeTypeWeekly  FundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType = "weekly"
	FundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeTypeYearly  FundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType = "yearly"
	FundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeTypeYtd     FundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType = "ytd"
)

// Defines values for FundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType.
const (
	FundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeTypeAll     FundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType = "all"
	FundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeTypeCustom  FundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType = "custom"
	FundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeTypeDaily   FundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType = "daily"
	FundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeTypeMonthly FundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType = "monthly"
	FundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeTypeWeekly  FundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType = "weekly"
	FundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeTypeYearly  FundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType = "yearly"
	FundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeTypeYtd     FundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType = "ytd"
)

// Defines values for FundraisingEventLeaderboardControllerTeamParamsTimeType.
const (
	FundraisingEventLeaderboardControllerTeamParamsTimeTypeAll     FundraisingEventLeaderboardControllerTeamParamsTimeType = "all"
	FundraisingEventLeaderboardControllerTeamParamsTimeTypeCustom  FundraisingEventLeaderboardControllerTeamParamsTimeType = "custom"
	FundraisingEventLeaderboardControllerTeamParamsTimeTypeDaily   FundraisingEventLeaderboardControllerTeamParamsTimeType = "daily"
	FundraisingEventLeaderboardControllerTeamParamsTimeTypeMonthly FundraisingEventLeaderboardControllerTeamParamsTimeType = "monthly"
	FundraisingEventLeaderboardControllerTeamParamsTimeTypeWeekly  FundraisingEventLeaderboardControllerTeamParamsTimeType = "weekly"
	FundraisingEventLeaderboardControllerTeamParamsTimeTypeYearly  FundraisingEventLeaderboardControllerTeamParamsTimeType = "yearly"
	FundraisingEventLeaderboardControllerTeamParamsTimeTypeYtd     FundraisingEventLeaderboardControllerTeamParamsTimeType = "ytd"
)

// Defines values for FundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType.
const (
	FundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeTypeAll     FundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType = "all"
	FundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeTypeCustom  FundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType = "custom"
	FundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeTypeDaily   FundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType = "daily"
	FundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeTypeMonthly FundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType = "monthly"
	FundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeTypeWeekly  FundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType = "weekly"
	FundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeTypeYearly  FundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType = "yearly"
	FundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeTypeYtd     FundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType = "ytd"
)

// Defines values for FundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType.
const (
	FundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeTypeAll     FundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType = "all"
	FundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeTypeCustom  FundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType = "custom"
	FundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeTypeDaily   FundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType = "daily"
	FundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeTypeMonthly FundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType = "monthly"
	FundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeTypeWeekly  FundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType = "weekly"
	FundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeTypeYearly  FundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType = "yearly"
	FundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeTypeYtd     FundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType = "ytd"
)

// Defines values for FundraisingEventLeaderboardControllerUserParamsTimeType.
const (
	FundraisingEventLeaderboardControllerUserParamsTimeTypeAll     FundraisingEventLeaderboardControllerUserParamsTimeType = "all"
	FundraisingEventLeaderboardControllerUserParamsTimeTypeCustom  FundraisingEventLeaderboardControllerUserParamsTimeType = "custom"
	FundraisingEventLeaderboardControllerUserParamsTimeTypeDaily   FundraisingEventLeaderboardControllerUserParamsTimeType = "daily"
	FundraisingEventLeaderboardControllerUserParamsTimeTypeMonthly FundraisingEventLeaderboardControllerUserParamsTimeType = "monthly"
	FundraisingEventLeaderboardControllerUserParamsTimeTypeWeekly  FundraisingEventLeaderboardControllerUserParamsTimeType = "weekly"
	FundraisingEventLeaderboardControllerUserParamsTimeTypeYearly  FundraisingEventLeaderboardControllerUserParamsTimeType = "yearly"
	FundraisingEventLeaderboardControllerUserParamsTimeTypeYtd     FundraisingEventLeaderboardControllerUserParamsTimeType = "ytd"
)

// Defines values for TeamCampaignLeaderboardControllerDonorParamsTimeType.
const (
	TeamCampaignLeaderboardControllerDonorParamsTimeTypeAll     TeamCampaignLeaderboardControllerDonorParamsTimeType = "all"
	TeamCampaignLeaderboardControllerDonorParamsTimeTypeDaily   TeamCampaignLeaderboardControllerDonorParamsTimeType = "daily"
	TeamCampaignLeaderboardControllerDonorParamsTimeTypeMonthly TeamCampaignLeaderboardControllerDonorParamsTimeType = "monthly"
	TeamCampaignLeaderboardControllerDonorParamsTimeTypeWeekly  TeamCampaignLeaderboardControllerDonorParamsTimeType = "weekly"
	TeamCampaignLeaderboardControllerDonorParamsTimeTypeYearly  TeamCampaignLeaderboardControllerDonorParamsTimeType = "yearly"
	TeamCampaignLeaderboardControllerDonorParamsTimeTypeYtd     TeamCampaignLeaderboardControllerDonorParamsTimeType = "ytd"
)

// Defines values for TeamCampaignLeaderboardControllerUserParamsTimeType.
const (
	All     TeamCampaignLeaderboardControllerUserParamsTimeType = "all"
	Daily   TeamCampaignLeaderboardControllerUserParamsTimeType = "daily"
	Monthly TeamCampaignLeaderboardControllerUserParamsTimeType = "monthly"
	Weekly  TeamCampaignLeaderboardControllerUserParamsTimeType = "weekly"
	Yearly  TeamCampaignLeaderboardControllerUserParamsTimeType = "yearly"
	Ytd     TeamCampaignLeaderboardControllerUserParamsTimeType = "ytd"
)

// Defines values for V5ApiWebOauthAuthorizeParamsResponseType.
const (
	Code V5ApiWebOauthAuthorizeParamsResponseType = "code"
)

// Defines values for V5ApiWebOauthAuthorizeParamsScope.
const (
	V5ApiWebOauthAuthorizeParamsScopePublic V5ApiWebOauthAuthorizeParamsScope = "public"
)

// Defines values for V5ApiWebOauthTokenParamsGrantType.
const (
	AuthorizationCode  V5ApiWebOauthTokenParamsGrantType = "authorization_code"
	ClientCrendentials V5ApiWebOauthTokenParamsGrantType = "client_crendentials"
	RefreshToken       V5ApiWebOauthTokenParamsGrantType = "refresh_token"
)

// Defines values for V5ApiWebOauthTokenParamsScope.
const (
	V5ApiWebOauthTokenParamsScopePublic V5ApiWebOauthTokenParamsScope = "public"
)

// Campaign defines model for Campaign.
type Campaign struct {
	// AmountRaised The amount raised directly by this campaign
	AmountRaised Money `json:"amount_raised"`

	// Avatar An Image includes the html properties necessary to render an <img> tag
	Avatar *Image `json:"avatar"`

	// Description A short description about this campaign
	Description string `json:"description"`

	// Goal The current goal of the campaign
	Goal Money `json:"goal"`

	// HasSchedule Whether or not this campaign has schedule items
	HasSchedule bool `json:"has_schedule"`

	// Id Unique Identifier for the Object. UUID
	Id PublicId `json:"id"`

	// InsertedAt When the campaign was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name The name of this campaign
	Name string `json:"name"`

	// OriginalGoal The original goal of the campaign
	OriginalGoal Money `json:"original_goal"`

	// PublishedAt When the campaign was last published
	PublishedAt time.Time `json:"published_at"`

	// RetiredAt When the campaign was retired
	RetiredAt *time.Time `json:"retired_at"`

	// Slug This is a url slug used for the given resource.
	Slug Slug `json:"slug"`

	// Status The status of this campaign
	Status CampaignStatus `json:"status"`

	// SupportingType The amount raised by this campaign and all supporting campaigns
	SupportingType CampaignSupportingType `json:"supporting_type"`

	// TotalAmountRaised The amount raised by this campaign and all supporting campaigns
	TotalAmountRaised Money `json:"total_amount_raised"`

	// UpdatedAt When the campaign details were last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Url This is the full url for the campaign.
	Url Url `json:"url"`

	// User The User that owns this campaign.
	User *User `json:"user"`

	// UserId The ID for a User that owns this campaign.
	UserId *PublicId `json:"user_id"`
}

// CampaignStatus The status of this campaign
type CampaignStatus string

// CampaignSupportingType The amount raised by this campaign and all supporting campaigns
type CampaignSupportingType string

// CampaignPaginatedResponse Object returned for paginated API responses
type CampaignPaginatedResponse = PaginatedResponse

// CampaignResponse defines model for CampaignResponse.
type CampaignResponse struct {
	Data *Campaign `json:"data,omitempty"`
}

// Cause defines model for Cause.
type Cause struct {
	// Avatar An Image includes the html properties necessary to render an <img> tag
	Avatar  *Image `json:"avatar"`
	Contact struct {
		// AddressLine1 The first line of the contact address
		AddressLine1 *string `json:"address_line1"`

		// AddressLine2 The second line of the contact address
		AddressLine2 *string `json:"address_line2"`

		// City The city of the contact address
		City *string `json:"city"`

		// Country The country of the contact address
		Country *string `json:"country"`

		// Email An email address used for fundraiser contact.
		Email *string `json:"email"`

		// PostalCode The postal code of the contact address
		PostalCode *string `json:"postal_code"`

		// Region The region of the contact address
		Region *string `json:"region"`
	} `json:"contact"`

	// CurrencyCode The currency code used by this cause.
	CurrencyCode CurrencyCode `json:"currency_code"`

	// Description A description about this cause
	Description string `json:"description"`

	// GovernmentId The government id of this cause.
	GovernmentId string `json:"government_id"`

	// Id Unique Identifier for the Object. UUID
	Id PublicId `json:"id"`

	// InsertedAt When the cause was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name The cause name
	Name string `json:"name"`

	// ShortDescription A short description about this cause
	ShortDescription *string `json:"short_description"`

	// Slug This is a url slug used for the given resource.
	Slug Slug `json:"slug"`

	// Social An object with various social usernames and links
	Social *Social `json:"social"`

	// UpdatedAt When the cause details were last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// CauseResponse defines model for CauseResponse.
type CauseResponse struct {
	Data *Cause `json:"data,omitempty"`
}

// ConfiguredLeaderboard Configured Leaderboards Like V3
type ConfiguredLeaderboard struct {
	Individual *[]LeaderboardEntry `json:"individual,omitempty"`
	Team       *[]LeaderboardEntry `json:"team,omitempty"`
	Weekly     *[]LeaderboardEntry `json:"weekly,omitempty"`
}

// ConfiguredLeaderboardResponse defines model for ConfiguredLeaderboardResponse.
type ConfiguredLeaderboardResponse struct {
	// Data Configured Leaderboards Like V3
	Data *ConfiguredLeaderboard `json:"data,omitempty"`
}

// CurrencyCode ISO 4217 alphabetic currency code
type CurrencyCode = string

// CurrentUserObj defines model for CurrentUserObj.
type CurrentUserObj struct {
	Data *CurrentUserObj_Data `json:"data"`
}

// CurrentUserObj_Data defines model for CurrentUserObj.Data.
type CurrentUserObj_Data struct {
	union json.RawMessage
}

// Donation defines model for Donation.
type Donation struct {
	// Amount The amount donated.
	Amount Money `json:"amount"`

	// CampaignId ID of the campaign donated to
	CampaignId *PublicId `json:"campaign_id"`

	// CompletedAt Timestamp of when the donation was completed.
	CompletedAt *time.Time `json:"completed_at"`

	// DonorComment Note left by donor
	DonorComment *string `json:"donor_comment"`

	// DonorName Publically visible donor name. This may be set to 'Anonymous' if the donation was anonymous or moderated.
	DonorName string `json:"donor_name"`

	// FundraisingEventId ID of the fundraising event donated to
	FundraisingEventId *PublicId `json:"fundraising_event_id"`

	// Id Unique Identifier for the donation.
	Id PublicId `json:"id"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// PollId The ID for a Poll, if one was donated toward.
	PollId *PublicId `json:"poll_id"`

	// PollOptionId The ID for a PollOption, if one was donated toward.
	PollOptionId *PublicId `json:"poll_option_id"`

	// RewardId The ID for a Reward, if one was donated toward.
	RewardId *PublicId `json:"reward_id"`

	// Sustained Whether or not the donation is a part of a monthly donation.
	Sustained *bool `json:"sustained"`

	// TargetId The ID for a Target, if one was donated toward.
	TargetId *PublicId `json:"target_id"`

	// TeamEventId The ID of a team event if it exists
	TeamEventId *PublicId `json:"team_event_id"`
}

// DonationPaginatedResponse Object returned for paginated API responses
type DonationPaginatedResponse = PaginatedResponse

// ErrorResponse Object returned in API errors
type ErrorResponse struct {
	Error struct {
		Fields *map[string][]string `json:"fields"`

		// Message A human readable message describing the error.
		Message string `json:"message"`

		// Status The HTTP status of the error
		Status int `json:"status"`
	} `json:"error"`
}

// Event defines model for Event.
type Event struct {
	union json.RawMessage
}

// EventPaginatedResponse Object returned for paginated API responses
type EventPaginatedResponse = PaginatedResponse

// Forbidden Object returned in API errors
type Forbidden = ErrorResponse

// FundraisingEvent defines model for FundraisingEvent.
type FundraisingEvent struct {
	// Avatar An Image includes the html properties necessary to render an <img> tag
	Avatar *Image `json:"avatar"`

	// CauseId The ID for a Cause that owns this fundraising event.
	CauseId PublicId `json:"cause_id"`

	// CurrencyCode The currency code used by this fundraising event.
	CurrencyCode CurrencyCode `json:"currency_code"`

	// Description A short description about this fundraising event
	Description string `json:"description"`

	// EndsAt A date when this fundraising event ends.
	EndsAt openapi_types.Date `json:"ends_at"`

	// Goal The current goal of the fundraising event
	Goal *Money `json:"goal"`

	// Id Unique Identifier for the Object. UUID
	Id PublicId `json:"id"`

	// InsertedAt When the fundraising event was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name The name of this fundraising event
	Name string `json:"name"`

	// PublishedAt When the fundraising event was last published
	PublishedAt time.Time `json:"published_at"`

	// RetiredAt When the fundraising event was retired
	RetiredAt *time.Time `json:"retired_at"`

	// Slug This is a url slug used for the given resource.
	Slug Slug `json:"slug"`

	// StartsAt An optional date when this fundraising event starts.
	StartsAt *openapi_types.Date `json:"starts_at"`

	// Status The status of this fundraising event
	Status FundraisingEventStatus `json:"status"`

	// TotalAmountRaised The amount raised by this fundraising event and all supporting campaigns
	TotalAmountRaised Money `json:"total_amount_raised"`

	// UpdatedAt When the fundraising event details were last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Url This is the full url for the fundraising event.
	Url Url `json:"url"`
}

// FundraisingEventStatus The status of this fundraising event
type FundraisingEventStatus string

// FundraisingEventPaginatedResponse Object returned for paginated API responses
type FundraisingEventPaginatedResponse = PaginatedResponse

// FundraisingEventResponse defines model for FundraisingEventResponse.
type FundraisingEventResponse struct {
	Data *FundraisingEvent `json:"data,omitempty"`
}

// Image An Image includes the html properties necessary to render an <img> tag
type Image struct {
	// Alt Short description of the image
	Alt *string `json:"alt"`

	// Height Height of the image.
	Height *int `json:"height"`

	// Src Full URL of the image.
	Src string `json:"src"`

	// Width Width of the image.
	Width *int `json:"width"`
}

// LeaderboardEntry defines model for LeaderboardEntry.
type LeaderboardEntry struct {
	// Amount The total amount raised by this leaderboard entry.
	Amount LeaderboardEntry_Amount `json:"amount"`

	// Avatar An Image includes the html properties necessary to render an <img> tag
	Avatar *Image `json:"avatar"`

	// Heat The change in place of this entry
	Heat *float32 `json:"heat"`

	// Id Unique Identifier for the Object. UUID
	Id PublicId `json:"id"`

	// Name The team's name
	Name string `json:"name"`

	// Url This is the full url for the team profile.
	Url *Url `json:"url"`
}

// LeaderboardEntry_Amount The total amount raised by this leaderboard entry.
type LeaderboardEntry_Amount struct {
	union json.RawMessage
}

// LeaderboardEntryPaginatedResponse Object returned for paginated API responses
type LeaderboardEntryPaginatedResponse = PaginatedResponse

// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
type LegacyId = float32

// MeasuredUnit Schema defining measurable amount in given unit
type MeasuredUnit struct {
	// Unit measured unit
	Unit MeasuredUnitUnit `json:"unit"`

	// Value Monetary amount
	Value string `json:"value"`
}

// MeasuredUnitUnit measured unit
type MeasuredUnitUnit string

// Milestone defines model for Milestone.
type Milestone struct {
	// Active Whether or not the milestone is active
	Active bool `json:"active"`

	// Amount The amount of the milestone.
	Amount Money `json:"amount"`

	// Id Unique Identifier for the milestone.
	Id PublicId `json:"id"`

	// InsertedAt Moment when the milestone was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name Milestone name
	Name string `json:"name"`

	// UpdatedAt Moment when the milestone was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// MilestonePaginatedResponse Object returned for paginated API responses
type MilestonePaginatedResponse = PaginatedResponse

// Money Schema defining monetary amount in given currency
type Money struct {
	// Currency ISO 4217 alphabetic currency code
	Currency CurrencyCode `json:"currency"`

	// Value Monetary amount
	Value string `json:"value"`
}

// NotFound Object returned in API errors
type NotFound = ErrorResponse

// NullableUserResponse defines model for NullableUserResponse.
type NullableUserResponse struct {
	Data *NullableUserResponse_Data `json:"data"`
}

// NullableUserResponse_Data defines model for NullableUserResponse.Data.
type NullableUserResponse_Data struct {
	union json.RawMessage
}

// PaginatedResponse Object returned for paginated API responses
type PaginatedResponse struct {
	Data     []map[string]interface{} `json:"data"`
	Metadata *struct {
		// After The cursor to the next page if it exists
		After *string `json:"after"`

		// Before The cursor to the previous page if it exists
		Before *string `json:"before"`

		// Limit The requested record limit
		Limit float32 `json:"limit"`
	} `json:"metadata,omitempty"`
}

// Poll defines model for Poll.
type Poll struct {
	// Active Whether or not the milestone is active
	Active bool `json:"active"`

	// AmountRaised Amount Raised by this poll option
	AmountRaised Money `json:"amount_raised"`

	// Id Unique Identifier for the milestone.
	Id PublicId `json:"id"`

	// InsertedAt Moment when the milestone was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name Milestone name
	Name    string       `json:"name"`
	Options []PollOption `json:"options"`

	// UpdatedAt Moment when the milestone was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// PollOption defines model for PollOption.
type PollOption struct {
	// AmountRaised Amount Raised by this poll option
	AmountRaised Money `json:"amount_raised"`

	// Id Unique Identifier for the poll option.
	Id PublicId `json:"id"`

	// InsertedAt Moment when the poll option was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name poll option name
	Name string `json:"name"`

	// UpdatedAt Moment when the poll option was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// PollPaginatedResponse Object returned for paginated API responses
type PollPaginatedResponse = PaginatedResponse

// PublicId Unique Identifier for the Object. UUID
type PublicId = openapi_types.UUID

// Reward defines model for Reward.
type Reward struct {
	// Active Whether or not the reward is active
	Active bool `json:"active"`

	// Amount Amount needed to claim this reward
	Amount Money `json:"amount"`

	// Description Short description of the reward
	Description *string `json:"description"`

	// EndsAt Moment when the reward ends
	EndsAt *time.Time `json:"ends_at"`

	// FairMarketValue The fair market value of this reward
	FairMarketValue *Money `json:"fair_market_value"`

	// Id Unique Identifier for the reward.
	Id    PublicId `json:"id"`
	Image *Image   `json:"image"`

	// InsertedAt Moment when the reward was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name Reward name
	Name string `json:"name"`

	// Quantity total amount of this reward if it has a limited quantity
	Quantity *int `json:"quantity"`

	// QuantityRemaining remaining amount of this reward if it has a limited quantity
	QuantityRemaining *int `json:"quantity_remaining"`

	// StartsAt Moment when the reward starts
	StartsAt *time.Time `json:"starts_at"`

	// UpdatedAt Moment when the milestone was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// RewardPaginatedResponse Object returned for paginated API responses
type RewardPaginatedResponse = PaginatedResponse

// Role defines model for Role.
type Role struct {
	// Id Unique Identifier for the Object. UUID
	Id PublicId `json:"id"`

	// Key Internal key for the role
	Key RoleKey `json:"key"`

	// Name Visible name of the role
	Name string `json:"name"`
}

// RoleKey Internal key for the role
type RoleKey string

// Schedule defines model for Schedule.
type Schedule struct {
	// Description Campaign schedule description
	Description *string `json:"description"`

	// EndsAt Moment when the schedule ends in ISO8601 format
	EndsAt *time.Time `json:"ends_at"`

	// Id Unique Identifier for the milestone.
	Id PublicId `json:"id"`

	// InsertedAt Moment when the milestone was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name Milestone name
	Name string `json:"name"`

	// StartsAt Moment when the schedule starts in ISO8601 format
	StartsAt time.Time `json:"starts_at"`

	// UpdatedAt Moment when the milestone was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// SchedulePaginatedResponse Object returned for paginated API responses
type SchedulePaginatedResponse = PaginatedResponse

// Slug This is a url slug used for the given resource.
type Slug = string

// Social An object with various social usernames and links
type Social struct {
	// Discord Discord invite url
	Discord *string `json:"discord"`

	// Facebook Facebook Page username
	Facebook *string `json:"facebook"`

	// Instagram Instagram username
	Instagram *string `json:"instagram"`

	// Snapchat Snapchat username
	Snapchat *string `json:"snapchat"`

	// Tiktok TikTok username
	Tiktok *string `json:"tiktok"`

	// Twitch Twitch username
	Twitch *string `json:"twitch"`

	// Twitter Twitter username
	Twitter *string `json:"twitter"`

	// Website Custom website url
	Website *string `json:"website"`

	// Youtube Youtube channel ID
	Youtube *string `json:"youtube"`
}

// Target defines model for Target.
type Target struct {
	// Active Whether or not the target is active
	Active bool `json:"active"`

	// Amount Amount to hit this target
	Amount Money `json:"amount"`

	// AmountRaised Amount Raised by this target
	AmountRaised Money `json:"amount_raised"`

	// EndsAt Moment when the target ends
	EndsAt time.Time `json:"ends_at"`

	// Id Unique Identifier for the target.
	Id PublicId `json:"id"`

	// InsertedAt Moment when the target was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name target name
	Name string `json:"name"`

	// UpdatedAt Moment when the target was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// TargetPaginatedResponse Object returned for paginated API responses
type TargetPaginatedResponse = PaginatedResponse

// Team defines model for Team.
type Team struct {
	// Avatar An Image includes the html properties necessary to render an <img> tag
	Avatar *Image `json:"avatar"`

	// Description The description section on a team's profile.
	Description *string `json:"description"`

	// Id Unique Identifier for the Object. UUID
	Id PublicId `json:"id"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name The team's name
	Name string `json:"name"`

	// Slug This is a url slug used for the given resource.
	Slug Slug `json:"slug"`

	// Social An object with various social usernames and links
	Social *Social `json:"social"`

	// TotalAmountRaised The total amount raised by this user represented in USD.
	TotalAmountRaised Money `json:"total_amount_raised"`

	// Url This is the full url for the team profile.
	Url Url `json:"url"`
}

// TeamCampaign defines model for TeamCampaign.
type TeamCampaign struct {
	// AmountRaised The amount raised directly by this team campaign
	AmountRaised Money `json:"amount_raised"`

	// Avatar An Image includes the html properties necessary to render an <img> tag
	Avatar *Image `json:"avatar"`

	// CurrencyCode The currency code used by this team campaign.
	CurrencyCode CurrencyCode `json:"currency_code"`

	// Description A short description about this team campaign
	Description *string `json:"description"`

	// Goal The current goal of the team campaign
	Goal *Money `json:"goal"`

	// HasSchedule Whether or not this campaign has schedule items
	HasSchedule bool `json:"has_schedule"`

	// Id Unique Identifier for the Object. UUID
	Id PublicId `json:"id"`

	// InsertedAt When the team campaign was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Name The name of this team campaign
	Name string `json:"name"`

	// OriginalGoal The original goal of the campaign
	OriginalGoal Money `json:"original_goal"`

	// PublishedAt When the team campaign was last published
	PublishedAt time.Time `json:"published_at"`

	// RetiredAt When the team campaign was retired
	RetiredAt *time.Time `json:"retired_at"`

	// Slug This is a url slug used for the given resource.
	Slug Slug `json:"slug"`

	// Status The status of this campaign
	Status TeamCampaignStatus `json:"status"`

	// Supportable The amount raised by this campaign and all supporting campaigns
	Supportable TeamCampaignSupportable `json:"supportable"`

	// SupportingAmountRaised The amount raised by any supporting campaigns
	SupportingAmountRaised Money `json:"supporting_amount_raised"`

	// Team The Team that owns this campaign.
	Team *Team `json:"team"`

	// TeamId The ID for a Team that owns this campaign.
	TeamId *PublicId `json:"team_id"`

	// TotalAmountRaised The amount raised by this team campaign and all supporting campaigns
	TotalAmountRaised Money `json:"total_amount_raised"`

	// UpdatedAt When the team campaign details were last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Url This is the full url for the team campaign.
	Url Url `json:"url"`
}

// TeamCampaignStatus The status of this campaign
type TeamCampaignStatus string

// TeamCampaignSupportable The amount raised by this campaign and all supporting campaigns
type TeamCampaignSupportable string

// TeamCampaignPaginatedResponse Object returned for paginated API responses
type TeamCampaignPaginatedResponse = PaginatedResponse

// TeamCampaignResponse defines model for TeamCampaignResponse.
type TeamCampaignResponse struct {
	Data *TeamCampaign `json:"data,omitempty"`
}

// TeamMember defines model for TeamMember.
type TeamMember struct {
	// Id Unique Identifier for the Object. UUID
	Id PublicId `json:"id"`

	// InsertedAt When the team member was created
	InsertedAt time.Time `json:"inserted_at"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Roles A list of the team member's roles
	Roles []Role `json:"roles"`

	// UpdatedAt When the team member was last updated
	UpdatedAt time.Time `json:"updated_at"`
	User      User      `json:"user"`
}

// TeamMemberPaginatedResponse Object returned for paginated API responses
type TeamMemberPaginatedResponse = PaginatedResponse

// TeamPaginatedResponse Object returned for paginated API responses
type TeamPaginatedResponse = PaginatedResponse

// TeamResponse defines model for TeamResponse.
type TeamResponse struct {
	Data *Team `json:"data,omitempty"`
}

// Unauthorized Object returned in API errors
type Unauthorized = ErrorResponse

// UnprocessableEntity Object returned in API errors
type UnprocessableEntity = ErrorResponse

// Url This is the full url used for the given resource.
type Url = string

// User defines model for User.
type User struct {
	// Avatar An Image includes the html properties necessary to render an <img> tag
	Avatar *Image `json:"avatar"`

	// Description The description section on a user's profile.
	Description *string `json:"description"`

	// Id Unique Identifier for the Object. UUID
	Id PublicId `json:"id"`

	// LegacyId Legacy numeric ID of the object. If your app is dependent on this field, please migrate to id. This will be deprecated in the next version of the API.
	LegacyId LegacyId `json:"legacy_id"`

	// Slug This is a url slug used for the given resource.
	Slug Slug `json:"slug"`

	// Social An object with various social usernames and links
	Social *Social `json:"social"`

	// TotalAmountRaised The total amount raised by this user represented in USD.
	TotalAmountRaised Money `json:"total_amount_raised"`

	// Url This is the full url for the user profile.
	Url Url `json:"url"`

	// Username The user's username
	Username string `json:"username"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	Data *User `json:"data,omitempty"`
}

// CurrentUser defines model for currentUser.
type CurrentUser = CurrentUserObj

// CampaignDonationsParams defines parameters for CampaignDonations.
type CampaignDonationsParams struct {
	// CompletedBefore Returns only donations that have been completed before the given moment in ISO8601 format
	CompletedBefore *string `form:"completed_before,omitempty" json:"completed_before,omitempty"`

	// CompletedAfter Returns only donations that have been completed after the given moment in ISO8601 format
	CompletedAfter *string `form:"completed_after,omitempty" json:"completed_after,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// CampaignLeaderboardControllerDonorParams defines parameters for CampaignLeaderboardControllerDonor.
type CampaignLeaderboardControllerDonorParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *CampaignLeaderboardControllerDonorParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// CampaignLeaderboardControllerDonorParamsTimeType defines parameters for CampaignLeaderboardControllerDonor.
type CampaignLeaderboardControllerDonorParamsTimeType string

// CampaignMilestonesParams defines parameters for CampaignMilestones.
type CampaignMilestonesParams struct {
	// IncludeDisabled Returns disabled milestones. Defaults to false
	IncludeDisabled *bool `form:"include_disabled,omitempty" json:"include_disabled,omitempty"`

	// CreatedBefore Returns only milestones that have been updated before the given moment in ISO8601 format
	CreatedBefore *string `form:"created_before,omitempty" json:"created_before,omitempty"`

	// CreatedAfter Returns only milestones that have been updated after the given moment in ISO8601 format
	CreatedAfter *string `form:"created_after,omitempty" json:"created_after,omitempty"`

	// UpdatedBefore Returns only milestones that have been updated before the given moment in ISO8601 format
	UpdatedBefore *string `form:"updated_before,omitempty" json:"updated_before,omitempty"`

	// UpdatedAfter Returns only milestones that have been updated after the given moment in ISO8601 format
	UpdatedAfter *string `form:"updated_after,omitempty" json:"updated_after,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// CampaignPollsParams defines parameters for CampaignPolls.
type CampaignPollsParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// CampaignRewardsParams defines parameters for CampaignRewards.
type CampaignRewardsParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// CampaignSchedulesParams defines parameters for CampaignSchedules.
type CampaignSchedulesParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// CampaignChallengesParams defines parameters for CampaignChallenges.
type CampaignChallengesParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// CauseCampaignsParams defines parameters for CauseCampaigns.
type CauseCampaignsParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// CauseLeaderboardControllerDonorParams defines parameters for CauseLeaderboardControllerDonor.
type CauseLeaderboardControllerDonorParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *CauseLeaderboardControllerDonorParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// CauseLeaderboardControllerDonorParamsTimeType defines parameters for CauseLeaderboardControllerDonor.
type CauseLeaderboardControllerDonorParamsTimeType string

// CauseFundraisingEventsParams defines parameters for CauseFundraisingEvents.
type CauseFundraisingEventsParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// CauseLeaderboardControllerTeamParams defines parameters for CauseLeaderboardControllerTeam.
type CauseLeaderboardControllerTeamParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *CauseLeaderboardControllerTeamParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// CauseLeaderboardControllerTeamParamsTimeType defines parameters for CauseLeaderboardControllerTeam.
type CauseLeaderboardControllerTeamParamsTimeType string

// CauseLeaderboardControllerUserParams defines parameters for CauseLeaderboardControllerUser.
type CauseLeaderboardControllerUserParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *CauseLeaderboardControllerUserParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// CauseLeaderboardControllerUserParamsTimeType defines parameters for CauseLeaderboardControllerUser.
type CauseLeaderboardControllerUserParamsTimeType string

// FundraisingEventLeaderboardControllerDonorParams defines parameters for FundraisingEventLeaderboardControllerDonor.
type FundraisingEventLeaderboardControllerDonorParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *FundraisingEventLeaderboardControllerDonorParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// FundraisingEventLeaderboardControllerDonorParamsTimeType defines parameters for FundraisingEventLeaderboardControllerDonor.
type FundraisingEventLeaderboardControllerDonorParamsTimeType string

// FundraisingEventSupportingEventsParams defines parameters for FundraisingEventSupportingEvents.
type FundraisingEventSupportingEventsParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// FundraisingEventLeaderboardControllerTeamFitnessDistanceParams defines parameters for FundraisingEventLeaderboardControllerTeamFitnessDistance.
type FundraisingEventLeaderboardControllerTeamFitnessDistanceParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *FundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// FundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType defines parameters for FundraisingEventLeaderboardControllerTeamFitnessDistance.
type FundraisingEventLeaderboardControllerTeamFitnessDistanceParamsTimeType string

// FundraisingEventLeaderboardControllerTeamFitnessTimeParams defines parameters for FundraisingEventLeaderboardControllerTeamFitnessTime.
type FundraisingEventLeaderboardControllerTeamFitnessTimeParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *FundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// FundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType defines parameters for FundraisingEventLeaderboardControllerTeamFitnessTime.
type FundraisingEventLeaderboardControllerTeamFitnessTimeParamsTimeType string

// FundraisingEventLeaderboardControllerTeamParams defines parameters for FundraisingEventLeaderboardControllerTeam.
type FundraisingEventLeaderboardControllerTeamParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *FundraisingEventLeaderboardControllerTeamParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// FundraisingEventLeaderboardControllerTeamParamsTimeType defines parameters for FundraisingEventLeaderboardControllerTeam.
type FundraisingEventLeaderboardControllerTeamParamsTimeType string

// FundraisingEventLeaderboardControllerUserFitnessDistanceParams defines parameters for FundraisingEventLeaderboardControllerUserFitnessDistance.
type FundraisingEventLeaderboardControllerUserFitnessDistanceParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *FundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// FundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType defines parameters for FundraisingEventLeaderboardControllerUserFitnessDistance.
type FundraisingEventLeaderboardControllerUserFitnessDistanceParamsTimeType string

// FundraisingEventLeaderboardControllerUserFitnessTimeParams defines parameters for FundraisingEventLeaderboardControllerUserFitnessTime.
type FundraisingEventLeaderboardControllerUserFitnessTimeParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *FundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// FundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType defines parameters for FundraisingEventLeaderboardControllerUserFitnessTime.
type FundraisingEventLeaderboardControllerUserFitnessTimeParamsTimeType string

// FundraisingEventLeaderboardControllerUserParams defines parameters for FundraisingEventLeaderboardControllerUser.
type FundraisingEventLeaderboardControllerUserParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *FundraisingEventLeaderboardControllerUserParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// FundraisingEventLeaderboardControllerUserParamsTimeType defines parameters for FundraisingEventLeaderboardControllerUser.
type FundraisingEventLeaderboardControllerUserParamsTimeType string

// TeamCampaignDonationsParams defines parameters for TeamCampaignDonations.
type TeamCampaignDonationsParams struct {
	// CompletedBefore Returns only donations that have been completed before the given moment in ISO8601 format
	CompletedBefore *string `form:"completed_before,omitempty" json:"completed_before,omitempty"`

	// CompletedAfter Returns only donations that have been completed after the given moment in ISO8601 format
	CompletedAfter *string `form:"completed_after,omitempty" json:"completed_after,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// TeamCampaignLeaderboardControllerDonorParams defines parameters for TeamCampaignLeaderboardControllerDonor.
type TeamCampaignLeaderboardControllerDonorParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *TeamCampaignLeaderboardControllerDonorParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// TeamCampaignLeaderboardControllerDonorParamsTimeType defines parameters for TeamCampaignLeaderboardControllerDonor.
type TeamCampaignLeaderboardControllerDonorParamsTimeType string

// TeamCampaignMilestonesParams defines parameters for TeamCampaignMilestones.
type TeamCampaignMilestonesParams struct {
	// IncludeDisabled Returns disabled milestones. Defaults to false
	IncludeDisabled *bool `form:"include_disabled,omitempty" json:"include_disabled,omitempty"`

	// CreatedBefore Returns only milestones that have been updated before the given moment in ISO8601 format
	CreatedBefore *string `form:"created_before,omitempty" json:"created_before,omitempty"`

	// CreatedAfter Returns only milestones that have been updated after the given moment in ISO8601 format
	CreatedAfter *string `form:"created_after,omitempty" json:"created_after,omitempty"`

	// UpdatedBefore Returns only milestones that have been updated before the given moment in ISO8601 format
	UpdatedBefore *string `form:"updated_before,omitempty" json:"updated_before,omitempty"`

	// UpdatedAfter Returns only milestones that have been updated after the given moment in ISO8601 format
	UpdatedAfter *string `form:"updated_after,omitempty" json:"updated_after,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// TeamCampaignPollsParams defines parameters for TeamCampaignPolls.
type TeamCampaignPollsParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// TeamCampaignRewardsParams defines parameters for TeamCampaignRewards.
type TeamCampaignRewardsParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// TeamCampaignSchedulesParams defines parameters for TeamCampaignSchedules.
type TeamCampaignSchedulesParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// TeamCampaignSupportingCampaignsParams defines parameters for TeamCampaignSupportingCampaigns.
type TeamCampaignSupportingCampaignsParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// TeamCampaignChallengesParams defines parameters for TeamCampaignChallenges.
type TeamCampaignChallengesParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// TeamCampaignLeaderboardControllerUserParams defines parameters for TeamCampaignLeaderboardControllerUser.
type TeamCampaignLeaderboardControllerUserParams struct {
	// TimeType The time range to use in leaderboard generation
	TimeType *TeamCampaignLeaderboardControllerUserParamsTimeType `form:"time_type,omitempty" json:"time_type,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// TeamCampaignLeaderboardControllerUserParamsTimeType defines parameters for TeamCampaignLeaderboardControllerUser.
type TeamCampaignLeaderboardControllerUserParamsTimeType string

// TeamMembersParams defines parameters for TeamMembers.
type TeamMembersParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// TeamTeamCampaignsParams defines parameters for TeamTeamCampaigns.
type TeamTeamCampaignsParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// UserCampaignsParams defines parameters for UserCampaigns.
type UserCampaignsParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// UserIntegrationEventsParams defines parameters for UserIntegrationEvents.
type UserIntegrationEventsParams struct {
	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// UserTeamsParams defines parameters for UserTeams.
type UserTeamsParams struct {
	// Role Returns only teams where a user has a specific role
	Role *string `form:"role,omitempty" json:"role,omitempty"`

	// After Returns records after the given cursor
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Returns records before the given cursor
	Before *string `form:"before,omitempty" json:"before,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// V5ApiWebOauthAuthorizeJSONBody defines parameters for V5ApiWebOauthAuthorize.
type V5ApiWebOauthAuthorizeJSONBody = map[string]interface{}

// V5ApiWebOauthAuthorizeParams defines parameters for V5ApiWebOauthAuthorize.
type V5ApiWebOauthAuthorizeParams struct {
	// ClientId Client Id
	ClientId string `form:"client_id" json:"client_id"`

	// RedirectUri Redirect URI
	RedirectUri string `form:"redirect_uri" json:"redirect_uri"`

	// ResponseType Response Type
	ResponseType V5ApiWebOauthAuthorizeParamsResponseType `form:"response_type" json:"response_type"`

	// Scope Scope
	Scope *V5ApiWebOauthAuthorizeParamsScope `form:"scope,omitempty" json:"scope,omitempty"`
}

// V5ApiWebOauthAuthorizeParamsResponseType defines parameters for V5ApiWebOauthAuthorize.
type V5ApiWebOauthAuthorizeParamsResponseType string

// V5ApiWebOauthAuthorizeParamsScope defines parameters for V5ApiWebOauthAuthorize.
type V5ApiWebOauthAuthorizeParamsScope string

// V5ApiWebOauthTokenJSONBody defines parameters for V5ApiWebOauthToken.
type V5ApiWebOauthTokenJSONBody = map[string]interface{}

// V5ApiWebOauthTokenParams defines parameters for V5ApiWebOauthToken.
type V5ApiWebOauthTokenParams struct {
	// ClientId Client Id
	ClientId string `form:"client_id" json:"client_id"`

	// ClientSecret Client Secret
	ClientSecret string `form:"client_secret" json:"client_secret"`

	// GrantType Grant Type
	GrantType V5ApiWebOauthTokenParamsGrantType `form:"grant_type" json:"grant_type"`

	// Code Authorization Code; `*required` if using `authorization_code` grant type
	Code *string `form:"code,omitempty" json:"code,omitempty"`

	// Scope Scope
	Scope *V5ApiWebOauthTokenParamsScope `form:"scope,omitempty" json:"scope,omitempty"`
}

// V5ApiWebOauthTokenParamsGrantType defines parameters for V5ApiWebOauthToken.
type V5ApiWebOauthTokenParamsGrantType string

// V5ApiWebOauthTokenParamsScope defines parameters for V5ApiWebOauthToken.
type V5ApiWebOauthTokenParamsScope string

// V5ApiWebOauthAuthorizeJSONRequestBody defines body for V5ApiWebOauthAuthorize for application/json ContentType.
type V5ApiWebOauthAuthorizeJSONRequestBody = V5ApiWebOauthAuthorizeJSONBody

// V5ApiWebOauthTokenJSONRequestBody defines body for V5ApiWebOauthToken for application/json ContentType.
type V5ApiWebOauthTokenJSONRequestBody = V5ApiWebOauthTokenJSONBody

// AsUser returns the union data inside the CurrentUserObj_Data as a User
func (t CurrentUserObj_Data) AsUser() (User, error) {
	var body User
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUser overwrites any union data inside the CurrentUserObj_Data as the provided User
func (t *CurrentUserObj_Data) FromUser(v User) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUser performs a merge with any union data inside the CurrentUserObj_Data, using the provided User
func (t *CurrentUserObj_Data) MergeUser(v User) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CurrentUserObj_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CurrentUserObj_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCampaign returns the union data inside the Event as a Campaign
func (t Event) AsCampaign() (Campaign, error) {
	var body Campaign
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCampaign overwrites any union data inside the Event as the provided Campaign
func (t *Event) FromCampaign(v Campaign) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCampaign performs a merge with any union data inside the Event, using the provided Campaign
func (t *Event) MergeCampaign(v Campaign) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsTeamCampaign returns the union data inside the Event as a TeamCampaign
func (t Event) AsTeamCampaign() (TeamCampaign, error) {
	var body TeamCampaign
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTeamCampaign overwrites any union data inside the Event as the provided TeamCampaign
func (t *Event) FromTeamCampaign(v TeamCampaign) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTeamCampaign performs a merge with any union data inside the Event, using the provided TeamCampaign
func (t *Event) MergeTeamCampaign(v TeamCampaign) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Event) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Event) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMoney returns the union data inside the LeaderboardEntry_Amount as a Money
func (t LeaderboardEntry_Amount) AsMoney() (Money, error) {
	var body Money
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMoney overwrites any union data inside the LeaderboardEntry_Amount as the provided Money
func (t *LeaderboardEntry_Amount) FromMoney(v Money) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMoney performs a merge with any union data inside the LeaderboardEntry_Amount, using the provided Money
func (t *LeaderboardEntry_Amount) MergeMoney(v Money) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsMeasuredUnit returns the union data inside the LeaderboardEntry_Amount as a MeasuredUnit
func (t LeaderboardEntry_Amount) AsMeasuredUnit() (MeasuredUnit, error) {
	var body MeasuredUnit
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMeasuredUnit overwrites any union data inside the LeaderboardEntry_Amount as the provided MeasuredUnit
func (t *LeaderboardEntry_Amount) FromMeasuredUnit(v MeasuredUnit) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMeasuredUnit performs a merge with any union data inside the LeaderboardEntry_Amount, using the provided MeasuredUnit
func (t *LeaderboardEntry_Amount) MergeMeasuredUnit(v MeasuredUnit) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t LeaderboardEntry_Amount) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LeaderboardEntry_Amount) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUser returns the union data inside the NullableUserResponse_Data as a User
func (t NullableUserResponse_Data) AsUser() (User, error) {
	var body User
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUser overwrites any union data inside the NullableUserResponse_Data as the provided User
func (t *NullableUserResponse_Data) FromUser(v User) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUser performs a merge with any union data inside the NullableUserResponse_Data, using the provided User
func (t *NullableUserResponse_Data) MergeUser(v User) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t NullableUserResponse_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NullableUserResponse_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCampaign request
	GetCampaign(ctx context.Context, campaignId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CampaignDonations request
	CampaignDonations(ctx context.Context, campaignId string, params *CampaignDonationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CampaignLeaderboardControllerDonor request
	CampaignLeaderboardControllerDonor(ctx context.Context, campaignId string, params *CampaignLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CampaignMilestones request
	CampaignMilestones(ctx context.Context, campaignId string, params *CampaignMilestonesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CampaignPolls request
	CampaignPolls(ctx context.Context, campaignId string, params *CampaignPollsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CampaignRewards request
	CampaignRewards(ctx context.Context, campaignId string, params *CampaignRewardsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CampaignSchedules request
	CampaignSchedules(ctx context.Context, campaignId string, params *CampaignSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CampaignChallenges request
	CampaignChallenges(ctx context.Context, campaignId string, params *CampaignChallengesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCause request
	GetCause(ctx context.Context, causeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CauseCampaigns request
	CauseCampaigns(ctx context.Context, causeId string, params *CauseCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CauseLeaderboardControllerConfigured request
	CauseLeaderboardControllerConfigured(ctx context.Context, causeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CauseLeaderboardControllerDonor request
	CauseLeaderboardControllerDonor(ctx context.Context, causeId string, params *CauseLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CauseFundraisingEvents request
	CauseFundraisingEvents(ctx context.Context, causeId string, params *CauseFundraisingEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CauseLeaderboardControllerTeam request
	CauseLeaderboardControllerTeam(ctx context.Context, causeId string, params *CauseLeaderboardControllerTeamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CauseLeaderboardControllerUser request
	CauseLeaderboardControllerUser(ctx context.Context, causeId string, params *CauseLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserControllerCurrentUser request
	UserControllerCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFundraisingEvent request
	GetFundraisingEvent(ctx context.Context, fundraisingEventId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FundraisingEventLeaderboardControllerConfigured request
	FundraisingEventLeaderboardControllerConfigured(ctx context.Context, fundraisingEventId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FundraisingEventLeaderboardControllerDonor request
	FundraisingEventLeaderboardControllerDonor(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FundraisingEventSupportingEvents request
	FundraisingEventSupportingEvents(ctx context.Context, fundraisingEventId string, params *FundraisingEventSupportingEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FundraisingEventLeaderboardControllerTeamFitnessDistance request
	FundraisingEventLeaderboardControllerTeamFitnessDistance(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerTeamFitnessDistanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FundraisingEventLeaderboardControllerTeamFitnessTime request
	FundraisingEventLeaderboardControllerTeamFitnessTime(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerTeamFitnessTimeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FundraisingEventLeaderboardControllerTeam request
	FundraisingEventLeaderboardControllerTeam(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerTeamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FundraisingEventLeaderboardControllerUserFitnessDistance request
	FundraisingEventLeaderboardControllerUserFitnessDistance(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerUserFitnessDistanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FundraisingEventLeaderboardControllerUserFitnessTime request
	FundraisingEventLeaderboardControllerUserFitnessTime(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerUserFitnessTimeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FundraisingEventLeaderboardControllerUser request
	FundraisingEventLeaderboardControllerUser(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamCampaign request
	GetTeamCampaign(ctx context.Context, teamCampaignId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamCampaignDonations request
	TeamCampaignDonations(ctx context.Context, teamCampaignId string, params *TeamCampaignDonationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamCampaignLeaderboardControllerDonor request
	TeamCampaignLeaderboardControllerDonor(ctx context.Context, teamCampaignId string, params *TeamCampaignLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamCampaignMilestones request
	TeamCampaignMilestones(ctx context.Context, teamCampaignId string, params *TeamCampaignMilestonesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamCampaignPolls request
	TeamCampaignPolls(ctx context.Context, teamCampaignId string, params *TeamCampaignPollsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamCampaignRewards request
	TeamCampaignRewards(ctx context.Context, teamCampaignId string, params *TeamCampaignRewardsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamCampaignSchedules request
	TeamCampaignSchedules(ctx context.Context, teamCampaignId string, params *TeamCampaignSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamCampaignSupportingCampaigns request
	TeamCampaignSupportingCampaigns(ctx context.Context, teamCampaignId string, params *TeamCampaignSupportingCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamCampaignChallenges request
	TeamCampaignChallenges(ctx context.Context, teamCampaignId string, params *TeamCampaignChallengesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamCampaignLeaderboardControllerUser request
	TeamCampaignLeaderboardControllerUser(ctx context.Context, teamCampaignId string, params *TeamCampaignLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeam request
	GetTeam(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamMembers request
	TeamMembers(ctx context.Context, teamId string, params *TeamMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamTeamCampaigns request
	TeamTeamCampaigns(ctx context.Context, teamId string, params *TeamTeamCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserCampaigns request
	UserCampaigns(ctx context.Context, userId string, params *UserCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserIntegrationEvents request
	UserIntegrationEvents(ctx context.Context, userId string, params *UserIntegrationEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserTeams request
	UserTeams(ctx context.Context, userId string, params *UserTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebOauthAuthorize request with any body
	V5ApiWebOauthAuthorizeWithBody(ctx context.Context, params *V5ApiWebOauthAuthorizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V5ApiWebOauthAuthorize(ctx context.Context, params *V5ApiWebOauthAuthorizeParams, body V5ApiWebOauthAuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V5ApiWebOauthToken request with any body
	V5ApiWebOauthTokenWithBody(ctx context.Context, params *V5ApiWebOauthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V5ApiWebOauthToken(ctx context.Context, params *V5ApiWebOauthTokenParams, body V5ApiWebOauthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCampaign(ctx context.Context, campaignId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCampaignRequest(c.Server, campaignId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CampaignDonations(ctx context.Context, campaignId string, params *CampaignDonationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCampaignDonationsRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CampaignLeaderboardControllerDonor(ctx context.Context, campaignId string, params *CampaignLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCampaignLeaderboardControllerDonorRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CampaignMilestones(ctx context.Context, campaignId string, params *CampaignMilestonesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCampaignMilestonesRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CampaignPolls(ctx context.Context, campaignId string, params *CampaignPollsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCampaignPollsRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CampaignRewards(ctx context.Context, campaignId string, params *CampaignRewardsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCampaignRewardsRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CampaignSchedules(ctx context.Context, campaignId string, params *CampaignSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCampaignSchedulesRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CampaignChallenges(ctx context.Context, campaignId string, params *CampaignChallengesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCampaignChallengesRequest(c.Server, campaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCause(ctx context.Context, causeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCauseRequest(c.Server, causeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CauseCampaigns(ctx context.Context, causeId string, params *CauseCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCauseCampaignsRequest(c.Server, causeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CauseLeaderboardControllerConfigured(ctx context.Context, causeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCauseLeaderboardControllerConfiguredRequest(c.Server, causeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CauseLeaderboardControllerDonor(ctx context.Context, causeId string, params *CauseLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCauseLeaderboardControllerDonorRequest(c.Server, causeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CauseFundraisingEvents(ctx context.Context, causeId string, params *CauseFundraisingEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCauseFundraisingEventsRequest(c.Server, causeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CauseLeaderboardControllerTeam(ctx context.Context, causeId string, params *CauseLeaderboardControllerTeamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCauseLeaderboardControllerTeamRequest(c.Server, causeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CauseLeaderboardControllerUser(ctx context.Context, causeId string, params *CauseLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCauseLeaderboardControllerUserRequest(c.Server, causeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserControllerCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserControllerCurrentUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFundraisingEvent(ctx context.Context, fundraisingEventId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFundraisingEventRequest(c.Server, fundraisingEventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FundraisingEventLeaderboardControllerConfigured(ctx context.Context, fundraisingEventId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFundraisingEventLeaderboardControllerConfiguredRequest(c.Server, fundraisingEventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FundraisingEventLeaderboardControllerDonor(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFundraisingEventLeaderboardControllerDonorRequest(c.Server, fundraisingEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FundraisingEventSupportingEvents(ctx context.Context, fundraisingEventId string, params *FundraisingEventSupportingEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFundraisingEventSupportingEventsRequest(c.Server, fundraisingEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FundraisingEventLeaderboardControllerTeamFitnessDistance(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerTeamFitnessDistanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFundraisingEventLeaderboardControllerTeamFitnessDistanceRequest(c.Server, fundraisingEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FundraisingEventLeaderboardControllerTeamFitnessTime(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerTeamFitnessTimeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFundraisingEventLeaderboardControllerTeamFitnessTimeRequest(c.Server, fundraisingEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FundraisingEventLeaderboardControllerTeam(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerTeamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFundraisingEventLeaderboardControllerTeamRequest(c.Server, fundraisingEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FundraisingEventLeaderboardControllerUserFitnessDistance(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerUserFitnessDistanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFundraisingEventLeaderboardControllerUserFitnessDistanceRequest(c.Server, fundraisingEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FundraisingEventLeaderboardControllerUserFitnessTime(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerUserFitnessTimeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFundraisingEventLeaderboardControllerUserFitnessTimeRequest(c.Server, fundraisingEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FundraisingEventLeaderboardControllerUser(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFundraisingEventLeaderboardControllerUserRequest(c.Server, fundraisingEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamCampaign(ctx context.Context, teamCampaignId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamCampaignRequest(c.Server, teamCampaignId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamCampaignDonations(ctx context.Context, teamCampaignId string, params *TeamCampaignDonationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamCampaignDonationsRequest(c.Server, teamCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamCampaignLeaderboardControllerDonor(ctx context.Context, teamCampaignId string, params *TeamCampaignLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamCampaignLeaderboardControllerDonorRequest(c.Server, teamCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamCampaignMilestones(ctx context.Context, teamCampaignId string, params *TeamCampaignMilestonesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamCampaignMilestonesRequest(c.Server, teamCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamCampaignPolls(ctx context.Context, teamCampaignId string, params *TeamCampaignPollsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamCampaignPollsRequest(c.Server, teamCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamCampaignRewards(ctx context.Context, teamCampaignId string, params *TeamCampaignRewardsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamCampaignRewardsRequest(c.Server, teamCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamCampaignSchedules(ctx context.Context, teamCampaignId string, params *TeamCampaignSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamCampaignSchedulesRequest(c.Server, teamCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamCampaignSupportingCampaigns(ctx context.Context, teamCampaignId string, params *TeamCampaignSupportingCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamCampaignSupportingCampaignsRequest(c.Server, teamCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamCampaignChallenges(ctx context.Context, teamCampaignId string, params *TeamCampaignChallengesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamCampaignChallengesRequest(c.Server, teamCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamCampaignLeaderboardControllerUser(ctx context.Context, teamCampaignId string, params *TeamCampaignLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamCampaignLeaderboardControllerUserRequest(c.Server, teamCampaignId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeam(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamMembers(ctx context.Context, teamId string, params *TeamMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamMembersRequest(c.Server, teamId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamTeamCampaigns(ctx context.Context, teamId string, params *TeamTeamCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamTeamCampaignsRequest(c.Server, teamId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserCampaigns(ctx context.Context, userId string, params *UserCampaignsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserCampaignsRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserIntegrationEvents(ctx context.Context, userId string, params *UserIntegrationEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserIntegrationEventsRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserTeams(ctx context.Context, userId string, params *UserTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserTeamsRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebOauthAuthorizeWithBody(ctx context.Context, params *V5ApiWebOauthAuthorizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebOauthAuthorizeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebOauthAuthorize(ctx context.Context, params *V5ApiWebOauthAuthorizeParams, body V5ApiWebOauthAuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebOauthAuthorizeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebOauthTokenWithBody(ctx context.Context, params *V5ApiWebOauthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebOauthTokenRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V5ApiWebOauthToken(ctx context.Context, params *V5ApiWebOauthTokenParams, body V5ApiWebOauthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV5ApiWebOauthTokenRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCampaignRequest generates requests for GetCampaign
func NewGetCampaignRequest(server string, campaignId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/campaigns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCampaignDonationsRequest generates requests for CampaignDonations
func NewCampaignDonationsRequest(server string, campaignId string, params *CampaignDonationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/campaigns/%s/donations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CompletedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed_before", runtime.ParamLocationQuery, *params.CompletedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CompletedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed_after", runtime.ParamLocationQuery, *params.CompletedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCampaignLeaderboardControllerDonorRequest generates requests for CampaignLeaderboardControllerDonor
func NewCampaignLeaderboardControllerDonorRequest(server string, campaignId string, params *CampaignLeaderboardControllerDonorParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/campaigns/%s/donor_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCampaignMilestonesRequest generates requests for CampaignMilestones
func NewCampaignMilestonesRequest(server string, campaignId string, params *CampaignMilestonesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/campaigns/%s/milestones", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeDisabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_disabled", runtime.ParamLocationQuery, *params.IncludeDisabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_before", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_after", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdatedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_before", runtime.ParamLocationQuery, *params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdatedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_after", runtime.ParamLocationQuery, *params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCampaignPollsRequest generates requests for CampaignPolls
func NewCampaignPollsRequest(server string, campaignId string, params *CampaignPollsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/campaigns/%s/polls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCampaignRewardsRequest generates requests for CampaignRewards
func NewCampaignRewardsRequest(server string, campaignId string, params *CampaignRewardsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/campaigns/%s/rewards", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCampaignSchedulesRequest generates requests for CampaignSchedules
func NewCampaignSchedulesRequest(server string, campaignId string, params *CampaignSchedulesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/campaigns/%s/schedules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCampaignChallengesRequest generates requests for CampaignChallenges
func NewCampaignChallengesRequest(server string, campaignId string, params *CampaignChallengesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, campaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/campaigns/%s/targets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCauseRequest generates requests for GetCause
func NewGetCauseRequest(server string, causeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, causeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/causes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCauseCampaignsRequest generates requests for CauseCampaigns
func NewCauseCampaignsRequest(server string, causeId string, params *CauseCampaignsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, causeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/causes/%s/campaigns", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCauseLeaderboardControllerConfiguredRequest generates requests for CauseLeaderboardControllerConfigured
func NewCauseLeaderboardControllerConfiguredRequest(server string, causeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, causeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/causes/%s/configured_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCauseLeaderboardControllerDonorRequest generates requests for CauseLeaderboardControllerDonor
func NewCauseLeaderboardControllerDonorRequest(server string, causeId string, params *CauseLeaderboardControllerDonorParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, causeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/causes/%s/donor_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCauseFundraisingEventsRequest generates requests for CauseFundraisingEvents
func NewCauseFundraisingEventsRequest(server string, causeId string, params *CauseFundraisingEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, causeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/causes/%s/fundraising_events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCauseLeaderboardControllerTeamRequest generates requests for CauseLeaderboardControllerTeam
func NewCauseLeaderboardControllerTeamRequest(server string, causeId string, params *CauseLeaderboardControllerTeamParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, causeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/causes/%s/team_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCauseLeaderboardControllerUserRequest generates requests for CauseLeaderboardControllerUser
func NewCauseLeaderboardControllerUserRequest(server string, causeId string, params *CauseLeaderboardControllerUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, causeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/causes/%s/user_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserControllerCurrentUserRequest generates requests for UserControllerCurrentUser
func NewUserControllerCurrentUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/current-user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFundraisingEventRequest generates requests for GetFundraisingEvent
func NewGetFundraisingEventRequest(server string, fundraisingEventId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFundraisingEventLeaderboardControllerConfiguredRequest generates requests for FundraisingEventLeaderboardControllerConfigured
func NewFundraisingEventLeaderboardControllerConfiguredRequest(server string, fundraisingEventId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s/configured_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFundraisingEventLeaderboardControllerDonorRequest generates requests for FundraisingEventLeaderboardControllerDonor
func NewFundraisingEventLeaderboardControllerDonorRequest(server string, fundraisingEventId string, params *FundraisingEventLeaderboardControllerDonorParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s/donor_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFundraisingEventSupportingEventsRequest generates requests for FundraisingEventSupportingEvents
func NewFundraisingEventSupportingEventsRequest(server string, fundraisingEventId string, params *FundraisingEventSupportingEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s/supporting_events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFundraisingEventLeaderboardControllerTeamFitnessDistanceRequest generates requests for FundraisingEventLeaderboardControllerTeamFitnessDistance
func NewFundraisingEventLeaderboardControllerTeamFitnessDistanceRequest(server string, fundraisingEventId string, params *FundraisingEventLeaderboardControllerTeamFitnessDistanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s/team_fitness_distance_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFundraisingEventLeaderboardControllerTeamFitnessTimeRequest generates requests for FundraisingEventLeaderboardControllerTeamFitnessTime
func NewFundraisingEventLeaderboardControllerTeamFitnessTimeRequest(server string, fundraisingEventId string, params *FundraisingEventLeaderboardControllerTeamFitnessTimeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s/team_fitness_time_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFundraisingEventLeaderboardControllerTeamRequest generates requests for FundraisingEventLeaderboardControllerTeam
func NewFundraisingEventLeaderboardControllerTeamRequest(server string, fundraisingEventId string, params *FundraisingEventLeaderboardControllerTeamParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s/team_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFundraisingEventLeaderboardControllerUserFitnessDistanceRequest generates requests for FundraisingEventLeaderboardControllerUserFitnessDistance
func NewFundraisingEventLeaderboardControllerUserFitnessDistanceRequest(server string, fundraisingEventId string, params *FundraisingEventLeaderboardControllerUserFitnessDistanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s/user_fitness_distance_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFundraisingEventLeaderboardControllerUserFitnessTimeRequest generates requests for FundraisingEventLeaderboardControllerUserFitnessTime
func NewFundraisingEventLeaderboardControllerUserFitnessTimeRequest(server string, fundraisingEventId string, params *FundraisingEventLeaderboardControllerUserFitnessTimeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s/user_fitness_time_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFundraisingEventLeaderboardControllerUserRequest generates requests for FundraisingEventLeaderboardControllerUser
func NewFundraisingEventLeaderboardControllerUserRequest(server string, fundraisingEventId string, params *FundraisingEventLeaderboardControllerUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, fundraisingEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/fundraising_events/%s/user_leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamCampaignRequest generates requests for GetTeamCampaign
func NewGetTeamCampaignRequest(server string, teamCampaignId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamCampaignDonationsRequest generates requests for TeamCampaignDonations
func NewTeamCampaignDonationsRequest(server string, teamCampaignId string, params *TeamCampaignDonationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s/donations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CompletedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed_before", runtime.ParamLocationQuery, *params.CompletedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CompletedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "completed_after", runtime.ParamLocationQuery, *params.CompletedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamCampaignLeaderboardControllerDonorRequest generates requests for TeamCampaignLeaderboardControllerDonor
func NewTeamCampaignLeaderboardControllerDonorRequest(server string, teamCampaignId string, params *TeamCampaignLeaderboardControllerDonorParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s/donor_leaderboards", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamCampaignMilestonesRequest generates requests for TeamCampaignMilestones
func NewTeamCampaignMilestonesRequest(server string, teamCampaignId string, params *TeamCampaignMilestonesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s/milestones", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeDisabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_disabled", runtime.ParamLocationQuery, *params.IncludeDisabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_before", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_after", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdatedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_before", runtime.ParamLocationQuery, *params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UpdatedAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_after", runtime.ParamLocationQuery, *params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamCampaignPollsRequest generates requests for TeamCampaignPolls
func NewTeamCampaignPollsRequest(server string, teamCampaignId string, params *TeamCampaignPollsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s/polls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamCampaignRewardsRequest generates requests for TeamCampaignRewards
func NewTeamCampaignRewardsRequest(server string, teamCampaignId string, params *TeamCampaignRewardsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s/rewards", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamCampaignSchedulesRequest generates requests for TeamCampaignSchedules
func NewTeamCampaignSchedulesRequest(server string, teamCampaignId string, params *TeamCampaignSchedulesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s/schedules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamCampaignSupportingCampaignsRequest generates requests for TeamCampaignSupportingCampaigns
func NewTeamCampaignSupportingCampaignsRequest(server string, teamCampaignId string, params *TeamCampaignSupportingCampaignsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s/supporting_campaigns", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamCampaignChallengesRequest generates requests for TeamCampaignChallenges
func NewTeamCampaignChallengesRequest(server string, teamCampaignId string, params *TeamCampaignChallengesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s/targets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamCampaignLeaderboardControllerUserRequest generates requests for TeamCampaignLeaderboardControllerUser
func NewTeamCampaignLeaderboardControllerUserRequest(server string, teamCampaignId string, params *TeamCampaignLeaderboardControllerUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, teamCampaignId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/team_campaigns/%s/user_leaderboards", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TimeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_type", runtime.ParamLocationQuery, *params.TimeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamRequest generates requests for GetTeam
func NewGetTeamRequest(server string, teamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamMembersRequest generates requests for TeamMembers
func NewTeamMembersRequest(server string, teamId string, params *TeamMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/teams/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamTeamCampaignsRequest generates requests for TeamTeamCampaigns
func NewTeamTeamCampaignsRequest(server string, teamId string, params *TeamTeamCampaignsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/teams/%s/team_campaigns", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserCampaignsRequest generates requests for UserCampaigns
func NewUserCampaignsRequest(server string, userId string, params *UserCampaignsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/users/%s/campaigns", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserIntegrationEventsRequest generates requests for UserIntegrationEvents
func NewUserIntegrationEventsRequest(server string, userId string, params *UserIntegrationEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/users/%s/integration_events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserTeamsRequest generates requests for UserTeams
func NewUserTeamsRequest(server string, userId string, params *UserTeamsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/public/users/%s/teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Role != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, *params.Role); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV5ApiWebOauthAuthorizeRequest calls the generic V5ApiWebOauthAuthorize builder with application/json body
func NewV5ApiWebOauthAuthorizeRequest(server string, params *V5ApiWebOauthAuthorizeParams, body V5ApiWebOauthAuthorizeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV5ApiWebOauthAuthorizeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewV5ApiWebOauthAuthorizeRequestWithBody generates requests for V5ApiWebOauthAuthorize with any type of body
func NewV5ApiWebOauthAuthorizeRequestWithBody(server string, params *V5ApiWebOauthAuthorizeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, params.ClientId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, params.RedirectUri); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "response_type", runtime.ParamLocationQuery, params.ResponseType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Scope != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV5ApiWebOauthTokenRequest calls the generic V5ApiWebOauthToken builder with application/json body
func NewV5ApiWebOauthTokenRequest(server string, params *V5ApiWebOauthTokenParams, body V5ApiWebOauthTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV5ApiWebOauthTokenRequestWithBody(server, params, "application/json", bodyReader)
}

// NewV5ApiWebOauthTokenRequestWithBody generates requests for V5ApiWebOauthToken with any type of body
func NewV5ApiWebOauthTokenRequestWithBody(server string, params *V5ApiWebOauthTokenParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, params.ClientId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_secret", runtime.ParamLocationQuery, params.ClientSecret); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "grant_type", runtime.ParamLocationQuery, params.GrantType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Code != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, *params.Code); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Scope != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
	OkOnNon200 bool
}

// StatusFailureError is the error returned if the response was a non-success code.
type StatusFailureError struct {
	Resp *http.Response
	Err  error
}

func (s StatusFailureError) Error() string {
	if s.Err != nil {
		return s.Err.Error()
	}
	return fmt.Sprintf("got non success response code: %d", s.Resp.StatusCode)
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, OkOnNon200 bool, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{
		ClientInterface: client,
		OkOnNon200:      OkOnNon200,
	}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCampaign request
	GetCampaignWithResponse(ctx context.Context, campaignId string, reqEditors ...RequestEditorFn) (*GetCampaignResponse, error)

	// CampaignDonations request
	CampaignDonationsWithResponse(ctx context.Context, campaignId string, params *CampaignDonationsParams, reqEditors ...RequestEditorFn) (*CampaignDonationsResponse, error)

	// CampaignLeaderboardControllerDonor request
	CampaignLeaderboardControllerDonorWithResponse(ctx context.Context, campaignId string, params *CampaignLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*CampaignLeaderboardControllerDonorResponse, error)

	// CampaignMilestones request
	CampaignMilestonesWithResponse(ctx context.Context, campaignId string, params *CampaignMilestonesParams, reqEditors ...RequestEditorFn) (*CampaignMilestonesResponse, error)

	// CampaignPolls request
	CampaignPollsWithResponse(ctx context.Context, campaignId string, params *CampaignPollsParams, reqEditors ...RequestEditorFn) (*CampaignPollsResponse, error)

	// CampaignRewards request
	CampaignRewardsWithResponse(ctx context.Context, campaignId string, params *CampaignRewardsParams, reqEditors ...RequestEditorFn) (*CampaignRewardsResponse, error)

	// CampaignSchedules request
	CampaignSchedulesWithResponse(ctx context.Context, campaignId string, params *CampaignSchedulesParams, reqEditors ...RequestEditorFn) (*CampaignSchedulesResponse, error)

	// CampaignChallenges request
	CampaignChallengesWithResponse(ctx context.Context, campaignId string, params *CampaignChallengesParams, reqEditors ...RequestEditorFn) (*CampaignChallengesResponse, error)

	// GetCause request
	GetCauseWithResponse(ctx context.Context, causeId string, reqEditors ...RequestEditorFn) (*GetCauseResponse, error)

	// CauseCampaigns request
	CauseCampaignsWithResponse(ctx context.Context, causeId string, params *CauseCampaignsParams, reqEditors ...RequestEditorFn) (*CauseCampaignsResponse, error)

	// CauseLeaderboardControllerConfigured request
	CauseLeaderboardControllerConfiguredWithResponse(ctx context.Context, causeId string, reqEditors ...RequestEditorFn) (*CauseLeaderboardControllerConfiguredResponse, error)

	// CauseLeaderboardControllerDonor request
	CauseLeaderboardControllerDonorWithResponse(ctx context.Context, causeId string, params *CauseLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*CauseLeaderboardControllerDonorResponse, error)

	// CauseFundraisingEvents request
	CauseFundraisingEventsWithResponse(ctx context.Context, causeId string, params *CauseFundraisingEventsParams, reqEditors ...RequestEditorFn) (*CauseFundraisingEventsResponse, error)

	// CauseLeaderboardControllerTeam request
	CauseLeaderboardControllerTeamWithResponse(ctx context.Context, causeId string, params *CauseLeaderboardControllerTeamParams, reqEditors ...RequestEditorFn) (*CauseLeaderboardControllerTeamResponse, error)

	// CauseLeaderboardControllerUser request
	CauseLeaderboardControllerUserWithResponse(ctx context.Context, causeId string, params *CauseLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*CauseLeaderboardControllerUserResponse, error)

	// UserControllerCurrentUser request
	UserControllerCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserControllerCurrentUserResponse, error)

	// GetFundraisingEvent request
	GetFundraisingEventWithResponse(ctx context.Context, fundraisingEventId string, reqEditors ...RequestEditorFn) (*GetFundraisingEventResponse, error)

	// FundraisingEventLeaderboardControllerConfigured request
	FundraisingEventLeaderboardControllerConfiguredWithResponse(ctx context.Context, fundraisingEventId string, reqEditors ...RequestEditorFn) (*FundraisingEventLeaderboardControllerConfiguredResponse, error)

	// FundraisingEventLeaderboardControllerDonor request
	FundraisingEventLeaderboardControllerDonorWithResponse(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*FundraisingEventLeaderboardControllerDonorResponse, error)

	// FundraisingEventSupportingEvents request
	FundraisingEventSupportingEventsWithResponse(ctx context.Context, fundraisingEventId string, params *FundraisingEventSupportingEventsParams, reqEditors ...RequestEditorFn) (*FundraisingEventSupportingEventsResponse, error)

	// FundraisingEventLeaderboardControllerTeamFitnessDistance request
	FundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerTeamFitnessDistanceParams, reqEditors ...RequestEditorFn) (*FundraisingEventLeaderboardControllerTeamFitnessDistanceResponse, error)

	// FundraisingEventLeaderboardControllerTeamFitnessTime request
	FundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerTeamFitnessTimeParams, reqEditors ...RequestEditorFn) (*FundraisingEventLeaderboardControllerTeamFitnessTimeResponse, error)

	// FundraisingEventLeaderboardControllerTeam request
	FundraisingEventLeaderboardControllerTeamWithResponse(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerTeamParams, reqEditors ...RequestEditorFn) (*FundraisingEventLeaderboardControllerTeamResponse, error)

	// FundraisingEventLeaderboardControllerUserFitnessDistance request
	FundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerUserFitnessDistanceParams, reqEditors ...RequestEditorFn) (*FundraisingEventLeaderboardControllerUserFitnessDistanceResponse, error)

	// FundraisingEventLeaderboardControllerUserFitnessTime request
	FundraisingEventLeaderboardControllerUserFitnessTimeWithResponse(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerUserFitnessTimeParams, reqEditors ...RequestEditorFn) (*FundraisingEventLeaderboardControllerUserFitnessTimeResponse, error)

	// FundraisingEventLeaderboardControllerUser request
	FundraisingEventLeaderboardControllerUserWithResponse(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*FundraisingEventLeaderboardControllerUserResponse, error)

	// GetTeamCampaign request
	GetTeamCampaignWithResponse(ctx context.Context, teamCampaignId string, reqEditors ...RequestEditorFn) (*GetTeamCampaignResponse, error)

	// TeamCampaignDonations request
	TeamCampaignDonationsWithResponse(ctx context.Context, teamCampaignId string, params *TeamCampaignDonationsParams, reqEditors ...RequestEditorFn) (*TeamCampaignDonationsResponse, error)

	// TeamCampaignLeaderboardControllerDonor request
	TeamCampaignLeaderboardControllerDonorWithResponse(ctx context.Context, teamCampaignId string, params *TeamCampaignLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*TeamCampaignLeaderboardControllerDonorResponse, error)

	// TeamCampaignMilestones request
	TeamCampaignMilestonesWithResponse(ctx context.Context, teamCampaignId string, params *TeamCampaignMilestonesParams, reqEditors ...RequestEditorFn) (*TeamCampaignMilestonesResponse, error)

	// TeamCampaignPolls request
	TeamCampaignPollsWithResponse(ctx context.Context, teamCampaignId string, params *TeamCampaignPollsParams, reqEditors ...RequestEditorFn) (*TeamCampaignPollsResponse, error)

	// TeamCampaignRewards request
	TeamCampaignRewardsWithResponse(ctx context.Context, teamCampaignId string, params *TeamCampaignRewardsParams, reqEditors ...RequestEditorFn) (*TeamCampaignRewardsResponse, error)

	// TeamCampaignSchedules request
	TeamCampaignSchedulesWithResponse(ctx context.Context, teamCampaignId string, params *TeamCampaignSchedulesParams, reqEditors ...RequestEditorFn) (*TeamCampaignSchedulesResponse, error)

	// TeamCampaignSupportingCampaigns request
	TeamCampaignSupportingCampaignsWithResponse(ctx context.Context, teamCampaignId string, params *TeamCampaignSupportingCampaignsParams, reqEditors ...RequestEditorFn) (*TeamCampaignSupportingCampaignsResponse, error)

	// TeamCampaignChallenges request
	TeamCampaignChallengesWithResponse(ctx context.Context, teamCampaignId string, params *TeamCampaignChallengesParams, reqEditors ...RequestEditorFn) (*TeamCampaignChallengesResponse, error)

	// TeamCampaignLeaderboardControllerUser request
	TeamCampaignLeaderboardControllerUserWithResponse(ctx context.Context, teamCampaignId string, params *TeamCampaignLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*TeamCampaignLeaderboardControllerUserResponse, error)

	// GetTeam request
	GetTeamWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error)

	// TeamMembers request
	TeamMembersWithResponse(ctx context.Context, teamId string, params *TeamMembersParams, reqEditors ...RequestEditorFn) (*TeamMembersResponse, error)

	// TeamTeamCampaigns request
	TeamTeamCampaignsWithResponse(ctx context.Context, teamId string, params *TeamTeamCampaignsParams, reqEditors ...RequestEditorFn) (*TeamTeamCampaignsResponse, error)

	// GetUser request
	GetUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// UserCampaigns request
	UserCampaignsWithResponse(ctx context.Context, userId string, params *UserCampaignsParams, reqEditors ...RequestEditorFn) (*UserCampaignsResponse, error)

	// UserIntegrationEvents request
	UserIntegrationEventsWithResponse(ctx context.Context, userId string, params *UserIntegrationEventsParams, reqEditors ...RequestEditorFn) (*UserIntegrationEventsResponse, error)

	// UserTeams request
	UserTeamsWithResponse(ctx context.Context, userId string, params *UserTeamsParams, reqEditors ...RequestEditorFn) (*UserTeamsResponse, error)

	// V5ApiWebOauthAuthorize request with any body
	V5ApiWebOauthAuthorizeWithBodyWithResponse(ctx context.Context, params *V5ApiWebOauthAuthorizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V5ApiWebOauthAuthorizeResponse, error)

	V5ApiWebOauthAuthorizeWithResponse(ctx context.Context, params *V5ApiWebOauthAuthorizeParams, body V5ApiWebOauthAuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*V5ApiWebOauthAuthorizeResponse, error)

	// V5ApiWebOauthToken request with any body
	V5ApiWebOauthTokenWithBodyWithResponse(ctx context.Context, params *V5ApiWebOauthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V5ApiWebOauthTokenResponse, error)

	V5ApiWebOauthTokenWithResponse(ctx context.Context, params *V5ApiWebOauthTokenParams, body V5ApiWebOauthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*V5ApiWebOauthTokenResponse, error)
}

type GetCampaignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *Campaign `json:"data,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r GetCampaignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCampaignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CampaignDonationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r CampaignDonationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CampaignDonationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CampaignLeaderboardControllerDonorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r CampaignLeaderboardControllerDonorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CampaignLeaderboardControllerDonorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CampaignMilestonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r CampaignMilestonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CampaignMilestonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CampaignPollsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r CampaignPollsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CampaignPollsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CampaignRewardsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r CampaignRewardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CampaignRewardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CampaignSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r CampaignSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CampaignSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CampaignChallengesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r CampaignChallengesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CampaignChallengesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *Cause `json:"data,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r GetCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CauseCampaignsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r CauseCampaignsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CauseCampaignsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CauseLeaderboardControllerConfiguredResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Configured Leaderboards Like V3
		Data *ConfiguredLeaderboard `json:"data,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r CauseLeaderboardControllerConfiguredResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CauseLeaderboardControllerConfiguredResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CauseLeaderboardControllerDonorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r CauseLeaderboardControllerDonorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CauseLeaderboardControllerDonorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CauseFundraisingEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r CauseFundraisingEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CauseFundraisingEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CauseLeaderboardControllerTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r CauseLeaderboardControllerTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CauseLeaderboardControllerTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CauseLeaderboardControllerUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r CauseLeaderboardControllerUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CauseLeaderboardControllerUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserControllerCurrentUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CurrentUserObj
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r UserControllerCurrentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserControllerCurrentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFundraisingEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *FundraisingEvent `json:"data,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r GetFundraisingEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFundraisingEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FundraisingEventLeaderboardControllerConfiguredResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Configured Leaderboards Like V3
		Data *ConfiguredLeaderboard `json:"data,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r FundraisingEventLeaderboardControllerConfiguredResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FundraisingEventLeaderboardControllerConfiguredResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FundraisingEventLeaderboardControllerDonorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r FundraisingEventLeaderboardControllerDonorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FundraisingEventLeaderboardControllerDonorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FundraisingEventSupportingEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r FundraisingEventSupportingEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FundraisingEventSupportingEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FundraisingEventLeaderboardControllerTeamFitnessDistanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r FundraisingEventLeaderboardControllerTeamFitnessDistanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FundraisingEventLeaderboardControllerTeamFitnessDistanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FundraisingEventLeaderboardControllerTeamFitnessTimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r FundraisingEventLeaderboardControllerTeamFitnessTimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FundraisingEventLeaderboardControllerTeamFitnessTimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FundraisingEventLeaderboardControllerTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r FundraisingEventLeaderboardControllerTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FundraisingEventLeaderboardControllerTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FundraisingEventLeaderboardControllerUserFitnessDistanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r FundraisingEventLeaderboardControllerUserFitnessDistanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FundraisingEventLeaderboardControllerUserFitnessDistanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FundraisingEventLeaderboardControllerUserFitnessTimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r FundraisingEventLeaderboardControllerUserFitnessTimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FundraisingEventLeaderboardControllerUserFitnessTimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FundraisingEventLeaderboardControllerUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r FundraisingEventLeaderboardControllerUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FundraisingEventLeaderboardControllerUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamCampaignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *TeamCampaign `json:"data,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r GetTeamCampaignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamCampaignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamCampaignDonationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r TeamCampaignDonationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamCampaignDonationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamCampaignLeaderboardControllerDonorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r TeamCampaignLeaderboardControllerDonorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamCampaignLeaderboardControllerDonorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamCampaignMilestonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r TeamCampaignMilestonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamCampaignMilestonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamCampaignPollsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r TeamCampaignPollsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamCampaignPollsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamCampaignRewardsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r TeamCampaignRewardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamCampaignRewardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamCampaignSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r TeamCampaignSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamCampaignSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamCampaignSupportingCampaignsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r TeamCampaignSupportingCampaignsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamCampaignSupportingCampaignsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamCampaignChallengesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r TeamCampaignChallengesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamCampaignChallengesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamCampaignLeaderboardControllerUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r TeamCampaignLeaderboardControllerUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamCampaignLeaderboardControllerUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *Team `json:"data,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r GetTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r TeamMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamTeamCampaignsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r TeamTeamCampaignsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamTeamCampaignsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *User `json:"data,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON422 *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserCampaignsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r UserCampaignsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserCampaignsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserIntegrationEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r UserIntegrationEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserIntegrationEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r UserTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebOauthAuthorizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r V5ApiWebOauthAuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebOauthAuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V5ApiWebOauthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON422      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r V5ApiWebOauthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V5ApiWebOauthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCampaignWithResponse request returning *GetCampaignResponse
func (c *ClientWithResponses) GetCampaignWithResponse(ctx context.Context, campaignId string, reqEditors ...RequestEditorFn) (*GetCampaignResponse, error) {
	rsp, err := c.GetCampaign(ctx, campaignId, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseGetCampaignResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// CampaignDonationsWithResponse request returning *CampaignDonationsResponse
func (c *ClientWithResponses) CampaignDonationsWithResponse(ctx context.Context, campaignId string, params *CampaignDonationsParams, reqEditors ...RequestEditorFn) (*CampaignDonationsResponse, error) {
	rsp, err := c.CampaignDonations(ctx, campaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseCampaignDonationsResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// CampaignLeaderboardControllerDonorWithResponse request returning *CampaignLeaderboardControllerDonorResponse
func (c *ClientWithResponses) CampaignLeaderboardControllerDonorWithResponse(ctx context.Context, campaignId string, params *CampaignLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*CampaignLeaderboardControllerDonorResponse, error) {
	rsp, err := c.CampaignLeaderboardControllerDonor(ctx, campaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseCampaignLeaderboardControllerDonorResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// CampaignMilestonesWithResponse request returning *CampaignMilestonesResponse
func (c *ClientWithResponses) CampaignMilestonesWithResponse(ctx context.Context, campaignId string, params *CampaignMilestonesParams, reqEditors ...RequestEditorFn) (*CampaignMilestonesResponse, error) {
	rsp, err := c.CampaignMilestones(ctx, campaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseCampaignMilestonesResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// CampaignPollsWithResponse request returning *CampaignPollsResponse
func (c *ClientWithResponses) CampaignPollsWithResponse(ctx context.Context, campaignId string, params *CampaignPollsParams, reqEditors ...RequestEditorFn) (*CampaignPollsResponse, error) {
	rsp, err := c.CampaignPolls(ctx, campaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseCampaignPollsResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// CampaignRewardsWithResponse request returning *CampaignRewardsResponse
func (c *ClientWithResponses) CampaignRewardsWithResponse(ctx context.Context, campaignId string, params *CampaignRewardsParams, reqEditors ...RequestEditorFn) (*CampaignRewardsResponse, error) {
	rsp, err := c.CampaignRewards(ctx, campaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseCampaignRewardsResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// CampaignSchedulesWithResponse request returning *CampaignSchedulesResponse
func (c *ClientWithResponses) CampaignSchedulesWithResponse(ctx context.Context, campaignId string, params *CampaignSchedulesParams, reqEditors ...RequestEditorFn) (*CampaignSchedulesResponse, error) {
	rsp, err := c.CampaignSchedules(ctx, campaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseCampaignSchedulesResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// CampaignChallengesWithResponse request returning *CampaignChallengesResponse
func (c *ClientWithResponses) CampaignChallengesWithResponse(ctx context.Context, campaignId string, params *CampaignChallengesParams, reqEditors ...RequestEditorFn) (*CampaignChallengesResponse, error) {
	rsp, err := c.CampaignChallenges(ctx, campaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseCampaignChallengesResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// GetCauseWithResponse request returning *GetCauseResponse
func (c *ClientWithResponses) GetCauseWithResponse(ctx context.Context, causeId string, reqEditors ...RequestEditorFn) (*GetCauseResponse, error) {
	rsp, err := c.GetCause(ctx, causeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseGetCauseResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// CauseCampaignsWithResponse request returning *CauseCampaignsResponse
func (c *ClientWithResponses) CauseCampaignsWithResponse(ctx context.Context, causeId string, params *CauseCampaignsParams, reqEditors ...RequestEditorFn) (*CauseCampaignsResponse, error) {
	rsp, err := c.CauseCampaigns(ctx, causeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseCauseCampaignsResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// CauseLeaderboardControllerConfiguredWithResponse request returning *CauseLeaderboardControllerConfiguredResponse
func (c *ClientWithResponses) CauseLeaderboardControllerConfiguredWithResponse(ctx context.Context, causeId string, reqEditors ...RequestEditorFn) (*CauseLeaderboardControllerConfiguredResponse, error) {
	rsp, err := c.CauseLeaderboardControllerConfigured(ctx, causeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseCauseLeaderboardControllerConfiguredResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// CauseLeaderboardControllerDonorWithResponse request returning *CauseLeaderboardControllerDonorResponse
func (c *ClientWithResponses) CauseLeaderboardControllerDonorWithResponse(ctx context.Context, causeId string, params *CauseLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*CauseLeaderboardControllerDonorResponse, error) {
	rsp, err := c.CauseLeaderboardControllerDonor(ctx, causeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseCauseLeaderboardControllerDonorResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// CauseFundraisingEventsWithResponse request returning *CauseFundraisingEventsResponse
func (c *ClientWithResponses) CauseFundraisingEventsWithResponse(ctx context.Context, causeId string, params *CauseFundraisingEventsParams, reqEditors ...RequestEditorFn) (*CauseFundraisingEventsResponse, error) {
	rsp, err := c.CauseFundraisingEvents(ctx, causeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseCauseFundraisingEventsResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// CauseLeaderboardControllerTeamWithResponse request returning *CauseLeaderboardControllerTeamResponse
func (c *ClientWithResponses) CauseLeaderboardControllerTeamWithResponse(ctx context.Context, causeId string, params *CauseLeaderboardControllerTeamParams, reqEditors ...RequestEditorFn) (*CauseLeaderboardControllerTeamResponse, error) {
	rsp, err := c.CauseLeaderboardControllerTeam(ctx, causeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseCauseLeaderboardControllerTeamResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// CauseLeaderboardControllerUserWithResponse request returning *CauseLeaderboardControllerUserResponse
func (c *ClientWithResponses) CauseLeaderboardControllerUserWithResponse(ctx context.Context, causeId string, params *CauseLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*CauseLeaderboardControllerUserResponse, error) {
	rsp, err := c.CauseLeaderboardControllerUser(ctx, causeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseCauseLeaderboardControllerUserResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// UserControllerCurrentUserWithResponse request returning *UserControllerCurrentUserResponse
func (c *ClientWithResponses) UserControllerCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserControllerCurrentUserResponse, error) {
	rsp, err := c.UserControllerCurrentUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseUserControllerCurrentUserResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// GetFundraisingEventWithResponse request returning *GetFundraisingEventResponse
func (c *ClientWithResponses) GetFundraisingEventWithResponse(ctx context.Context, fundraisingEventId string, reqEditors ...RequestEditorFn) (*GetFundraisingEventResponse, error) {
	rsp, err := c.GetFundraisingEvent(ctx, fundraisingEventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseGetFundraisingEventResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// FundraisingEventLeaderboardControllerConfiguredWithResponse request returning *FundraisingEventLeaderboardControllerConfiguredResponse
func (c *ClientWithResponses) FundraisingEventLeaderboardControllerConfiguredWithResponse(ctx context.Context, fundraisingEventId string, reqEditors ...RequestEditorFn) (*FundraisingEventLeaderboardControllerConfiguredResponse, error) {
	rsp, err := c.FundraisingEventLeaderboardControllerConfigured(ctx, fundraisingEventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseFundraisingEventLeaderboardControllerConfiguredResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// FundraisingEventLeaderboardControllerDonorWithResponse request returning *FundraisingEventLeaderboardControllerDonorResponse
func (c *ClientWithResponses) FundraisingEventLeaderboardControllerDonorWithResponse(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*FundraisingEventLeaderboardControllerDonorResponse, error) {
	rsp, err := c.FundraisingEventLeaderboardControllerDonor(ctx, fundraisingEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseFundraisingEventLeaderboardControllerDonorResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// FundraisingEventSupportingEventsWithResponse request returning *FundraisingEventSupportingEventsResponse
func (c *ClientWithResponses) FundraisingEventSupportingEventsWithResponse(ctx context.Context, fundraisingEventId string, params *FundraisingEventSupportingEventsParams, reqEditors ...RequestEditorFn) (*FundraisingEventSupportingEventsResponse, error) {
	rsp, err := c.FundraisingEventSupportingEvents(ctx, fundraisingEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseFundraisingEventSupportingEventsResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// FundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse request returning *FundraisingEventLeaderboardControllerTeamFitnessDistanceResponse
func (c *ClientWithResponses) FundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerTeamFitnessDistanceParams, reqEditors ...RequestEditorFn) (*FundraisingEventLeaderboardControllerTeamFitnessDistanceResponse, error) {
	rsp, err := c.FundraisingEventLeaderboardControllerTeamFitnessDistance(ctx, fundraisingEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// FundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse request returning *FundraisingEventLeaderboardControllerTeamFitnessTimeResponse
func (c *ClientWithResponses) FundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerTeamFitnessTimeParams, reqEditors ...RequestEditorFn) (*FundraisingEventLeaderboardControllerTeamFitnessTimeResponse, error) {
	rsp, err := c.FundraisingEventLeaderboardControllerTeamFitnessTime(ctx, fundraisingEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseFundraisingEventLeaderboardControllerTeamFitnessTimeResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// FundraisingEventLeaderboardControllerTeamWithResponse request returning *FundraisingEventLeaderboardControllerTeamResponse
func (c *ClientWithResponses) FundraisingEventLeaderboardControllerTeamWithResponse(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerTeamParams, reqEditors ...RequestEditorFn) (*FundraisingEventLeaderboardControllerTeamResponse, error) {
	rsp, err := c.FundraisingEventLeaderboardControllerTeam(ctx, fundraisingEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseFundraisingEventLeaderboardControllerTeamResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// FundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse request returning *FundraisingEventLeaderboardControllerUserFitnessDistanceResponse
func (c *ClientWithResponses) FundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerUserFitnessDistanceParams, reqEditors ...RequestEditorFn) (*FundraisingEventLeaderboardControllerUserFitnessDistanceResponse, error) {
	rsp, err := c.FundraisingEventLeaderboardControllerUserFitnessDistance(ctx, fundraisingEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseFundraisingEventLeaderboardControllerUserFitnessDistanceResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// FundraisingEventLeaderboardControllerUserFitnessTimeWithResponse request returning *FundraisingEventLeaderboardControllerUserFitnessTimeResponse
func (c *ClientWithResponses) FundraisingEventLeaderboardControllerUserFitnessTimeWithResponse(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerUserFitnessTimeParams, reqEditors ...RequestEditorFn) (*FundraisingEventLeaderboardControllerUserFitnessTimeResponse, error) {
	rsp, err := c.FundraisingEventLeaderboardControllerUserFitnessTime(ctx, fundraisingEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseFundraisingEventLeaderboardControllerUserFitnessTimeResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// FundraisingEventLeaderboardControllerUserWithResponse request returning *FundraisingEventLeaderboardControllerUserResponse
func (c *ClientWithResponses) FundraisingEventLeaderboardControllerUserWithResponse(ctx context.Context, fundraisingEventId string, params *FundraisingEventLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*FundraisingEventLeaderboardControllerUserResponse, error) {
	rsp, err := c.FundraisingEventLeaderboardControllerUser(ctx, fundraisingEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseFundraisingEventLeaderboardControllerUserResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// GetTeamCampaignWithResponse request returning *GetTeamCampaignResponse
func (c *ClientWithResponses) GetTeamCampaignWithResponse(ctx context.Context, teamCampaignId string, reqEditors ...RequestEditorFn) (*GetTeamCampaignResponse, error) {
	rsp, err := c.GetTeamCampaign(ctx, teamCampaignId, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseGetTeamCampaignResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// TeamCampaignDonationsWithResponse request returning *TeamCampaignDonationsResponse
func (c *ClientWithResponses) TeamCampaignDonationsWithResponse(ctx context.Context, teamCampaignId string, params *TeamCampaignDonationsParams, reqEditors ...RequestEditorFn) (*TeamCampaignDonationsResponse, error) {
	rsp, err := c.TeamCampaignDonations(ctx, teamCampaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseTeamCampaignDonationsResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// TeamCampaignLeaderboardControllerDonorWithResponse request returning *TeamCampaignLeaderboardControllerDonorResponse
func (c *ClientWithResponses) TeamCampaignLeaderboardControllerDonorWithResponse(ctx context.Context, teamCampaignId string, params *TeamCampaignLeaderboardControllerDonorParams, reqEditors ...RequestEditorFn) (*TeamCampaignLeaderboardControllerDonorResponse, error) {
	rsp, err := c.TeamCampaignLeaderboardControllerDonor(ctx, teamCampaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseTeamCampaignLeaderboardControllerDonorResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// TeamCampaignMilestonesWithResponse request returning *TeamCampaignMilestonesResponse
func (c *ClientWithResponses) TeamCampaignMilestonesWithResponse(ctx context.Context, teamCampaignId string, params *TeamCampaignMilestonesParams, reqEditors ...RequestEditorFn) (*TeamCampaignMilestonesResponse, error) {
	rsp, err := c.TeamCampaignMilestones(ctx, teamCampaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseTeamCampaignMilestonesResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// TeamCampaignPollsWithResponse request returning *TeamCampaignPollsResponse
func (c *ClientWithResponses) TeamCampaignPollsWithResponse(ctx context.Context, teamCampaignId string, params *TeamCampaignPollsParams, reqEditors ...RequestEditorFn) (*TeamCampaignPollsResponse, error) {
	rsp, err := c.TeamCampaignPolls(ctx, teamCampaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseTeamCampaignPollsResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// TeamCampaignRewardsWithResponse request returning *TeamCampaignRewardsResponse
func (c *ClientWithResponses) TeamCampaignRewardsWithResponse(ctx context.Context, teamCampaignId string, params *TeamCampaignRewardsParams, reqEditors ...RequestEditorFn) (*TeamCampaignRewardsResponse, error) {
	rsp, err := c.TeamCampaignRewards(ctx, teamCampaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseTeamCampaignRewardsResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// TeamCampaignSchedulesWithResponse request returning *TeamCampaignSchedulesResponse
func (c *ClientWithResponses) TeamCampaignSchedulesWithResponse(ctx context.Context, teamCampaignId string, params *TeamCampaignSchedulesParams, reqEditors ...RequestEditorFn) (*TeamCampaignSchedulesResponse, error) {
	rsp, err := c.TeamCampaignSchedules(ctx, teamCampaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseTeamCampaignSchedulesResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// TeamCampaignSupportingCampaignsWithResponse request returning *TeamCampaignSupportingCampaignsResponse
func (c *ClientWithResponses) TeamCampaignSupportingCampaignsWithResponse(ctx context.Context, teamCampaignId string, params *TeamCampaignSupportingCampaignsParams, reqEditors ...RequestEditorFn) (*TeamCampaignSupportingCampaignsResponse, error) {
	rsp, err := c.TeamCampaignSupportingCampaigns(ctx, teamCampaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseTeamCampaignSupportingCampaignsResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// TeamCampaignChallengesWithResponse request returning *TeamCampaignChallengesResponse
func (c *ClientWithResponses) TeamCampaignChallengesWithResponse(ctx context.Context, teamCampaignId string, params *TeamCampaignChallengesParams, reqEditors ...RequestEditorFn) (*TeamCampaignChallengesResponse, error) {
	rsp, err := c.TeamCampaignChallenges(ctx, teamCampaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseTeamCampaignChallengesResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// TeamCampaignLeaderboardControllerUserWithResponse request returning *TeamCampaignLeaderboardControllerUserResponse
func (c *ClientWithResponses) TeamCampaignLeaderboardControllerUserWithResponse(ctx context.Context, teamCampaignId string, params *TeamCampaignLeaderboardControllerUserParams, reqEditors ...RequestEditorFn) (*TeamCampaignLeaderboardControllerUserResponse, error) {
	rsp, err := c.TeamCampaignLeaderboardControllerUser(ctx, teamCampaignId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseTeamCampaignLeaderboardControllerUserResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// GetTeamWithResponse request returning *GetTeamResponse
func (c *ClientWithResponses) GetTeamWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error) {
	rsp, err := c.GetTeam(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseGetTeamResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// TeamMembersWithResponse request returning *TeamMembersResponse
func (c *ClientWithResponses) TeamMembersWithResponse(ctx context.Context, teamId string, params *TeamMembersParams, reqEditors ...RequestEditorFn) (*TeamMembersResponse, error) {
	rsp, err := c.TeamMembers(ctx, teamId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseTeamMembersResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// TeamTeamCampaignsWithResponse request returning *TeamTeamCampaignsResponse
func (c *ClientWithResponses) TeamTeamCampaignsWithResponse(ctx context.Context, teamId string, params *TeamTeamCampaignsParams, reqEditors ...RequestEditorFn) (*TeamTeamCampaignsResponse, error) {
	rsp, err := c.TeamTeamCampaigns(ctx, teamId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseTeamTeamCampaignsResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseGetUserResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// UserCampaignsWithResponse request returning *UserCampaignsResponse
func (c *ClientWithResponses) UserCampaignsWithResponse(ctx context.Context, userId string, params *UserCampaignsParams, reqEditors ...RequestEditorFn) (*UserCampaignsResponse, error) {
	rsp, err := c.UserCampaigns(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseUserCampaignsResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// UserIntegrationEventsWithResponse request returning *UserIntegrationEventsResponse
func (c *ClientWithResponses) UserIntegrationEventsWithResponse(ctx context.Context, userId string, params *UserIntegrationEventsParams, reqEditors ...RequestEditorFn) (*UserIntegrationEventsResponse, error) {
	rsp, err := c.UserIntegrationEvents(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseUserIntegrationEventsResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// UserTeamsWithResponse request returning *UserTeamsResponse
func (c *ClientWithResponses) UserTeamsWithResponse(ctx context.Context, userId string, params *UserTeamsParams, reqEditors ...RequestEditorFn) (*UserTeamsResponse, error) {
	rsp, err := c.UserTeams(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseUserTeamsResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebOauthAuthorizeWithBodyWithResponse request with arbitrary body returning *V5ApiWebOauthAuthorizeResponse
func (c *ClientWithResponses) V5ApiWebOauthAuthorizeWithBodyWithResponse(ctx context.Context, params *V5ApiWebOauthAuthorizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V5ApiWebOauthAuthorizeResponse, error) {
	rsp, err := c.V5ApiWebOauthAuthorizeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebOauthAuthorizeResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

func (c *ClientWithResponses) V5ApiWebOauthAuthorizeWithResponse(ctx context.Context, params *V5ApiWebOauthAuthorizeParams, body V5ApiWebOauthAuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*V5ApiWebOauthAuthorizeResponse, error) {
	rsp, err := c.V5ApiWebOauthAuthorize(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebOauthAuthorizeResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// V5ApiWebOauthTokenWithBodyWithResponse request with arbitrary body returning *V5ApiWebOauthTokenResponse
func (c *ClientWithResponses) V5ApiWebOauthTokenWithBodyWithResponse(ctx context.Context, params *V5ApiWebOauthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V5ApiWebOauthTokenResponse, error) {
	rsp, err := c.V5ApiWebOauthTokenWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebOauthTokenResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

func (c *ClientWithResponses) V5ApiWebOauthTokenWithResponse(ctx context.Context, params *V5ApiWebOauthTokenParams, body V5ApiWebOauthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*V5ApiWebOauthTokenResponse, error) {
	rsp, err := c.V5ApiWebOauthToken(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	r, err := ParseV5ApiWebOauthTokenResponse(rsp)
	if !c.OkOnNon200 && (r != nil && r.StatusCode() >= 400) {
		return r, StatusFailureError{Resp: rsp, Err: err}
	}
	return r, err
}

// ParseGetCampaignResponse parses an HTTP response from a GetCampaignWithResponse call
func ParseGetCampaignResponse(rsp *http.Response) (*GetCampaignResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCampaignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *Campaign `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCampaignDonationsResponse parses an HTTP response from a CampaignDonationsWithResponse call
func ParseCampaignDonationsResponse(rsp *http.Response) (*CampaignDonationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CampaignDonationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCampaignLeaderboardControllerDonorResponse parses an HTTP response from a CampaignLeaderboardControllerDonorWithResponse call
func ParseCampaignLeaderboardControllerDonorResponse(rsp *http.Response) (*CampaignLeaderboardControllerDonorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CampaignLeaderboardControllerDonorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCampaignMilestonesResponse parses an HTTP response from a CampaignMilestonesWithResponse call
func ParseCampaignMilestonesResponse(rsp *http.Response) (*CampaignMilestonesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CampaignMilestonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCampaignPollsResponse parses an HTTP response from a CampaignPollsWithResponse call
func ParseCampaignPollsResponse(rsp *http.Response) (*CampaignPollsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CampaignPollsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCampaignRewardsResponse parses an HTTP response from a CampaignRewardsWithResponse call
func ParseCampaignRewardsResponse(rsp *http.Response) (*CampaignRewardsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CampaignRewardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCampaignSchedulesResponse parses an HTTP response from a CampaignSchedulesWithResponse call
func ParseCampaignSchedulesResponse(rsp *http.Response) (*CampaignSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CampaignSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCampaignChallengesResponse parses an HTTP response from a CampaignChallengesWithResponse call
func ParseCampaignChallengesResponse(rsp *http.Response) (*CampaignChallengesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CampaignChallengesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetCauseResponse parses an HTTP response from a GetCauseWithResponse call
func ParseGetCauseResponse(rsp *http.Response) (*GetCauseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *Cause `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCauseCampaignsResponse parses an HTTP response from a CauseCampaignsWithResponse call
func ParseCauseCampaignsResponse(rsp *http.Response) (*CauseCampaignsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CauseCampaignsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCauseLeaderboardControllerConfiguredResponse parses an HTTP response from a CauseLeaderboardControllerConfiguredWithResponse call
func ParseCauseLeaderboardControllerConfiguredResponse(rsp *http.Response) (*CauseLeaderboardControllerConfiguredResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CauseLeaderboardControllerConfiguredResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Configured Leaderboards Like V3
			Data *ConfiguredLeaderboard `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCauseLeaderboardControllerDonorResponse parses an HTTP response from a CauseLeaderboardControllerDonorWithResponse call
func ParseCauseLeaderboardControllerDonorResponse(rsp *http.Response) (*CauseLeaderboardControllerDonorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CauseLeaderboardControllerDonorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCauseFundraisingEventsResponse parses an HTTP response from a CauseFundraisingEventsWithResponse call
func ParseCauseFundraisingEventsResponse(rsp *http.Response) (*CauseFundraisingEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CauseFundraisingEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCauseLeaderboardControllerTeamResponse parses an HTTP response from a CauseLeaderboardControllerTeamWithResponse call
func ParseCauseLeaderboardControllerTeamResponse(rsp *http.Response) (*CauseLeaderboardControllerTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CauseLeaderboardControllerTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCauseLeaderboardControllerUserResponse parses an HTTP response from a CauseLeaderboardControllerUserWithResponse call
func ParseCauseLeaderboardControllerUserResponse(rsp *http.Response) (*CauseLeaderboardControllerUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CauseLeaderboardControllerUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUserControllerCurrentUserResponse parses an HTTP response from a UserControllerCurrentUserWithResponse call
func ParseUserControllerCurrentUserResponse(rsp *http.Response) (*UserControllerCurrentUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserControllerCurrentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CurrentUserObj
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetFundraisingEventResponse parses an HTTP response from a GetFundraisingEventWithResponse call
func ParseGetFundraisingEventResponse(rsp *http.Response) (*GetFundraisingEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFundraisingEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *FundraisingEvent `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFundraisingEventLeaderboardControllerConfiguredResponse parses an HTTP response from a FundraisingEventLeaderboardControllerConfiguredWithResponse call
func ParseFundraisingEventLeaderboardControllerConfiguredResponse(rsp *http.Response) (*FundraisingEventLeaderboardControllerConfiguredResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FundraisingEventLeaderboardControllerConfiguredResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Configured Leaderboards Like V3
			Data *ConfiguredLeaderboard `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFundraisingEventLeaderboardControllerDonorResponse parses an HTTP response from a FundraisingEventLeaderboardControllerDonorWithResponse call
func ParseFundraisingEventLeaderboardControllerDonorResponse(rsp *http.Response) (*FundraisingEventLeaderboardControllerDonorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FundraisingEventLeaderboardControllerDonorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFundraisingEventSupportingEventsResponse parses an HTTP response from a FundraisingEventSupportingEventsWithResponse call
func ParseFundraisingEventSupportingEventsResponse(rsp *http.Response) (*FundraisingEventSupportingEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FundraisingEventSupportingEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse parses an HTTP response from a FundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse call
func ParseFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse(rsp *http.Response) (*FundraisingEventLeaderboardControllerTeamFitnessDistanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FundraisingEventLeaderboardControllerTeamFitnessDistanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFundraisingEventLeaderboardControllerTeamFitnessTimeResponse parses an HTTP response from a FundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse call
func ParseFundraisingEventLeaderboardControllerTeamFitnessTimeResponse(rsp *http.Response) (*FundraisingEventLeaderboardControllerTeamFitnessTimeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FundraisingEventLeaderboardControllerTeamFitnessTimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFundraisingEventLeaderboardControllerTeamResponse parses an HTTP response from a FundraisingEventLeaderboardControllerTeamWithResponse call
func ParseFundraisingEventLeaderboardControllerTeamResponse(rsp *http.Response) (*FundraisingEventLeaderboardControllerTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FundraisingEventLeaderboardControllerTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFundraisingEventLeaderboardControllerUserFitnessDistanceResponse parses an HTTP response from a FundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse call
func ParseFundraisingEventLeaderboardControllerUserFitnessDistanceResponse(rsp *http.Response) (*FundraisingEventLeaderboardControllerUserFitnessDistanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FundraisingEventLeaderboardControllerUserFitnessDistanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFundraisingEventLeaderboardControllerUserFitnessTimeResponse parses an HTTP response from a FundraisingEventLeaderboardControllerUserFitnessTimeWithResponse call
func ParseFundraisingEventLeaderboardControllerUserFitnessTimeResponse(rsp *http.Response) (*FundraisingEventLeaderboardControllerUserFitnessTimeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FundraisingEventLeaderboardControllerUserFitnessTimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFundraisingEventLeaderboardControllerUserResponse parses an HTTP response from a FundraisingEventLeaderboardControllerUserWithResponse call
func ParseFundraisingEventLeaderboardControllerUserResponse(rsp *http.Response) (*FundraisingEventLeaderboardControllerUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FundraisingEventLeaderboardControllerUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetTeamCampaignResponse parses an HTTP response from a GetTeamCampaignWithResponse call
func ParseGetTeamCampaignResponse(rsp *http.Response) (*GetTeamCampaignResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamCampaignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *TeamCampaign `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseTeamCampaignDonationsResponse parses an HTTP response from a TeamCampaignDonationsWithResponse call
func ParseTeamCampaignDonationsResponse(rsp *http.Response) (*TeamCampaignDonationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamCampaignDonationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseTeamCampaignLeaderboardControllerDonorResponse parses an HTTP response from a TeamCampaignLeaderboardControllerDonorWithResponse call
func ParseTeamCampaignLeaderboardControllerDonorResponse(rsp *http.Response) (*TeamCampaignLeaderboardControllerDonorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamCampaignLeaderboardControllerDonorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseTeamCampaignMilestonesResponse parses an HTTP response from a TeamCampaignMilestonesWithResponse call
func ParseTeamCampaignMilestonesResponse(rsp *http.Response) (*TeamCampaignMilestonesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamCampaignMilestonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseTeamCampaignPollsResponse parses an HTTP response from a TeamCampaignPollsWithResponse call
func ParseTeamCampaignPollsResponse(rsp *http.Response) (*TeamCampaignPollsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamCampaignPollsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseTeamCampaignRewardsResponse parses an HTTP response from a TeamCampaignRewardsWithResponse call
func ParseTeamCampaignRewardsResponse(rsp *http.Response) (*TeamCampaignRewardsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamCampaignRewardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseTeamCampaignSchedulesResponse parses an HTTP response from a TeamCampaignSchedulesWithResponse call
func ParseTeamCampaignSchedulesResponse(rsp *http.Response) (*TeamCampaignSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamCampaignSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseTeamCampaignSupportingCampaignsResponse parses an HTTP response from a TeamCampaignSupportingCampaignsWithResponse call
func ParseTeamCampaignSupportingCampaignsResponse(rsp *http.Response) (*TeamCampaignSupportingCampaignsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamCampaignSupportingCampaignsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseTeamCampaignChallengesResponse parses an HTTP response from a TeamCampaignChallengesWithResponse call
func ParseTeamCampaignChallengesResponse(rsp *http.Response) (*TeamCampaignChallengesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamCampaignChallengesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseTeamCampaignLeaderboardControllerUserResponse parses an HTTP response from a TeamCampaignLeaderboardControllerUserWithResponse call
func ParseTeamCampaignLeaderboardControllerUserResponse(rsp *http.Response) (*TeamCampaignLeaderboardControllerUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamCampaignLeaderboardControllerUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetTeamResponse parses an HTTP response from a GetTeamWithResponse call
func ParseGetTeamResponse(rsp *http.Response) (*GetTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *Team `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseTeamMembersResponse parses an HTTP response from a TeamMembersWithResponse call
func ParseTeamMembersResponse(rsp *http.Response) (*TeamMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseTeamTeamCampaignsResponse parses an HTTP response from a TeamTeamCampaignsWithResponse call
func ParseTeamTeamCampaignsResponse(rsp *http.Response) (*TeamTeamCampaignsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamTeamCampaignsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *User `json:"data,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUserCampaignsResponse parses an HTTP response from a UserCampaignsWithResponse call
func ParseUserCampaignsResponse(rsp *http.Response) (*UserCampaignsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserCampaignsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUserIntegrationEventsResponse parses an HTTP response from a UserIntegrationEventsWithResponse call
func ParseUserIntegrationEventsResponse(rsp *http.Response) (*UserIntegrationEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserIntegrationEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUserTeamsResponse parses an HTTP response from a UserTeamsWithResponse call
func ParseUserTeamsResponse(rsp *http.Response) (*UserTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseV5ApiWebOauthAuthorizeResponse parses an HTTP response from a V5ApiWebOauthAuthorizeWithResponse call
func ParseV5ApiWebOauthAuthorizeResponse(rsp *http.Response) (*V5ApiWebOauthAuthorizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebOauthAuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseV5ApiWebOauthTokenResponse parses an HTTP response from a V5ApiWebOauthTokenWithResponse call
func ParseV5ApiWebOauthTokenResponse(rsp *http.Response) (*V5ApiWebOauthTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V5ApiWebOauthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get by ID
	// (GET /api/public/campaigns/{campaign_id})
	GetCampaign(ctx echo.Context, campaignId string) error
	// List donations
	// (GET /api/public/campaigns/{campaign_id}/donations)
	CampaignDonations(ctx echo.Context, campaignId string, params CampaignDonationsParams) error
	// List top donors
	// (GET /api/public/campaigns/{campaign_id}/donor_leaderboard)
	CampaignLeaderboardControllerDonor(ctx echo.Context, campaignId string, params CampaignLeaderboardControllerDonorParams) error
	// List milestones
	// (GET /api/public/campaigns/{campaign_id}/milestones)
	CampaignMilestones(ctx echo.Context, campaignId string, params CampaignMilestonesParams) error
	// List polls
	// (GET /api/public/campaigns/{campaign_id}/polls)
	CampaignPolls(ctx echo.Context, campaignId string, params CampaignPollsParams) error
	// List rewards
	// (GET /api/public/campaigns/{campaign_id}/rewards)
	CampaignRewards(ctx echo.Context, campaignId string, params CampaignRewardsParams) error
	// List schedules
	// (GET /api/public/campaigns/{campaign_id}/schedules)
	CampaignSchedules(ctx echo.Context, campaignId string, params CampaignSchedulesParams) error
	// List targets
	// (GET /api/public/campaigns/{campaign_id}/targets)
	CampaignChallenges(ctx echo.Context, campaignId string, params CampaignChallengesParams) error
	// Get by ID
	// (GET /api/public/causes/{cause_id})
	GetCause(ctx echo.Context, causeId string) error
	// List campaigns
	// (GET /api/public/causes/{cause_id}/campaigns)
	CauseCampaigns(ctx echo.Context, causeId string, params CauseCampaignsParams) error
	// List configured leaderboards
	// (GET /api/public/causes/{cause_id}/configured_leaderboard)
	CauseLeaderboardControllerConfigured(ctx echo.Context, causeId string) error
	// List top donors
	// (GET /api/public/causes/{cause_id}/donor_leaderboard)
	CauseLeaderboardControllerDonor(ctx echo.Context, causeId string, params CauseLeaderboardControllerDonorParams) error
	// List fundraising events
	// (GET /api/public/causes/{cause_id}/fundraising_events)
	CauseFundraisingEvents(ctx echo.Context, causeId string, params CauseFundraisingEventsParams) error
	// List top teams
	// (GET /api/public/causes/{cause_id}/team_leaderboard)
	CauseLeaderboardControllerTeam(ctx echo.Context, causeId string, params CauseLeaderboardControllerTeamParams) error
	// List top fundraisers
	// (GET /api/public/causes/{cause_id}/user_leaderboard)
	CauseLeaderboardControllerUser(ctx echo.Context, causeId string, params CauseLeaderboardControllerUserParams) error
	// Gets the current user for an access token
	// (GET /api/public/current-user)
	UserControllerCurrentUser(ctx echo.Context) error
	// Get by ID
	// (GET /api/public/fundraising_events/{fundraising_event_id})
	GetFundraisingEvent(ctx echo.Context, fundraisingEventId string) error
	// List configured leaderboards
	// (GET /api/public/fundraising_events/{fundraising_event_id}/configured_leaderboard)
	FundraisingEventLeaderboardControllerConfigured(ctx echo.Context, fundraisingEventId string) error
	// List top donors
	// (GET /api/public/fundraising_events/{fundraising_event_id}/donor_leaderboard)
	FundraisingEventLeaderboardControllerDonor(ctx echo.Context, fundraisingEventId string, params FundraisingEventLeaderboardControllerDonorParams) error
	// List campaigns
	// (GET /api/public/fundraising_events/{fundraising_event_id}/supporting_events)
	FundraisingEventSupportingEvents(ctx echo.Context, fundraisingEventId string, params FundraisingEventSupportingEventsParams) error
	// List top teams fitness distances
	// (GET /api/public/fundraising_events/{fundraising_event_id}/team_fitness_distance_leaderboard)
	FundraisingEventLeaderboardControllerTeamFitnessDistance(ctx echo.Context, fundraisingEventId string, params FundraisingEventLeaderboardControllerTeamFitnessDistanceParams) error
	// List top teams fitness times
	// (GET /api/public/fundraising_events/{fundraising_event_id}/team_fitness_time_leaderboard)
	FundraisingEventLeaderboardControllerTeamFitnessTime(ctx echo.Context, fundraisingEventId string, params FundraisingEventLeaderboardControllerTeamFitnessTimeParams) error
	// List top teams
	// (GET /api/public/fundraising_events/{fundraising_event_id}/team_leaderboard)
	FundraisingEventLeaderboardControllerTeam(ctx echo.Context, fundraisingEventId string, params FundraisingEventLeaderboardControllerTeamParams) error
	// List top users fitness distances
	// (GET /api/public/fundraising_events/{fundraising_event_id}/user_fitness_distance_leaderboard)
	FundraisingEventLeaderboardControllerUserFitnessDistance(ctx echo.Context, fundraisingEventId string, params FundraisingEventLeaderboardControllerUserFitnessDistanceParams) error
	// List top users fitness times
	// (GET /api/public/fundraising_events/{fundraising_event_id}/user_fitness_time_leaderboard)
	FundraisingEventLeaderboardControllerUserFitnessTime(ctx echo.Context, fundraisingEventId string, params FundraisingEventLeaderboardControllerUserFitnessTimeParams) error
	// List top fundraisers
	// (GET /api/public/fundraising_events/{fundraising_event_id}/user_leaderboard)
	FundraisingEventLeaderboardControllerUser(ctx echo.Context, fundraisingEventId string, params FundraisingEventLeaderboardControllerUserParams) error
	// Get by ID
	// (GET /api/public/team_campaigns/{team_campaign_id})
	GetTeamCampaign(ctx echo.Context, teamCampaignId string) error
	// List donations
	// (GET /api/public/team_campaigns/{team_campaign_id}/donations)
	TeamCampaignDonations(ctx echo.Context, teamCampaignId string, params TeamCampaignDonationsParams) error
	// List top donors
	// (GET /api/public/team_campaigns/{team_campaign_id}/donor_leaderboards)
	TeamCampaignLeaderboardControllerDonor(ctx echo.Context, teamCampaignId string, params TeamCampaignLeaderboardControllerDonorParams) error
	// List milestones
	// (GET /api/public/team_campaigns/{team_campaign_id}/milestones)
	TeamCampaignMilestones(ctx echo.Context, teamCampaignId string, params TeamCampaignMilestonesParams) error
	// List polls
	// (GET /api/public/team_campaigns/{team_campaign_id}/polls)
	TeamCampaignPolls(ctx echo.Context, teamCampaignId string, params TeamCampaignPollsParams) error
	// List rewards
	// (GET /api/public/team_campaigns/{team_campaign_id}/rewards)
	TeamCampaignRewards(ctx echo.Context, teamCampaignId string, params TeamCampaignRewardsParams) error
	// List schedules
	// (GET /api/public/team_campaigns/{team_campaign_id}/schedules)
	TeamCampaignSchedules(ctx echo.Context, teamCampaignId string, params TeamCampaignSchedulesParams) error
	// List supporting campaigns
	// (GET /api/public/team_campaigns/{team_campaign_id}/supporting_campaigns)
	TeamCampaignSupportingCampaigns(ctx echo.Context, teamCampaignId string, params TeamCampaignSupportingCampaignsParams) error
	// List targets
	// (GET /api/public/team_campaigns/{team_campaign_id}/targets)
	TeamCampaignChallenges(ctx echo.Context, teamCampaignId string, params TeamCampaignChallengesParams) error
	// List top fundraisers
	// (GET /api/public/team_campaigns/{team_campaign_id}/user_leaderboards)
	TeamCampaignLeaderboardControllerUser(ctx echo.Context, teamCampaignId string, params TeamCampaignLeaderboardControllerUserParams) error
	// Get by ID
	// (GET /api/public/teams/{team_id})
	GetTeam(ctx echo.Context, teamId string) error
	// List team members
	// (GET /api/public/teams/{team_id}/members)
	TeamMembers(ctx echo.Context, teamId string, params TeamMembersParams) error
	// List Team Campaigns
	// (GET /api/public/teams/{team_id}/team_campaigns)
	TeamTeamCampaigns(ctx echo.Context, teamId string, params TeamTeamCampaignsParams) error
	// Get by ID
	// (GET /api/public/users/{user_id})
	GetUser(ctx echo.Context, userId string) error
	// List campaigns
	// (GET /api/public/users/{user_id}/campaigns)
	UserCampaigns(ctx echo.Context, userId string, params UserCampaignsParams) error
	// List all Campaigns and Team Campaigns by User ID
	// (GET /api/public/users/{user_id}/integration_events)
	UserIntegrationEvents(ctx echo.Context, userId string, params UserIntegrationEventsParams) error
	// List teams
	// (GET /api/public/users/{user_id}/teams)
	UserTeams(ctx echo.Context, userId string, params UserTeamsParams) error
	// Authorize
	// (GET /oauth/authorize)
	V5ApiWebOauthAuthorize(ctx echo.Context, params V5ApiWebOauthAuthorizeParams) error
	// Token
	// (POST /oauth/token)
	V5ApiWebOauthToken(ctx echo.Context, params V5ApiWebOauthTokenParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCampaign converts echo context to params.
func (w *ServerInterfaceWrapper) GetCampaign(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campaign_id" -------------
	var campaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, ctx.Param("campaign_id"), &campaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCampaign(ctx, campaignId)
	return err
}

// CampaignDonations converts echo context to params.
func (w *ServerInterfaceWrapper) CampaignDonations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campaign_id" -------------
	var campaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, ctx.Param("campaign_id"), &campaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CampaignDonationsParams
	// ------------- Optional query parameter "completed_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "completed_before", ctx.QueryParams(), &params.CompletedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter completed_before: %s", err))
	}

	// ------------- Optional query parameter "completed_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "completed_after", ctx.QueryParams(), &params.CompletedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter completed_after: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CampaignDonations(ctx, campaignId, params)
	return err
}

// CampaignLeaderboardControllerDonor converts echo context to params.
func (w *ServerInterfaceWrapper) CampaignLeaderboardControllerDonor(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campaign_id" -------------
	var campaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, ctx.Param("campaign_id"), &campaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CampaignLeaderboardControllerDonorParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CampaignLeaderboardControllerDonor(ctx, campaignId, params)
	return err
}

// CampaignMilestones converts echo context to params.
func (w *ServerInterfaceWrapper) CampaignMilestones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campaign_id" -------------
	var campaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, ctx.Param("campaign_id"), &campaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CampaignMilestonesParams
	// ------------- Optional query parameter "include_disabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_disabled", ctx.QueryParams(), &params.IncludeDisabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_disabled: %s", err))
	}

	// ------------- Optional query parameter "created_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_before", ctx.QueryParams(), &params.CreatedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_before: %s", err))
	}

	// ------------- Optional query parameter "created_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_after", ctx.QueryParams(), &params.CreatedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_after: %s", err))
	}

	// ------------- Optional query parameter "updated_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "updated_before", ctx.QueryParams(), &params.UpdatedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updated_before: %s", err))
	}

	// ------------- Optional query parameter "updated_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "updated_after", ctx.QueryParams(), &params.UpdatedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updated_after: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CampaignMilestones(ctx, campaignId, params)
	return err
}

// CampaignPolls converts echo context to params.
func (w *ServerInterfaceWrapper) CampaignPolls(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campaign_id" -------------
	var campaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, ctx.Param("campaign_id"), &campaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CampaignPollsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CampaignPolls(ctx, campaignId, params)
	return err
}

// CampaignRewards converts echo context to params.
func (w *ServerInterfaceWrapper) CampaignRewards(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campaign_id" -------------
	var campaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, ctx.Param("campaign_id"), &campaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CampaignRewardsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CampaignRewards(ctx, campaignId, params)
	return err
}

// CampaignSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) CampaignSchedules(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campaign_id" -------------
	var campaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, ctx.Param("campaign_id"), &campaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CampaignSchedulesParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CampaignSchedules(ctx, campaignId, params)
	return err
}

// CampaignChallenges converts echo context to params.
func (w *ServerInterfaceWrapper) CampaignChallenges(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campaign_id" -------------
	var campaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "campaign_id", runtime.ParamLocationPath, ctx.Param("campaign_id"), &campaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CampaignChallengesParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CampaignChallenges(ctx, campaignId, params)
	return err
}

// GetCause converts echo context to params.
func (w *ServerInterfaceWrapper) GetCause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cause_id" -------------
	var causeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, ctx.Param("cause_id"), &causeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cause_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCause(ctx, causeId)
	return err
}

// CauseCampaigns converts echo context to params.
func (w *ServerInterfaceWrapper) CauseCampaigns(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cause_id" -------------
	var causeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, ctx.Param("cause_id"), &causeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cause_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CauseCampaignsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CauseCampaigns(ctx, causeId, params)
	return err
}

// CauseLeaderboardControllerConfigured converts echo context to params.
func (w *ServerInterfaceWrapper) CauseLeaderboardControllerConfigured(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cause_id" -------------
	var causeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, ctx.Param("cause_id"), &causeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cause_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CauseLeaderboardControllerConfigured(ctx, causeId)
	return err
}

// CauseLeaderboardControllerDonor converts echo context to params.
func (w *ServerInterfaceWrapper) CauseLeaderboardControllerDonor(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cause_id" -------------
	var causeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, ctx.Param("cause_id"), &causeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cause_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CauseLeaderboardControllerDonorParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CauseLeaderboardControllerDonor(ctx, causeId, params)
	return err
}

// CauseFundraisingEvents converts echo context to params.
func (w *ServerInterfaceWrapper) CauseFundraisingEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cause_id" -------------
	var causeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, ctx.Param("cause_id"), &causeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cause_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CauseFundraisingEventsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CauseFundraisingEvents(ctx, causeId, params)
	return err
}

// CauseLeaderboardControllerTeam converts echo context to params.
func (w *ServerInterfaceWrapper) CauseLeaderboardControllerTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cause_id" -------------
	var causeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, ctx.Param("cause_id"), &causeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cause_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CauseLeaderboardControllerTeamParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CauseLeaderboardControllerTeam(ctx, causeId, params)
	return err
}

// CauseLeaderboardControllerUser converts echo context to params.
func (w *ServerInterfaceWrapper) CauseLeaderboardControllerUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cause_id" -------------
	var causeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "cause_id", runtime.ParamLocationPath, ctx.Param("cause_id"), &causeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cause_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CauseLeaderboardControllerUserParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CauseLeaderboardControllerUser(ctx, causeId, params)
	return err
}

// UserControllerCurrentUser converts echo context to params.
func (w *ServerInterfaceWrapper) UserControllerCurrentUser(ctx echo.Context) error {
	var err error

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserControllerCurrentUser(ctx)
	return err
}

// GetFundraisingEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetFundraisingEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFundraisingEvent(ctx, fundraisingEventId)
	return err
}

// FundraisingEventLeaderboardControllerConfigured converts echo context to params.
func (w *ServerInterfaceWrapper) FundraisingEventLeaderboardControllerConfigured(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FundraisingEventLeaderboardControllerConfigured(ctx, fundraisingEventId)
	return err
}

// FundraisingEventLeaderboardControllerDonor converts echo context to params.
func (w *ServerInterfaceWrapper) FundraisingEventLeaderboardControllerDonor(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params FundraisingEventLeaderboardControllerDonorParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FundraisingEventLeaderboardControllerDonor(ctx, fundraisingEventId, params)
	return err
}

// FundraisingEventSupportingEvents converts echo context to params.
func (w *ServerInterfaceWrapper) FundraisingEventSupportingEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params FundraisingEventSupportingEventsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FundraisingEventSupportingEvents(ctx, fundraisingEventId, params)
	return err
}

// FundraisingEventLeaderboardControllerTeamFitnessDistance converts echo context to params.
func (w *ServerInterfaceWrapper) FundraisingEventLeaderboardControllerTeamFitnessDistance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params FundraisingEventLeaderboardControllerTeamFitnessDistanceParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FundraisingEventLeaderboardControllerTeamFitnessDistance(ctx, fundraisingEventId, params)
	return err
}

// FundraisingEventLeaderboardControllerTeamFitnessTime converts echo context to params.
func (w *ServerInterfaceWrapper) FundraisingEventLeaderboardControllerTeamFitnessTime(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params FundraisingEventLeaderboardControllerTeamFitnessTimeParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FundraisingEventLeaderboardControllerTeamFitnessTime(ctx, fundraisingEventId, params)
	return err
}

// FundraisingEventLeaderboardControllerTeam converts echo context to params.
func (w *ServerInterfaceWrapper) FundraisingEventLeaderboardControllerTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params FundraisingEventLeaderboardControllerTeamParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FundraisingEventLeaderboardControllerTeam(ctx, fundraisingEventId, params)
	return err
}

// FundraisingEventLeaderboardControllerUserFitnessDistance converts echo context to params.
func (w *ServerInterfaceWrapper) FundraisingEventLeaderboardControllerUserFitnessDistance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params FundraisingEventLeaderboardControllerUserFitnessDistanceParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FundraisingEventLeaderboardControllerUserFitnessDistance(ctx, fundraisingEventId, params)
	return err
}

// FundraisingEventLeaderboardControllerUserFitnessTime converts echo context to params.
func (w *ServerInterfaceWrapper) FundraisingEventLeaderboardControllerUserFitnessTime(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params FundraisingEventLeaderboardControllerUserFitnessTimeParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FundraisingEventLeaderboardControllerUserFitnessTime(ctx, fundraisingEventId, params)
	return err
}

// FundraisingEventLeaderboardControllerUser converts echo context to params.
func (w *ServerInterfaceWrapper) FundraisingEventLeaderboardControllerUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fundraising_event_id" -------------
	var fundraisingEventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "fundraising_event_id", runtime.ParamLocationPath, ctx.Param("fundraising_event_id"), &fundraisingEventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fundraising_event_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params FundraisingEventLeaderboardControllerUserParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FundraisingEventLeaderboardControllerUser(ctx, fundraisingEventId, params)
	return err
}

// GetTeamCampaign converts echo context to params.
func (w *ServerInterfaceWrapper) GetTeamCampaign(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTeamCampaign(ctx, teamCampaignId)
	return err
}

// TeamCampaignDonations converts echo context to params.
func (w *ServerInterfaceWrapper) TeamCampaignDonations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TeamCampaignDonationsParams
	// ------------- Optional query parameter "completed_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "completed_before", ctx.QueryParams(), &params.CompletedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter completed_before: %s", err))
	}

	// ------------- Optional query parameter "completed_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "completed_after", ctx.QueryParams(), &params.CompletedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter completed_after: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamCampaignDonations(ctx, teamCampaignId, params)
	return err
}

// TeamCampaignLeaderboardControllerDonor converts echo context to params.
func (w *ServerInterfaceWrapper) TeamCampaignLeaderboardControllerDonor(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TeamCampaignLeaderboardControllerDonorParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamCampaignLeaderboardControllerDonor(ctx, teamCampaignId, params)
	return err
}

// TeamCampaignMilestones converts echo context to params.
func (w *ServerInterfaceWrapper) TeamCampaignMilestones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TeamCampaignMilestonesParams
	// ------------- Optional query parameter "include_disabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_disabled", ctx.QueryParams(), &params.IncludeDisabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_disabled: %s", err))
	}

	// ------------- Optional query parameter "created_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_before", ctx.QueryParams(), &params.CreatedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_before: %s", err))
	}

	// ------------- Optional query parameter "created_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_after", ctx.QueryParams(), &params.CreatedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_after: %s", err))
	}

	// ------------- Optional query parameter "updated_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "updated_before", ctx.QueryParams(), &params.UpdatedBefore)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updated_before: %s", err))
	}

	// ------------- Optional query parameter "updated_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "updated_after", ctx.QueryParams(), &params.UpdatedAfter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updated_after: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamCampaignMilestones(ctx, teamCampaignId, params)
	return err
}

// TeamCampaignPolls converts echo context to params.
func (w *ServerInterfaceWrapper) TeamCampaignPolls(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TeamCampaignPollsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamCampaignPolls(ctx, teamCampaignId, params)
	return err
}

// TeamCampaignRewards converts echo context to params.
func (w *ServerInterfaceWrapper) TeamCampaignRewards(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TeamCampaignRewardsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamCampaignRewards(ctx, teamCampaignId, params)
	return err
}

// TeamCampaignSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) TeamCampaignSchedules(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TeamCampaignSchedulesParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamCampaignSchedules(ctx, teamCampaignId, params)
	return err
}

// TeamCampaignSupportingCampaigns converts echo context to params.
func (w *ServerInterfaceWrapper) TeamCampaignSupportingCampaigns(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TeamCampaignSupportingCampaignsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamCampaignSupportingCampaigns(ctx, teamCampaignId, params)
	return err
}

// TeamCampaignChallenges converts echo context to params.
func (w *ServerInterfaceWrapper) TeamCampaignChallenges(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TeamCampaignChallengesParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamCampaignChallenges(ctx, teamCampaignId, params)
	return err
}

// TeamCampaignLeaderboardControllerUser converts echo context to params.
func (w *ServerInterfaceWrapper) TeamCampaignLeaderboardControllerUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_campaign_id" -------------
	var teamCampaignId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_campaign_id", runtime.ParamLocationPath, ctx.Param("team_campaign_id"), &teamCampaignId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_campaign_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TeamCampaignLeaderboardControllerUserParams
	// ------------- Optional query parameter "time_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_type", ctx.QueryParams(), &params.TimeType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_type: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamCampaignLeaderboardControllerUser(ctx, teamCampaignId, params)
	return err
}

// GetTeam converts echo context to params.
func (w *ServerInterfaceWrapper) GetTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_id", runtime.ParamLocationPath, ctx.Param("team_id"), &teamId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTeam(ctx, teamId)
	return err
}

// TeamMembers converts echo context to params.
func (w *ServerInterfaceWrapper) TeamMembers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_id", runtime.ParamLocationPath, ctx.Param("team_id"), &teamId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TeamMembersParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamMembers(ctx, teamId, params)
	return err
}

// TeamTeamCampaigns converts echo context to params.
func (w *ServerInterfaceWrapper) TeamTeamCampaigns(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "team_id", runtime.ParamLocationPath, ctx.Param("team_id"), &teamId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter team_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TeamTeamCampaignsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamTeamCampaigns(ctx, teamId, params)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, userId)
	return err
}

// UserCampaigns converts echo context to params.
func (w *ServerInterfaceWrapper) UserCampaigns(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserCampaignsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserCampaigns(ctx, userId, params)
	return err
}

// UserIntegrationEvents converts echo context to params.
func (w *ServerInterfaceWrapper) UserIntegrationEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserIntegrationEventsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserIntegrationEvents(ctx, userId, params)
	return err
}

// UserTeams converts echo context to params.
func (w *ServerInterfaceWrapper) UserTeams(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserTeamsParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UserTeams(ctx, userId, params)
	return err
}

// V5ApiWebOauthAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebOauthAuthorize(ctx echo.Context) error {
	var err error

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebOauthAuthorizeParams
	// ------------- Required query parameter "client_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "client_id", ctx.QueryParams(), &params.ClientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter client_id: %s", err))
	}

	// ------------- Required query parameter "redirect_uri" -------------

	err = runtime.BindQueryParameter("form", true, true, "redirect_uri", ctx.QueryParams(), &params.RedirectUri)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter redirect_uri: %s", err))
	}

	// ------------- Required query parameter "response_type" -------------

	err = runtime.BindQueryParameter("form", true, true, "response_type", ctx.QueryParams(), &params.ResponseType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter response_type: %s", err))
	}

	// ------------- Optional query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebOauthAuthorize(ctx, params)
	return err
}

// V5ApiWebOauthToken converts echo context to params.
func (w *ServerInterfaceWrapper) V5ApiWebOauthToken(ctx echo.Context) error {
	var err error

	ctx.Set(AuthorizationScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V5ApiWebOauthTokenParams
	// ------------- Required query parameter "client_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "client_id", ctx.QueryParams(), &params.ClientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter client_id: %s", err))
	}

	// ------------- Required query parameter "client_secret" -------------

	err = runtime.BindQueryParameter("form", true, true, "client_secret", ctx.QueryParams(), &params.ClientSecret)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter client_secret: %s", err))
	}

	// ------------- Required query parameter "grant_type" -------------

	err = runtime.BindQueryParameter("form", true, true, "grant_type", ctx.QueryParams(), &params.GrantType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter grant_type: %s", err))
	}

	// ------------- Optional query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, false, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// ------------- Optional query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.V5ApiWebOauthToken(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/public/campaigns/:campaign_id", wrapper.GetCampaign)
	router.GET(baseURL+"/api/public/campaigns/:campaign_id/donations", wrapper.CampaignDonations)
	router.GET(baseURL+"/api/public/campaigns/:campaign_id/donor_leaderboard", wrapper.CampaignLeaderboardControllerDonor)
	router.GET(baseURL+"/api/public/campaigns/:campaign_id/milestones", wrapper.CampaignMilestones)
	router.GET(baseURL+"/api/public/campaigns/:campaign_id/polls", wrapper.CampaignPolls)
	router.GET(baseURL+"/api/public/campaigns/:campaign_id/rewards", wrapper.CampaignRewards)
	router.GET(baseURL+"/api/public/campaigns/:campaign_id/schedules", wrapper.CampaignSchedules)
	router.GET(baseURL+"/api/public/campaigns/:campaign_id/targets", wrapper.CampaignChallenges)
	router.GET(baseURL+"/api/public/causes/:cause_id", wrapper.GetCause)
	router.GET(baseURL+"/api/public/causes/:cause_id/campaigns", wrapper.CauseCampaigns)
	router.GET(baseURL+"/api/public/causes/:cause_id/configured_leaderboard", wrapper.CauseLeaderboardControllerConfigured)
	router.GET(baseURL+"/api/public/causes/:cause_id/donor_leaderboard", wrapper.CauseLeaderboardControllerDonor)
	router.GET(baseURL+"/api/public/causes/:cause_id/fundraising_events", wrapper.CauseFundraisingEvents)
	router.GET(baseURL+"/api/public/causes/:cause_id/team_leaderboard", wrapper.CauseLeaderboardControllerTeam)
	router.GET(baseURL+"/api/public/causes/:cause_id/user_leaderboard", wrapper.CauseLeaderboardControllerUser)
	router.GET(baseURL+"/api/public/current-user", wrapper.UserControllerCurrentUser)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id", wrapper.GetFundraisingEvent)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id/configured_leaderboard", wrapper.FundraisingEventLeaderboardControllerConfigured)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id/donor_leaderboard", wrapper.FundraisingEventLeaderboardControllerDonor)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id/supporting_events", wrapper.FundraisingEventSupportingEvents)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id/team_fitness_distance_leaderboard", wrapper.FundraisingEventLeaderboardControllerTeamFitnessDistance)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id/team_fitness_time_leaderboard", wrapper.FundraisingEventLeaderboardControllerTeamFitnessTime)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id/team_leaderboard", wrapper.FundraisingEventLeaderboardControllerTeam)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id/user_fitness_distance_leaderboard", wrapper.FundraisingEventLeaderboardControllerUserFitnessDistance)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id/user_fitness_time_leaderboard", wrapper.FundraisingEventLeaderboardControllerUserFitnessTime)
	router.GET(baseURL+"/api/public/fundraising_events/:fundraising_event_id/user_leaderboard", wrapper.FundraisingEventLeaderboardControllerUser)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id", wrapper.GetTeamCampaign)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id/donations", wrapper.TeamCampaignDonations)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id/donor_leaderboards", wrapper.TeamCampaignLeaderboardControllerDonor)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id/milestones", wrapper.TeamCampaignMilestones)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id/polls", wrapper.TeamCampaignPolls)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id/rewards", wrapper.TeamCampaignRewards)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id/schedules", wrapper.TeamCampaignSchedules)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id/supporting_campaigns", wrapper.TeamCampaignSupportingCampaigns)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id/targets", wrapper.TeamCampaignChallenges)
	router.GET(baseURL+"/api/public/team_campaigns/:team_campaign_id/user_leaderboards", wrapper.TeamCampaignLeaderboardControllerUser)
	router.GET(baseURL+"/api/public/teams/:team_id", wrapper.GetTeam)
	router.GET(baseURL+"/api/public/teams/:team_id/members", wrapper.TeamMembers)
	router.GET(baseURL+"/api/public/teams/:team_id/team_campaigns", wrapper.TeamTeamCampaigns)
	router.GET(baseURL+"/api/public/users/:user_id", wrapper.GetUser)
	router.GET(baseURL+"/api/public/users/:user_id/campaigns", wrapper.UserCampaigns)
	router.GET(baseURL+"/api/public/users/:user_id/integration_events", wrapper.UserIntegrationEvents)
	router.GET(baseURL+"/api/public/users/:user_id/teams", wrapper.UserTeams)
	router.GET(baseURL+"/oauth/authorize", wrapper.V5ApiWebOauthAuthorize)
	router.POST(baseURL+"/oauth/token", wrapper.V5ApiWebOauthToken)

}

type CurrentUserJSONResponse CurrentUserObj

type GetCampaignRequestObject struct {
	CampaignId string `json:"campaign_id"`
}

type GetCampaignResponseObject interface {
	VisitGetCampaignResponse(w http.ResponseWriter) error
}

type GetCampaign200JSONResponse struct {
	Data *Campaign `json:"data,omitempty"`
}

func (response GetCampaign200JSONResponse) VisitGetCampaignResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCampaign401JSONResponse Unauthorized

func (response GetCampaign401JSONResponse) VisitGetCampaignResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCampaign404JSONResponse NotFound

func (response GetCampaign404JSONResponse) VisitGetCampaignResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCampaign422JSONResponse UnprocessableEntity

func (response GetCampaign422JSONResponse) VisitGetCampaignResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CampaignDonationsRequestObject struct {
	CampaignId string `json:"campaign_id"`
	Params     CampaignDonationsParams
}

type CampaignDonationsResponseObject interface {
	VisitCampaignDonationsResponse(w http.ResponseWriter) error
}

type CampaignDonations200JSONResponse PaginatedResponse

func (response CampaignDonations200JSONResponse) VisitCampaignDonationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CampaignDonations401JSONResponse Unauthorized

func (response CampaignDonations401JSONResponse) VisitCampaignDonationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CampaignDonations404JSONResponse NotFound

func (response CampaignDonations404JSONResponse) VisitCampaignDonationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CampaignDonations422JSONResponse UnprocessableEntity

func (response CampaignDonations422JSONResponse) VisitCampaignDonationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CampaignLeaderboardControllerDonorRequestObject struct {
	CampaignId string `json:"campaign_id"`
	Params     CampaignLeaderboardControllerDonorParams
}

type CampaignLeaderboardControllerDonorResponseObject interface {
	VisitCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error
}

type CampaignLeaderboardControllerDonor200JSONResponse PaginatedResponse

func (response CampaignLeaderboardControllerDonor200JSONResponse) VisitCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CampaignLeaderboardControllerDonor401JSONResponse Unauthorized

func (response CampaignLeaderboardControllerDonor401JSONResponse) VisitCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CampaignLeaderboardControllerDonor403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response CampaignLeaderboardControllerDonor403ApplictionjsonResponse) VisitCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CampaignLeaderboardControllerDonor404JSONResponse NotFound

func (response CampaignLeaderboardControllerDonor404JSONResponse) VisitCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CampaignLeaderboardControllerDonor422JSONResponse UnprocessableEntity

func (response CampaignLeaderboardControllerDonor422JSONResponse) VisitCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CampaignMilestonesRequestObject struct {
	CampaignId string `json:"campaign_id"`
	Params     CampaignMilestonesParams
}

type CampaignMilestonesResponseObject interface {
	VisitCampaignMilestonesResponse(w http.ResponseWriter) error
}

type CampaignMilestones200JSONResponse PaginatedResponse

func (response CampaignMilestones200JSONResponse) VisitCampaignMilestonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CampaignMilestones401JSONResponse Unauthorized

func (response CampaignMilestones401JSONResponse) VisitCampaignMilestonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CampaignMilestones404JSONResponse NotFound

func (response CampaignMilestones404JSONResponse) VisitCampaignMilestonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CampaignMilestones422JSONResponse UnprocessableEntity

func (response CampaignMilestones422JSONResponse) VisitCampaignMilestonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CampaignPollsRequestObject struct {
	CampaignId string `json:"campaign_id"`
	Params     CampaignPollsParams
}

type CampaignPollsResponseObject interface {
	VisitCampaignPollsResponse(w http.ResponseWriter) error
}

type CampaignPolls200JSONResponse PaginatedResponse

func (response CampaignPolls200JSONResponse) VisitCampaignPollsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CampaignPolls401JSONResponse Unauthorized

func (response CampaignPolls401JSONResponse) VisitCampaignPollsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CampaignPolls404JSONResponse NotFound

func (response CampaignPolls404JSONResponse) VisitCampaignPollsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CampaignPolls422JSONResponse UnprocessableEntity

func (response CampaignPolls422JSONResponse) VisitCampaignPollsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CampaignRewardsRequestObject struct {
	CampaignId string `json:"campaign_id"`
	Params     CampaignRewardsParams
}

type CampaignRewardsResponseObject interface {
	VisitCampaignRewardsResponse(w http.ResponseWriter) error
}

type CampaignRewards200JSONResponse PaginatedResponse

func (response CampaignRewards200JSONResponse) VisitCampaignRewardsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CampaignRewards401JSONResponse Unauthorized

func (response CampaignRewards401JSONResponse) VisitCampaignRewardsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CampaignRewards404JSONResponse NotFound

func (response CampaignRewards404JSONResponse) VisitCampaignRewardsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CampaignRewards422JSONResponse UnprocessableEntity

func (response CampaignRewards422JSONResponse) VisitCampaignRewardsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CampaignSchedulesRequestObject struct {
	CampaignId string `json:"campaign_id"`
	Params     CampaignSchedulesParams
}

type CampaignSchedulesResponseObject interface {
	VisitCampaignSchedulesResponse(w http.ResponseWriter) error
}

type CampaignSchedules200JSONResponse PaginatedResponse

func (response CampaignSchedules200JSONResponse) VisitCampaignSchedulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CampaignSchedules401JSONResponse Unauthorized

func (response CampaignSchedules401JSONResponse) VisitCampaignSchedulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CampaignSchedules404JSONResponse NotFound

func (response CampaignSchedules404JSONResponse) VisitCampaignSchedulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CampaignSchedules422JSONResponse UnprocessableEntity

func (response CampaignSchedules422JSONResponse) VisitCampaignSchedulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CampaignChallengesRequestObject struct {
	CampaignId string `json:"campaign_id"`
	Params     CampaignChallengesParams
}

type CampaignChallengesResponseObject interface {
	VisitCampaignChallengesResponse(w http.ResponseWriter) error
}

type CampaignChallenges200JSONResponse PaginatedResponse

func (response CampaignChallenges200JSONResponse) VisitCampaignChallengesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CampaignChallenges401JSONResponse Unauthorized

func (response CampaignChallenges401JSONResponse) VisitCampaignChallengesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CampaignChallenges404JSONResponse NotFound

func (response CampaignChallenges404JSONResponse) VisitCampaignChallengesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CampaignChallenges422JSONResponse UnprocessableEntity

func (response CampaignChallenges422JSONResponse) VisitCampaignChallengesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetCauseRequestObject struct {
	CauseId string `json:"cause_id"`
}

type GetCauseResponseObject interface {
	VisitGetCauseResponse(w http.ResponseWriter) error
}

type GetCause200JSONResponse struct {
	Data *Cause `json:"data,omitempty"`
}

func (response GetCause200JSONResponse) VisitGetCauseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCause401JSONResponse Unauthorized

func (response GetCause401JSONResponse) VisitGetCauseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCause404JSONResponse NotFound

func (response GetCause404JSONResponse) VisitGetCauseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCause422JSONResponse UnprocessableEntity

func (response GetCause422JSONResponse) VisitGetCauseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CauseCampaignsRequestObject struct {
	CauseId string `json:"cause_id"`
	Params  CauseCampaignsParams
}

type CauseCampaignsResponseObject interface {
	VisitCauseCampaignsResponse(w http.ResponseWriter) error
}

type CauseCampaigns200JSONResponse PaginatedResponse

func (response CauseCampaigns200JSONResponse) VisitCauseCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CauseCampaigns401JSONResponse Unauthorized

func (response CauseCampaigns401JSONResponse) VisitCauseCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CauseCampaigns404JSONResponse NotFound

func (response CauseCampaigns404JSONResponse) VisitCauseCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CauseCampaigns422JSONResponse UnprocessableEntity

func (response CauseCampaigns422JSONResponse) VisitCauseCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CauseLeaderboardControllerConfiguredRequestObject struct {
	CauseId string `json:"cause_id"`
}

type CauseLeaderboardControllerConfiguredResponseObject interface {
	VisitCauseLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error
}

type CauseLeaderboardControllerConfigured200JSONResponse struct {
	// Data Configured Leaderboards Like V3
	Data *ConfiguredLeaderboard `json:"data,omitempty"`
}

func (response CauseLeaderboardControllerConfigured200JSONResponse) VisitCauseLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CauseLeaderboardControllerConfigured401JSONResponse Unauthorized

func (response CauseLeaderboardControllerConfigured401JSONResponse) VisitCauseLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CauseLeaderboardControllerConfigured403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response CauseLeaderboardControllerConfigured403ApplictionjsonResponse) VisitCauseLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CauseLeaderboardControllerConfigured404JSONResponse NotFound

func (response CauseLeaderboardControllerConfigured404JSONResponse) VisitCauseLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CauseLeaderboardControllerConfigured422JSONResponse UnprocessableEntity

func (response CauseLeaderboardControllerConfigured422JSONResponse) VisitCauseLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CauseLeaderboardControllerDonorRequestObject struct {
	CauseId string `json:"cause_id"`
	Params  CauseLeaderboardControllerDonorParams
}

type CauseLeaderboardControllerDonorResponseObject interface {
	VisitCauseLeaderboardControllerDonorResponse(w http.ResponseWriter) error
}

type CauseLeaderboardControllerDonor200JSONResponse PaginatedResponse

func (response CauseLeaderboardControllerDonor200JSONResponse) VisitCauseLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CauseLeaderboardControllerDonor401JSONResponse Unauthorized

func (response CauseLeaderboardControllerDonor401JSONResponse) VisitCauseLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CauseLeaderboardControllerDonor403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response CauseLeaderboardControllerDonor403ApplictionjsonResponse) VisitCauseLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CauseLeaderboardControllerDonor404JSONResponse NotFound

func (response CauseLeaderboardControllerDonor404JSONResponse) VisitCauseLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CauseLeaderboardControllerDonor422JSONResponse UnprocessableEntity

func (response CauseLeaderboardControllerDonor422JSONResponse) VisitCauseLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CauseFundraisingEventsRequestObject struct {
	CauseId string `json:"cause_id"`
	Params  CauseFundraisingEventsParams
}

type CauseFundraisingEventsResponseObject interface {
	VisitCauseFundraisingEventsResponse(w http.ResponseWriter) error
}

type CauseFundraisingEvents200JSONResponse PaginatedResponse

func (response CauseFundraisingEvents200JSONResponse) VisitCauseFundraisingEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CauseFundraisingEvents401JSONResponse Unauthorized

func (response CauseFundraisingEvents401JSONResponse) VisitCauseFundraisingEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CauseFundraisingEvents404JSONResponse NotFound

func (response CauseFundraisingEvents404JSONResponse) VisitCauseFundraisingEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CauseFundraisingEvents422JSONResponse UnprocessableEntity

func (response CauseFundraisingEvents422JSONResponse) VisitCauseFundraisingEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CauseLeaderboardControllerTeamRequestObject struct {
	CauseId string `json:"cause_id"`
	Params  CauseLeaderboardControllerTeamParams
}

type CauseLeaderboardControllerTeamResponseObject interface {
	VisitCauseLeaderboardControllerTeamResponse(w http.ResponseWriter) error
}

type CauseLeaderboardControllerTeam200JSONResponse PaginatedResponse

func (response CauseLeaderboardControllerTeam200JSONResponse) VisitCauseLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CauseLeaderboardControllerTeam401JSONResponse Unauthorized

func (response CauseLeaderboardControllerTeam401JSONResponse) VisitCauseLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CauseLeaderboardControllerTeam403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response CauseLeaderboardControllerTeam403ApplictionjsonResponse) VisitCauseLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CauseLeaderboardControllerTeam404JSONResponse NotFound

func (response CauseLeaderboardControllerTeam404JSONResponse) VisitCauseLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CauseLeaderboardControllerTeam422JSONResponse UnprocessableEntity

func (response CauseLeaderboardControllerTeam422JSONResponse) VisitCauseLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CauseLeaderboardControllerUserRequestObject struct {
	CauseId string `json:"cause_id"`
	Params  CauseLeaderboardControllerUserParams
}

type CauseLeaderboardControllerUserResponseObject interface {
	VisitCauseLeaderboardControllerUserResponse(w http.ResponseWriter) error
}

type CauseLeaderboardControllerUser200JSONResponse PaginatedResponse

func (response CauseLeaderboardControllerUser200JSONResponse) VisitCauseLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CauseLeaderboardControllerUser401JSONResponse Unauthorized

func (response CauseLeaderboardControllerUser401JSONResponse) VisitCauseLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CauseLeaderboardControllerUser403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response CauseLeaderboardControllerUser403ApplictionjsonResponse) VisitCauseLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CauseLeaderboardControllerUser404JSONResponse NotFound

func (response CauseLeaderboardControllerUser404JSONResponse) VisitCauseLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CauseLeaderboardControllerUser422JSONResponse UnprocessableEntity

func (response CauseLeaderboardControllerUser422JSONResponse) VisitCauseLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UserControllerCurrentUserRequestObject struct {
}

type UserControllerCurrentUserResponseObject interface {
	VisitUserControllerCurrentUserResponse(w http.ResponseWriter) error
}

type UserControllerCurrentUser200JSONResponse struct{ CurrentUserJSONResponse }

func (response UserControllerCurrentUser200JSONResponse) VisitUserControllerCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserControllerCurrentUser401JSONResponse Unauthorized

func (response UserControllerCurrentUser401JSONResponse) VisitUserControllerCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserControllerCurrentUser404JSONResponse NotFound

func (response UserControllerCurrentUser404JSONResponse) VisitUserControllerCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UserControllerCurrentUser422JSONResponse UnprocessableEntity

func (response UserControllerCurrentUser422JSONResponse) VisitUserControllerCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetFundraisingEventRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
}

type GetFundraisingEventResponseObject interface {
	VisitGetFundraisingEventResponse(w http.ResponseWriter) error
}

type GetFundraisingEvent200JSONResponse struct {
	Data *FundraisingEvent `json:"data,omitempty"`
}

func (response GetFundraisingEvent200JSONResponse) VisitGetFundraisingEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFundraisingEvent401JSONResponse Unauthorized

func (response GetFundraisingEvent401JSONResponse) VisitGetFundraisingEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetFundraisingEvent404JSONResponse NotFound

func (response GetFundraisingEvent404JSONResponse) VisitGetFundraisingEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetFundraisingEvent422JSONResponse UnprocessableEntity

func (response GetFundraisingEvent422JSONResponse) VisitGetFundraisingEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerConfiguredRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
}

type FundraisingEventLeaderboardControllerConfiguredResponseObject interface {
	VisitFundraisingEventLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error
}

type FundraisingEventLeaderboardControllerConfigured200JSONResponse struct {
	// Data Configured Leaderboards Like V3
	Data *ConfiguredLeaderboard `json:"data,omitempty"`
}

func (response FundraisingEventLeaderboardControllerConfigured200JSONResponse) VisitFundraisingEventLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerConfigured401JSONResponse Unauthorized

func (response FundraisingEventLeaderboardControllerConfigured401JSONResponse) VisitFundraisingEventLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerConfigured403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response FundraisingEventLeaderboardControllerConfigured403ApplictionjsonResponse) VisitFundraisingEventLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type FundraisingEventLeaderboardControllerConfigured404JSONResponse NotFound

func (response FundraisingEventLeaderboardControllerConfigured404JSONResponse) VisitFundraisingEventLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerConfigured422JSONResponse UnprocessableEntity

func (response FundraisingEventLeaderboardControllerConfigured422JSONResponse) VisitFundraisingEventLeaderboardControllerConfiguredResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerDonorRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
	Params             FundraisingEventLeaderboardControllerDonorParams
}

type FundraisingEventLeaderboardControllerDonorResponseObject interface {
	VisitFundraisingEventLeaderboardControllerDonorResponse(w http.ResponseWriter) error
}

type FundraisingEventLeaderboardControllerDonor200JSONResponse PaginatedResponse

func (response FundraisingEventLeaderboardControllerDonor200JSONResponse) VisitFundraisingEventLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerDonor401JSONResponse Unauthorized

func (response FundraisingEventLeaderboardControllerDonor401JSONResponse) VisitFundraisingEventLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerDonor403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response FundraisingEventLeaderboardControllerDonor403ApplictionjsonResponse) VisitFundraisingEventLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type FundraisingEventLeaderboardControllerDonor404JSONResponse NotFound

func (response FundraisingEventLeaderboardControllerDonor404JSONResponse) VisitFundraisingEventLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerDonor422JSONResponse UnprocessableEntity

func (response FundraisingEventLeaderboardControllerDonor422JSONResponse) VisitFundraisingEventLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventSupportingEventsRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
	Params             FundraisingEventSupportingEventsParams
}

type FundraisingEventSupportingEventsResponseObject interface {
	VisitFundraisingEventSupportingEventsResponse(w http.ResponseWriter) error
}

type FundraisingEventSupportingEvents200JSONResponse PaginatedResponse

func (response FundraisingEventSupportingEvents200JSONResponse) VisitFundraisingEventSupportingEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventSupportingEvents401JSONResponse Unauthorized

func (response FundraisingEventSupportingEvents401JSONResponse) VisitFundraisingEventSupportingEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventSupportingEvents404JSONResponse NotFound

func (response FundraisingEventSupportingEvents404JSONResponse) VisitFundraisingEventSupportingEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventSupportingEvents422JSONResponse UnprocessableEntity

func (response FundraisingEventSupportingEvents422JSONResponse) VisitFundraisingEventSupportingEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerTeamFitnessDistanceRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
	Params             FundraisingEventLeaderboardControllerTeamFitnessDistanceParams
}

type FundraisingEventLeaderboardControllerTeamFitnessDistanceResponseObject interface {
	VisitFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse(w http.ResponseWriter) error
}

type FundraisingEventLeaderboardControllerTeamFitnessDistance200JSONResponse PaginatedResponse

func (response FundraisingEventLeaderboardControllerTeamFitnessDistance200JSONResponse) VisitFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerTeamFitnessDistance401JSONResponse Unauthorized

func (response FundraisingEventLeaderboardControllerTeamFitnessDistance401JSONResponse) VisitFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerTeamFitnessDistance403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response FundraisingEventLeaderboardControllerTeamFitnessDistance403ApplictionjsonResponse) VisitFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type FundraisingEventLeaderboardControllerTeamFitnessDistance404JSONResponse NotFound

func (response FundraisingEventLeaderboardControllerTeamFitnessDistance404JSONResponse) VisitFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerTeamFitnessDistance422JSONResponse UnprocessableEntity

func (response FundraisingEventLeaderboardControllerTeamFitnessDistance422JSONResponse) VisitFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerTeamFitnessTimeRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
	Params             FundraisingEventLeaderboardControllerTeamFitnessTimeParams
}

type FundraisingEventLeaderboardControllerTeamFitnessTimeResponseObject interface {
	VisitFundraisingEventLeaderboardControllerTeamFitnessTimeResponse(w http.ResponseWriter) error
}

type FundraisingEventLeaderboardControllerTeamFitnessTime200JSONResponse PaginatedResponse

func (response FundraisingEventLeaderboardControllerTeamFitnessTime200JSONResponse) VisitFundraisingEventLeaderboardControllerTeamFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerTeamFitnessTime401JSONResponse Unauthorized

func (response FundraisingEventLeaderboardControllerTeamFitnessTime401JSONResponse) VisitFundraisingEventLeaderboardControllerTeamFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerTeamFitnessTime403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response FundraisingEventLeaderboardControllerTeamFitnessTime403ApplictionjsonResponse) VisitFundraisingEventLeaderboardControllerTeamFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type FundraisingEventLeaderboardControllerTeamFitnessTime404JSONResponse NotFound

func (response FundraisingEventLeaderboardControllerTeamFitnessTime404JSONResponse) VisitFundraisingEventLeaderboardControllerTeamFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerTeamFitnessTime422JSONResponse UnprocessableEntity

func (response FundraisingEventLeaderboardControllerTeamFitnessTime422JSONResponse) VisitFundraisingEventLeaderboardControllerTeamFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerTeamRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
	Params             FundraisingEventLeaderboardControllerTeamParams
}

type FundraisingEventLeaderboardControllerTeamResponseObject interface {
	VisitFundraisingEventLeaderboardControllerTeamResponse(w http.ResponseWriter) error
}

type FundraisingEventLeaderboardControllerTeam200JSONResponse PaginatedResponse

func (response FundraisingEventLeaderboardControllerTeam200JSONResponse) VisitFundraisingEventLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerTeam401JSONResponse Unauthorized

func (response FundraisingEventLeaderboardControllerTeam401JSONResponse) VisitFundraisingEventLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerTeam403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response FundraisingEventLeaderboardControllerTeam403ApplictionjsonResponse) VisitFundraisingEventLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type FundraisingEventLeaderboardControllerTeam404JSONResponse NotFound

func (response FundraisingEventLeaderboardControllerTeam404JSONResponse) VisitFundraisingEventLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerTeam422JSONResponse UnprocessableEntity

func (response FundraisingEventLeaderboardControllerTeam422JSONResponse) VisitFundraisingEventLeaderboardControllerTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerUserFitnessDistanceRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
	Params             FundraisingEventLeaderboardControllerUserFitnessDistanceParams
}

type FundraisingEventLeaderboardControllerUserFitnessDistanceResponseObject interface {
	VisitFundraisingEventLeaderboardControllerUserFitnessDistanceResponse(w http.ResponseWriter) error
}

type FundraisingEventLeaderboardControllerUserFitnessDistance200JSONResponse PaginatedResponse

func (response FundraisingEventLeaderboardControllerUserFitnessDistance200JSONResponse) VisitFundraisingEventLeaderboardControllerUserFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerUserFitnessDistance401JSONResponse Unauthorized

func (response FundraisingEventLeaderboardControllerUserFitnessDistance401JSONResponse) VisitFundraisingEventLeaderboardControllerUserFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerUserFitnessDistance403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response FundraisingEventLeaderboardControllerUserFitnessDistance403ApplictionjsonResponse) VisitFundraisingEventLeaderboardControllerUserFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type FundraisingEventLeaderboardControllerUserFitnessDistance404JSONResponse NotFound

func (response FundraisingEventLeaderboardControllerUserFitnessDistance404JSONResponse) VisitFundraisingEventLeaderboardControllerUserFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerUserFitnessDistance422JSONResponse UnprocessableEntity

func (response FundraisingEventLeaderboardControllerUserFitnessDistance422JSONResponse) VisitFundraisingEventLeaderboardControllerUserFitnessDistanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerUserFitnessTimeRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
	Params             FundraisingEventLeaderboardControllerUserFitnessTimeParams
}

type FundraisingEventLeaderboardControllerUserFitnessTimeResponseObject interface {
	VisitFundraisingEventLeaderboardControllerUserFitnessTimeResponse(w http.ResponseWriter) error
}

type FundraisingEventLeaderboardControllerUserFitnessTime200JSONResponse PaginatedResponse

func (response FundraisingEventLeaderboardControllerUserFitnessTime200JSONResponse) VisitFundraisingEventLeaderboardControllerUserFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerUserFitnessTime401JSONResponse Unauthorized

func (response FundraisingEventLeaderboardControllerUserFitnessTime401JSONResponse) VisitFundraisingEventLeaderboardControllerUserFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerUserFitnessTime403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response FundraisingEventLeaderboardControllerUserFitnessTime403ApplictionjsonResponse) VisitFundraisingEventLeaderboardControllerUserFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type FundraisingEventLeaderboardControllerUserFitnessTime404JSONResponse NotFound

func (response FundraisingEventLeaderboardControllerUserFitnessTime404JSONResponse) VisitFundraisingEventLeaderboardControllerUserFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerUserFitnessTime422JSONResponse UnprocessableEntity

func (response FundraisingEventLeaderboardControllerUserFitnessTime422JSONResponse) VisitFundraisingEventLeaderboardControllerUserFitnessTimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerUserRequestObject struct {
	FundraisingEventId string `json:"fundraising_event_id"`
	Params             FundraisingEventLeaderboardControllerUserParams
}

type FundraisingEventLeaderboardControllerUserResponseObject interface {
	VisitFundraisingEventLeaderboardControllerUserResponse(w http.ResponseWriter) error
}

type FundraisingEventLeaderboardControllerUser200JSONResponse PaginatedResponse

func (response FundraisingEventLeaderboardControllerUser200JSONResponse) VisitFundraisingEventLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerUser401JSONResponse Unauthorized

func (response FundraisingEventLeaderboardControllerUser401JSONResponse) VisitFundraisingEventLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerUser403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response FundraisingEventLeaderboardControllerUser403ApplictionjsonResponse) VisitFundraisingEventLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type FundraisingEventLeaderboardControllerUser404JSONResponse NotFound

func (response FundraisingEventLeaderboardControllerUser404JSONResponse) VisitFundraisingEventLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FundraisingEventLeaderboardControllerUser422JSONResponse UnprocessableEntity

func (response FundraisingEventLeaderboardControllerUser422JSONResponse) VisitFundraisingEventLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetTeamCampaignRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
}

type GetTeamCampaignResponseObject interface {
	VisitGetTeamCampaignResponse(w http.ResponseWriter) error
}

type GetTeamCampaign200JSONResponse struct {
	Data *TeamCampaign `json:"data,omitempty"`
}

func (response GetTeamCampaign200JSONResponse) VisitGetTeamCampaignResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTeamCampaign401JSONResponse Unauthorized

func (response GetTeamCampaign401JSONResponse) VisitGetTeamCampaignResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTeamCampaign404JSONResponse NotFound

func (response GetTeamCampaign404JSONResponse) VisitGetTeamCampaignResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTeamCampaign422JSONResponse UnprocessableEntity

func (response GetTeamCampaign422JSONResponse) VisitGetTeamCampaignResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignDonationsRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
	Params         TeamCampaignDonationsParams
}

type TeamCampaignDonationsResponseObject interface {
	VisitTeamCampaignDonationsResponse(w http.ResponseWriter) error
}

type TeamCampaignDonations200JSONResponse PaginatedResponse

func (response TeamCampaignDonations200JSONResponse) VisitTeamCampaignDonationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignDonations401JSONResponse Unauthorized

func (response TeamCampaignDonations401JSONResponse) VisitTeamCampaignDonationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignDonations404JSONResponse NotFound

func (response TeamCampaignDonations404JSONResponse) VisitTeamCampaignDonationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignDonations422JSONResponse UnprocessableEntity

func (response TeamCampaignDonations422JSONResponse) VisitTeamCampaignDonationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignLeaderboardControllerDonorRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
	Params         TeamCampaignLeaderboardControllerDonorParams
}

type TeamCampaignLeaderboardControllerDonorResponseObject interface {
	VisitTeamCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error
}

type TeamCampaignLeaderboardControllerDonor200JSONResponse PaginatedResponse

func (response TeamCampaignLeaderboardControllerDonor200JSONResponse) VisitTeamCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignLeaderboardControllerDonor401JSONResponse Unauthorized

func (response TeamCampaignLeaderboardControllerDonor401JSONResponse) VisitTeamCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignLeaderboardControllerDonor403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response TeamCampaignLeaderboardControllerDonor403ApplictionjsonResponse) VisitTeamCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type TeamCampaignLeaderboardControllerDonor404JSONResponse NotFound

func (response TeamCampaignLeaderboardControllerDonor404JSONResponse) VisitTeamCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignLeaderboardControllerDonor422JSONResponse UnprocessableEntity

func (response TeamCampaignLeaderboardControllerDonor422JSONResponse) VisitTeamCampaignLeaderboardControllerDonorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignMilestonesRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
	Params         TeamCampaignMilestonesParams
}

type TeamCampaignMilestonesResponseObject interface {
	VisitTeamCampaignMilestonesResponse(w http.ResponseWriter) error
}

type TeamCampaignMilestones200JSONResponse PaginatedResponse

func (response TeamCampaignMilestones200JSONResponse) VisitTeamCampaignMilestonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignMilestones401JSONResponse Unauthorized

func (response TeamCampaignMilestones401JSONResponse) VisitTeamCampaignMilestonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignMilestones404JSONResponse NotFound

func (response TeamCampaignMilestones404JSONResponse) VisitTeamCampaignMilestonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignMilestones422JSONResponse UnprocessableEntity

func (response TeamCampaignMilestones422JSONResponse) VisitTeamCampaignMilestonesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignPollsRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
	Params         TeamCampaignPollsParams
}

type TeamCampaignPollsResponseObject interface {
	VisitTeamCampaignPollsResponse(w http.ResponseWriter) error
}

type TeamCampaignPolls200JSONResponse PaginatedResponse

func (response TeamCampaignPolls200JSONResponse) VisitTeamCampaignPollsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignPolls401JSONResponse Unauthorized

func (response TeamCampaignPolls401JSONResponse) VisitTeamCampaignPollsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignPolls404JSONResponse NotFound

func (response TeamCampaignPolls404JSONResponse) VisitTeamCampaignPollsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignPolls422JSONResponse UnprocessableEntity

func (response TeamCampaignPolls422JSONResponse) VisitTeamCampaignPollsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignRewardsRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
	Params         TeamCampaignRewardsParams
}

type TeamCampaignRewardsResponseObject interface {
	VisitTeamCampaignRewardsResponse(w http.ResponseWriter) error
}

type TeamCampaignRewards200JSONResponse PaginatedResponse

func (response TeamCampaignRewards200JSONResponse) VisitTeamCampaignRewardsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignRewards401JSONResponse Unauthorized

func (response TeamCampaignRewards401JSONResponse) VisitTeamCampaignRewardsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignRewards404JSONResponse NotFound

func (response TeamCampaignRewards404JSONResponse) VisitTeamCampaignRewardsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignRewards422JSONResponse UnprocessableEntity

func (response TeamCampaignRewards422JSONResponse) VisitTeamCampaignRewardsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignSchedulesRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
	Params         TeamCampaignSchedulesParams
}

type TeamCampaignSchedulesResponseObject interface {
	VisitTeamCampaignSchedulesResponse(w http.ResponseWriter) error
}

type TeamCampaignSchedules200JSONResponse PaginatedResponse

func (response TeamCampaignSchedules200JSONResponse) VisitTeamCampaignSchedulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignSchedules401JSONResponse Unauthorized

func (response TeamCampaignSchedules401JSONResponse) VisitTeamCampaignSchedulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignSchedules404JSONResponse NotFound

func (response TeamCampaignSchedules404JSONResponse) VisitTeamCampaignSchedulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignSchedules422JSONResponse UnprocessableEntity

func (response TeamCampaignSchedules422JSONResponse) VisitTeamCampaignSchedulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignSupportingCampaignsRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
	Params         TeamCampaignSupportingCampaignsParams
}

type TeamCampaignSupportingCampaignsResponseObject interface {
	VisitTeamCampaignSupportingCampaignsResponse(w http.ResponseWriter) error
}

type TeamCampaignSupportingCampaigns200JSONResponse PaginatedResponse

func (response TeamCampaignSupportingCampaigns200JSONResponse) VisitTeamCampaignSupportingCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignSupportingCampaigns401JSONResponse Unauthorized

func (response TeamCampaignSupportingCampaigns401JSONResponse) VisitTeamCampaignSupportingCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignSupportingCampaigns404JSONResponse NotFound

func (response TeamCampaignSupportingCampaigns404JSONResponse) VisitTeamCampaignSupportingCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignSupportingCampaigns422JSONResponse UnprocessableEntity

func (response TeamCampaignSupportingCampaigns422JSONResponse) VisitTeamCampaignSupportingCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignChallengesRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
	Params         TeamCampaignChallengesParams
}

type TeamCampaignChallengesResponseObject interface {
	VisitTeamCampaignChallengesResponse(w http.ResponseWriter) error
}

type TeamCampaignChallenges200JSONResponse PaginatedResponse

func (response TeamCampaignChallenges200JSONResponse) VisitTeamCampaignChallengesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignChallenges401JSONResponse Unauthorized

func (response TeamCampaignChallenges401JSONResponse) VisitTeamCampaignChallengesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignChallenges404JSONResponse NotFound

func (response TeamCampaignChallenges404JSONResponse) VisitTeamCampaignChallengesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignChallenges422JSONResponse UnprocessableEntity

func (response TeamCampaignChallenges422JSONResponse) VisitTeamCampaignChallengesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignLeaderboardControllerUserRequestObject struct {
	TeamCampaignId string `json:"team_campaign_id"`
	Params         TeamCampaignLeaderboardControllerUserParams
}

type TeamCampaignLeaderboardControllerUserResponseObject interface {
	VisitTeamCampaignLeaderboardControllerUserResponse(w http.ResponseWriter) error
}

type TeamCampaignLeaderboardControllerUser200JSONResponse PaginatedResponse

func (response TeamCampaignLeaderboardControllerUser200JSONResponse) VisitTeamCampaignLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignLeaderboardControllerUser401JSONResponse Unauthorized

func (response TeamCampaignLeaderboardControllerUser401JSONResponse) VisitTeamCampaignLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignLeaderboardControllerUser403ApplictionjsonResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response TeamCampaignLeaderboardControllerUser403ApplictionjsonResponse) VisitTeamCampaignLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "appliction/json")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(403)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type TeamCampaignLeaderboardControllerUser404JSONResponse NotFound

func (response TeamCampaignLeaderboardControllerUser404JSONResponse) VisitTeamCampaignLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type TeamCampaignLeaderboardControllerUser422JSONResponse UnprocessableEntity

func (response TeamCampaignLeaderboardControllerUser422JSONResponse) VisitTeamCampaignLeaderboardControllerUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetTeamRequestObject struct {
	TeamId string `json:"team_id"`
}

type GetTeamResponseObject interface {
	VisitGetTeamResponse(w http.ResponseWriter) error
}

type GetTeam200JSONResponse struct {
	Data *Team `json:"data,omitempty"`
}

func (response GetTeam200JSONResponse) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTeam401JSONResponse Unauthorized

func (response GetTeam401JSONResponse) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTeam404JSONResponse NotFound

func (response GetTeam404JSONResponse) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTeam422JSONResponse UnprocessableEntity

func (response GetTeam422JSONResponse) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type TeamMembersRequestObject struct {
	TeamId string `json:"team_id"`
	Params TeamMembersParams
}

type TeamMembersResponseObject interface {
	VisitTeamMembersResponse(w http.ResponseWriter) error
}

type TeamMembers200JSONResponse PaginatedResponse

func (response TeamMembers200JSONResponse) VisitTeamMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TeamMembers401JSONResponse Unauthorized

func (response TeamMembers401JSONResponse) VisitTeamMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type TeamMembers404JSONResponse NotFound

func (response TeamMembers404JSONResponse) VisitTeamMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type TeamMembers422JSONResponse UnprocessableEntity

func (response TeamMembers422JSONResponse) VisitTeamMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type TeamTeamCampaignsRequestObject struct {
	TeamId string `json:"team_id"`
	Params TeamTeamCampaignsParams
}

type TeamTeamCampaignsResponseObject interface {
	VisitTeamTeamCampaignsResponse(w http.ResponseWriter) error
}

type TeamTeamCampaigns200JSONResponse PaginatedResponse

func (response TeamTeamCampaigns200JSONResponse) VisitTeamTeamCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TeamTeamCampaigns401JSONResponse Unauthorized

func (response TeamTeamCampaigns401JSONResponse) VisitTeamTeamCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type TeamTeamCampaigns404JSONResponse NotFound

func (response TeamTeamCampaigns404JSONResponse) VisitTeamTeamCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type TeamTeamCampaigns422JSONResponse UnprocessableEntity

func (response TeamTeamCampaigns422JSONResponse) VisitTeamTeamCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetUserRequestObject struct {
	UserId string `json:"user_id"`
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse struct {
	Data *User `json:"data,omitempty"`
}

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUser401JSONResponse Unauthorized

func (response GetUser401JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUser404JSONResponse NotFound

func (response GetUser404JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUser422JSONResponse UnprocessableEntity

func (response GetUser422JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UserCampaignsRequestObject struct {
	UserId string `json:"user_id"`
	Params UserCampaignsParams
}

type UserCampaignsResponseObject interface {
	VisitUserCampaignsResponse(w http.ResponseWriter) error
}

type UserCampaigns200JSONResponse PaginatedResponse

func (response UserCampaigns200JSONResponse) VisitUserCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserCampaigns401JSONResponse Unauthorized

func (response UserCampaigns401JSONResponse) VisitUserCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserCampaigns404JSONResponse NotFound

func (response UserCampaigns404JSONResponse) VisitUserCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UserCampaigns422JSONResponse UnprocessableEntity

func (response UserCampaigns422JSONResponse) VisitUserCampaignsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UserIntegrationEventsRequestObject struct {
	UserId string `json:"user_id"`
	Params UserIntegrationEventsParams
}

type UserIntegrationEventsResponseObject interface {
	VisitUserIntegrationEventsResponse(w http.ResponseWriter) error
}

type UserIntegrationEvents200JSONResponse PaginatedResponse

func (response UserIntegrationEvents200JSONResponse) VisitUserIntegrationEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserIntegrationEvents401JSONResponse Unauthorized

func (response UserIntegrationEvents401JSONResponse) VisitUserIntegrationEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserIntegrationEvents404JSONResponse NotFound

func (response UserIntegrationEvents404JSONResponse) VisitUserIntegrationEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UserIntegrationEvents422JSONResponse UnprocessableEntity

func (response UserIntegrationEvents422JSONResponse) VisitUserIntegrationEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UserTeamsRequestObject struct {
	UserId string `json:"user_id"`
	Params UserTeamsParams
}

type UserTeamsResponseObject interface {
	VisitUserTeamsResponse(w http.ResponseWriter) error
}

type UserTeams200JSONResponse PaginatedResponse

func (response UserTeams200JSONResponse) VisitUserTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserTeams401JSONResponse Unauthorized

func (response UserTeams401JSONResponse) VisitUserTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserTeams404JSONResponse NotFound

func (response UserTeams404JSONResponse) VisitUserTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UserTeams422JSONResponse UnprocessableEntity

func (response UserTeams422JSONResponse) VisitUserTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebOauthAuthorizeRequestObject struct {
	Params V5ApiWebOauthAuthorizeParams
	Body   *V5ApiWebOauthAuthorizeJSONRequestBody
}

type V5ApiWebOauthAuthorizeResponseObject interface {
	VisitV5ApiWebOauthAuthorizeResponse(w http.ResponseWriter) error
}

type V5ApiWebOauthAuthorize200JSONResponse map[string]interface{}

func (response V5ApiWebOauthAuthorize200JSONResponse) VisitV5ApiWebOauthAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebOauthTokenRequestObject struct {
	Params V5ApiWebOauthTokenParams
	Body   *V5ApiWebOauthTokenJSONRequestBody
}

type V5ApiWebOauthTokenResponseObject interface {
	VisitV5ApiWebOauthTokenResponse(w http.ResponseWriter) error
}

type V5ApiWebOauthToken200JSONResponse map[string]interface{}

func (response V5ApiWebOauthToken200JSONResponse) VisitV5ApiWebOauthTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebOauthToken401JSONResponse Unauthorized

func (response V5ApiWebOauthToken401JSONResponse) VisitV5ApiWebOauthTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebOauthToken404JSONResponse NotFound

func (response V5ApiWebOauthToken404JSONResponse) VisitV5ApiWebOauthTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type V5ApiWebOauthToken422JSONResponse map[string]interface{}

func (response V5ApiWebOauthToken422JSONResponse) VisitV5ApiWebOauthTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get by ID
	// (GET /api/public/campaigns/{campaign_id})
	GetCampaign(ctx context.Context, request GetCampaignRequestObject) (GetCampaignResponseObject, error)
	// List donations
	// (GET /api/public/campaigns/{campaign_id}/donations)
	CampaignDonations(ctx context.Context, request CampaignDonationsRequestObject) (CampaignDonationsResponseObject, error)
	// List top donors
	// (GET /api/public/campaigns/{campaign_id}/donor_leaderboard)
	CampaignLeaderboardControllerDonor(ctx context.Context, request CampaignLeaderboardControllerDonorRequestObject) (CampaignLeaderboardControllerDonorResponseObject, error)
	// List milestones
	// (GET /api/public/campaigns/{campaign_id}/milestones)
	CampaignMilestones(ctx context.Context, request CampaignMilestonesRequestObject) (CampaignMilestonesResponseObject, error)
	// List polls
	// (GET /api/public/campaigns/{campaign_id}/polls)
	CampaignPolls(ctx context.Context, request CampaignPollsRequestObject) (CampaignPollsResponseObject, error)
	// List rewards
	// (GET /api/public/campaigns/{campaign_id}/rewards)
	CampaignRewards(ctx context.Context, request CampaignRewardsRequestObject) (CampaignRewardsResponseObject, error)
	// List schedules
	// (GET /api/public/campaigns/{campaign_id}/schedules)
	CampaignSchedules(ctx context.Context, request CampaignSchedulesRequestObject) (CampaignSchedulesResponseObject, error)
	// List targets
	// (GET /api/public/campaigns/{campaign_id}/targets)
	CampaignChallenges(ctx context.Context, request CampaignChallengesRequestObject) (CampaignChallengesResponseObject, error)
	// Get by ID
	// (GET /api/public/causes/{cause_id})
	GetCause(ctx context.Context, request GetCauseRequestObject) (GetCauseResponseObject, error)
	// List campaigns
	// (GET /api/public/causes/{cause_id}/campaigns)
	CauseCampaigns(ctx context.Context, request CauseCampaignsRequestObject) (CauseCampaignsResponseObject, error)
	// List configured leaderboards
	// (GET /api/public/causes/{cause_id}/configured_leaderboard)
	CauseLeaderboardControllerConfigured(ctx context.Context, request CauseLeaderboardControllerConfiguredRequestObject) (CauseLeaderboardControllerConfiguredResponseObject, error)
	// List top donors
	// (GET /api/public/causes/{cause_id}/donor_leaderboard)
	CauseLeaderboardControllerDonor(ctx context.Context, request CauseLeaderboardControllerDonorRequestObject) (CauseLeaderboardControllerDonorResponseObject, error)
	// List fundraising events
	// (GET /api/public/causes/{cause_id}/fundraising_events)
	CauseFundraisingEvents(ctx context.Context, request CauseFundraisingEventsRequestObject) (CauseFundraisingEventsResponseObject, error)
	// List top teams
	// (GET /api/public/causes/{cause_id}/team_leaderboard)
	CauseLeaderboardControllerTeam(ctx context.Context, request CauseLeaderboardControllerTeamRequestObject) (CauseLeaderboardControllerTeamResponseObject, error)
	// List top fundraisers
	// (GET /api/public/causes/{cause_id}/user_leaderboard)
	CauseLeaderboardControllerUser(ctx context.Context, request CauseLeaderboardControllerUserRequestObject) (CauseLeaderboardControllerUserResponseObject, error)
	// Gets the current user for an access token
	// (GET /api/public/current-user)
	UserControllerCurrentUser(ctx context.Context, request UserControllerCurrentUserRequestObject) (UserControllerCurrentUserResponseObject, error)
	// Get by ID
	// (GET /api/public/fundraising_events/{fundraising_event_id})
	GetFundraisingEvent(ctx context.Context, request GetFundraisingEventRequestObject) (GetFundraisingEventResponseObject, error)
	// List configured leaderboards
	// (GET /api/public/fundraising_events/{fundraising_event_id}/configured_leaderboard)
	FundraisingEventLeaderboardControllerConfigured(ctx context.Context, request FundraisingEventLeaderboardControllerConfiguredRequestObject) (FundraisingEventLeaderboardControllerConfiguredResponseObject, error)
	// List top donors
	// (GET /api/public/fundraising_events/{fundraising_event_id}/donor_leaderboard)
	FundraisingEventLeaderboardControllerDonor(ctx context.Context, request FundraisingEventLeaderboardControllerDonorRequestObject) (FundraisingEventLeaderboardControllerDonorResponseObject, error)
	// List campaigns
	// (GET /api/public/fundraising_events/{fundraising_event_id}/supporting_events)
	FundraisingEventSupportingEvents(ctx context.Context, request FundraisingEventSupportingEventsRequestObject) (FundraisingEventSupportingEventsResponseObject, error)
	// List top teams fitness distances
	// (GET /api/public/fundraising_events/{fundraising_event_id}/team_fitness_distance_leaderboard)
	FundraisingEventLeaderboardControllerTeamFitnessDistance(ctx context.Context, request FundraisingEventLeaderboardControllerTeamFitnessDistanceRequestObject) (FundraisingEventLeaderboardControllerTeamFitnessDistanceResponseObject, error)
	// List top teams fitness times
	// (GET /api/public/fundraising_events/{fundraising_event_id}/team_fitness_time_leaderboard)
	FundraisingEventLeaderboardControllerTeamFitnessTime(ctx context.Context, request FundraisingEventLeaderboardControllerTeamFitnessTimeRequestObject) (FundraisingEventLeaderboardControllerTeamFitnessTimeResponseObject, error)
	// List top teams
	// (GET /api/public/fundraising_events/{fundraising_event_id}/team_leaderboard)
	FundraisingEventLeaderboardControllerTeam(ctx context.Context, request FundraisingEventLeaderboardControllerTeamRequestObject) (FundraisingEventLeaderboardControllerTeamResponseObject, error)
	// List top users fitness distances
	// (GET /api/public/fundraising_events/{fundraising_event_id}/user_fitness_distance_leaderboard)
	FundraisingEventLeaderboardControllerUserFitnessDistance(ctx context.Context, request FundraisingEventLeaderboardControllerUserFitnessDistanceRequestObject) (FundraisingEventLeaderboardControllerUserFitnessDistanceResponseObject, error)
	// List top users fitness times
	// (GET /api/public/fundraising_events/{fundraising_event_id}/user_fitness_time_leaderboard)
	FundraisingEventLeaderboardControllerUserFitnessTime(ctx context.Context, request FundraisingEventLeaderboardControllerUserFitnessTimeRequestObject) (FundraisingEventLeaderboardControllerUserFitnessTimeResponseObject, error)
	// List top fundraisers
	// (GET /api/public/fundraising_events/{fundraising_event_id}/user_leaderboard)
	FundraisingEventLeaderboardControllerUser(ctx context.Context, request FundraisingEventLeaderboardControllerUserRequestObject) (FundraisingEventLeaderboardControllerUserResponseObject, error)
	// Get by ID
	// (GET /api/public/team_campaigns/{team_campaign_id})
	GetTeamCampaign(ctx context.Context, request GetTeamCampaignRequestObject) (GetTeamCampaignResponseObject, error)
	// List donations
	// (GET /api/public/team_campaigns/{team_campaign_id}/donations)
	TeamCampaignDonations(ctx context.Context, request TeamCampaignDonationsRequestObject) (TeamCampaignDonationsResponseObject, error)
	// List top donors
	// (GET /api/public/team_campaigns/{team_campaign_id}/donor_leaderboards)
	TeamCampaignLeaderboardControllerDonor(ctx context.Context, request TeamCampaignLeaderboardControllerDonorRequestObject) (TeamCampaignLeaderboardControllerDonorResponseObject, error)
	// List milestones
	// (GET /api/public/team_campaigns/{team_campaign_id}/milestones)
	TeamCampaignMilestones(ctx context.Context, request TeamCampaignMilestonesRequestObject) (TeamCampaignMilestonesResponseObject, error)
	// List polls
	// (GET /api/public/team_campaigns/{team_campaign_id}/polls)
	TeamCampaignPolls(ctx context.Context, request TeamCampaignPollsRequestObject) (TeamCampaignPollsResponseObject, error)
	// List rewards
	// (GET /api/public/team_campaigns/{team_campaign_id}/rewards)
	TeamCampaignRewards(ctx context.Context, request TeamCampaignRewardsRequestObject) (TeamCampaignRewardsResponseObject, error)
	// List schedules
	// (GET /api/public/team_campaigns/{team_campaign_id}/schedules)
	TeamCampaignSchedules(ctx context.Context, request TeamCampaignSchedulesRequestObject) (TeamCampaignSchedulesResponseObject, error)
	// List supporting campaigns
	// (GET /api/public/team_campaigns/{team_campaign_id}/supporting_campaigns)
	TeamCampaignSupportingCampaigns(ctx context.Context, request TeamCampaignSupportingCampaignsRequestObject) (TeamCampaignSupportingCampaignsResponseObject, error)
	// List targets
	// (GET /api/public/team_campaigns/{team_campaign_id}/targets)
	TeamCampaignChallenges(ctx context.Context, request TeamCampaignChallengesRequestObject) (TeamCampaignChallengesResponseObject, error)
	// List top fundraisers
	// (GET /api/public/team_campaigns/{team_campaign_id}/user_leaderboards)
	TeamCampaignLeaderboardControllerUser(ctx context.Context, request TeamCampaignLeaderboardControllerUserRequestObject) (TeamCampaignLeaderboardControllerUserResponseObject, error)
	// Get by ID
	// (GET /api/public/teams/{team_id})
	GetTeam(ctx context.Context, request GetTeamRequestObject) (GetTeamResponseObject, error)
	// List team members
	// (GET /api/public/teams/{team_id}/members)
	TeamMembers(ctx context.Context, request TeamMembersRequestObject) (TeamMembersResponseObject, error)
	// List Team Campaigns
	// (GET /api/public/teams/{team_id}/team_campaigns)
	TeamTeamCampaigns(ctx context.Context, request TeamTeamCampaignsRequestObject) (TeamTeamCampaignsResponseObject, error)
	// Get by ID
	// (GET /api/public/users/{user_id})
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
	// List campaigns
	// (GET /api/public/users/{user_id}/campaigns)
	UserCampaigns(ctx context.Context, request UserCampaignsRequestObject) (UserCampaignsResponseObject, error)
	// List all Campaigns and Team Campaigns by User ID
	// (GET /api/public/users/{user_id}/integration_events)
	UserIntegrationEvents(ctx context.Context, request UserIntegrationEventsRequestObject) (UserIntegrationEventsResponseObject, error)
	// List teams
	// (GET /api/public/users/{user_id}/teams)
	UserTeams(ctx context.Context, request UserTeamsRequestObject) (UserTeamsResponseObject, error)
	// Authorize
	// (GET /oauth/authorize)
	V5ApiWebOauthAuthorize(ctx context.Context, request V5ApiWebOauthAuthorizeRequestObject) (V5ApiWebOauthAuthorizeResponseObject, error)
	// Token
	// (POST /oauth/token)
	V5ApiWebOauthToken(ctx context.Context, request V5ApiWebOauthTokenRequestObject) (V5ApiWebOauthTokenResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetCampaign operation middleware
func (sh *strictHandler) GetCampaign(ctx echo.Context, campaignId string) error {
	var request GetCampaignRequestObject

	request.CampaignId = campaignId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCampaign(ctx.Request().Context(), request.(GetCampaignRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCampaign")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCampaignResponseObject); ok {
		return validResponse.VisitGetCampaignResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CampaignDonations operation middleware
func (sh *strictHandler) CampaignDonations(ctx echo.Context, campaignId string, params CampaignDonationsParams) error {
	var request CampaignDonationsRequestObject

	request.CampaignId = campaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CampaignDonations(ctx.Request().Context(), request.(CampaignDonationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CampaignDonations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CampaignDonationsResponseObject); ok {
		return validResponse.VisitCampaignDonationsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CampaignLeaderboardControllerDonor operation middleware
func (sh *strictHandler) CampaignLeaderboardControllerDonor(ctx echo.Context, campaignId string, params CampaignLeaderboardControllerDonorParams) error {
	var request CampaignLeaderboardControllerDonorRequestObject

	request.CampaignId = campaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CampaignLeaderboardControllerDonor(ctx.Request().Context(), request.(CampaignLeaderboardControllerDonorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CampaignLeaderboardControllerDonor")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CampaignLeaderboardControllerDonorResponseObject); ok {
		return validResponse.VisitCampaignLeaderboardControllerDonorResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CampaignMilestones operation middleware
func (sh *strictHandler) CampaignMilestones(ctx echo.Context, campaignId string, params CampaignMilestonesParams) error {
	var request CampaignMilestonesRequestObject

	request.CampaignId = campaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CampaignMilestones(ctx.Request().Context(), request.(CampaignMilestonesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CampaignMilestones")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CampaignMilestonesResponseObject); ok {
		return validResponse.VisitCampaignMilestonesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CampaignPolls operation middleware
func (sh *strictHandler) CampaignPolls(ctx echo.Context, campaignId string, params CampaignPollsParams) error {
	var request CampaignPollsRequestObject

	request.CampaignId = campaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CampaignPolls(ctx.Request().Context(), request.(CampaignPollsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CampaignPolls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CampaignPollsResponseObject); ok {
		return validResponse.VisitCampaignPollsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CampaignRewards operation middleware
func (sh *strictHandler) CampaignRewards(ctx echo.Context, campaignId string, params CampaignRewardsParams) error {
	var request CampaignRewardsRequestObject

	request.CampaignId = campaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CampaignRewards(ctx.Request().Context(), request.(CampaignRewardsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CampaignRewards")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CampaignRewardsResponseObject); ok {
		return validResponse.VisitCampaignRewardsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CampaignSchedules operation middleware
func (sh *strictHandler) CampaignSchedules(ctx echo.Context, campaignId string, params CampaignSchedulesParams) error {
	var request CampaignSchedulesRequestObject

	request.CampaignId = campaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CampaignSchedules(ctx.Request().Context(), request.(CampaignSchedulesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CampaignSchedules")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CampaignSchedulesResponseObject); ok {
		return validResponse.VisitCampaignSchedulesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CampaignChallenges operation middleware
func (sh *strictHandler) CampaignChallenges(ctx echo.Context, campaignId string, params CampaignChallengesParams) error {
	var request CampaignChallengesRequestObject

	request.CampaignId = campaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CampaignChallenges(ctx.Request().Context(), request.(CampaignChallengesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CampaignChallenges")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CampaignChallengesResponseObject); ok {
		return validResponse.VisitCampaignChallengesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetCause operation middleware
func (sh *strictHandler) GetCause(ctx echo.Context, causeId string) error {
	var request GetCauseRequestObject

	request.CauseId = causeId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCause(ctx.Request().Context(), request.(GetCauseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCause")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCauseResponseObject); ok {
		return validResponse.VisitGetCauseResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CauseCampaigns operation middleware
func (sh *strictHandler) CauseCampaigns(ctx echo.Context, causeId string, params CauseCampaignsParams) error {
	var request CauseCampaignsRequestObject

	request.CauseId = causeId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CauseCampaigns(ctx.Request().Context(), request.(CauseCampaignsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CauseCampaigns")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CauseCampaignsResponseObject); ok {
		return validResponse.VisitCauseCampaignsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CauseLeaderboardControllerConfigured operation middleware
func (sh *strictHandler) CauseLeaderboardControllerConfigured(ctx echo.Context, causeId string) error {
	var request CauseLeaderboardControllerConfiguredRequestObject

	request.CauseId = causeId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CauseLeaderboardControllerConfigured(ctx.Request().Context(), request.(CauseLeaderboardControllerConfiguredRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CauseLeaderboardControllerConfigured")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CauseLeaderboardControllerConfiguredResponseObject); ok {
		return validResponse.VisitCauseLeaderboardControllerConfiguredResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CauseLeaderboardControllerDonor operation middleware
func (sh *strictHandler) CauseLeaderboardControllerDonor(ctx echo.Context, causeId string, params CauseLeaderboardControllerDonorParams) error {
	var request CauseLeaderboardControllerDonorRequestObject

	request.CauseId = causeId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CauseLeaderboardControllerDonor(ctx.Request().Context(), request.(CauseLeaderboardControllerDonorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CauseLeaderboardControllerDonor")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CauseLeaderboardControllerDonorResponseObject); ok {
		return validResponse.VisitCauseLeaderboardControllerDonorResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CauseFundraisingEvents operation middleware
func (sh *strictHandler) CauseFundraisingEvents(ctx echo.Context, causeId string, params CauseFundraisingEventsParams) error {
	var request CauseFundraisingEventsRequestObject

	request.CauseId = causeId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CauseFundraisingEvents(ctx.Request().Context(), request.(CauseFundraisingEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CauseFundraisingEvents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CauseFundraisingEventsResponseObject); ok {
		return validResponse.VisitCauseFundraisingEventsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CauseLeaderboardControllerTeam operation middleware
func (sh *strictHandler) CauseLeaderboardControllerTeam(ctx echo.Context, causeId string, params CauseLeaderboardControllerTeamParams) error {
	var request CauseLeaderboardControllerTeamRequestObject

	request.CauseId = causeId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CauseLeaderboardControllerTeam(ctx.Request().Context(), request.(CauseLeaderboardControllerTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CauseLeaderboardControllerTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CauseLeaderboardControllerTeamResponseObject); ok {
		return validResponse.VisitCauseLeaderboardControllerTeamResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CauseLeaderboardControllerUser operation middleware
func (sh *strictHandler) CauseLeaderboardControllerUser(ctx echo.Context, causeId string, params CauseLeaderboardControllerUserParams) error {
	var request CauseLeaderboardControllerUserRequestObject

	request.CauseId = causeId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CauseLeaderboardControllerUser(ctx.Request().Context(), request.(CauseLeaderboardControllerUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CauseLeaderboardControllerUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CauseLeaderboardControllerUserResponseObject); ok {
		return validResponse.VisitCauseLeaderboardControllerUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserControllerCurrentUser operation middleware
func (sh *strictHandler) UserControllerCurrentUser(ctx echo.Context) error {
	var request UserControllerCurrentUserRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserControllerCurrentUser(ctx.Request().Context(), request.(UserControllerCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserControllerCurrentUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserControllerCurrentUserResponseObject); ok {
		return validResponse.VisitUserControllerCurrentUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetFundraisingEvent operation middleware
func (sh *strictHandler) GetFundraisingEvent(ctx echo.Context, fundraisingEventId string) error {
	var request GetFundraisingEventRequestObject

	request.FundraisingEventId = fundraisingEventId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFundraisingEvent(ctx.Request().Context(), request.(GetFundraisingEventRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFundraisingEvent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetFundraisingEventResponseObject); ok {
		return validResponse.VisitGetFundraisingEventResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// FundraisingEventLeaderboardControllerConfigured operation middleware
func (sh *strictHandler) FundraisingEventLeaderboardControllerConfigured(ctx echo.Context, fundraisingEventId string) error {
	var request FundraisingEventLeaderboardControllerConfiguredRequestObject

	request.FundraisingEventId = fundraisingEventId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FundraisingEventLeaderboardControllerConfigured(ctx.Request().Context(), request.(FundraisingEventLeaderboardControllerConfiguredRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FundraisingEventLeaderboardControllerConfigured")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FundraisingEventLeaderboardControllerConfiguredResponseObject); ok {
		return validResponse.VisitFundraisingEventLeaderboardControllerConfiguredResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// FundraisingEventLeaderboardControllerDonor operation middleware
func (sh *strictHandler) FundraisingEventLeaderboardControllerDonor(ctx echo.Context, fundraisingEventId string, params FundraisingEventLeaderboardControllerDonorParams) error {
	var request FundraisingEventLeaderboardControllerDonorRequestObject

	request.FundraisingEventId = fundraisingEventId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FundraisingEventLeaderboardControllerDonor(ctx.Request().Context(), request.(FundraisingEventLeaderboardControllerDonorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FundraisingEventLeaderboardControllerDonor")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FundraisingEventLeaderboardControllerDonorResponseObject); ok {
		return validResponse.VisitFundraisingEventLeaderboardControllerDonorResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// FundraisingEventSupportingEvents operation middleware
func (sh *strictHandler) FundraisingEventSupportingEvents(ctx echo.Context, fundraisingEventId string, params FundraisingEventSupportingEventsParams) error {
	var request FundraisingEventSupportingEventsRequestObject

	request.FundraisingEventId = fundraisingEventId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FundraisingEventSupportingEvents(ctx.Request().Context(), request.(FundraisingEventSupportingEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FundraisingEventSupportingEvents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FundraisingEventSupportingEventsResponseObject); ok {
		return validResponse.VisitFundraisingEventSupportingEventsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// FundraisingEventLeaderboardControllerTeamFitnessDistance operation middleware
func (sh *strictHandler) FundraisingEventLeaderboardControllerTeamFitnessDistance(ctx echo.Context, fundraisingEventId string, params FundraisingEventLeaderboardControllerTeamFitnessDistanceParams) error {
	var request FundraisingEventLeaderboardControllerTeamFitnessDistanceRequestObject

	request.FundraisingEventId = fundraisingEventId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FundraisingEventLeaderboardControllerTeamFitnessDistance(ctx.Request().Context(), request.(FundraisingEventLeaderboardControllerTeamFitnessDistanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FundraisingEventLeaderboardControllerTeamFitnessDistance")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FundraisingEventLeaderboardControllerTeamFitnessDistanceResponseObject); ok {
		return validResponse.VisitFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// FundraisingEventLeaderboardControllerTeamFitnessTime operation middleware
func (sh *strictHandler) FundraisingEventLeaderboardControllerTeamFitnessTime(ctx echo.Context, fundraisingEventId string, params FundraisingEventLeaderboardControllerTeamFitnessTimeParams) error {
	var request FundraisingEventLeaderboardControllerTeamFitnessTimeRequestObject

	request.FundraisingEventId = fundraisingEventId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FundraisingEventLeaderboardControllerTeamFitnessTime(ctx.Request().Context(), request.(FundraisingEventLeaderboardControllerTeamFitnessTimeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FundraisingEventLeaderboardControllerTeamFitnessTime")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FundraisingEventLeaderboardControllerTeamFitnessTimeResponseObject); ok {
		return validResponse.VisitFundraisingEventLeaderboardControllerTeamFitnessTimeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// FundraisingEventLeaderboardControllerTeam operation middleware
func (sh *strictHandler) FundraisingEventLeaderboardControllerTeam(ctx echo.Context, fundraisingEventId string, params FundraisingEventLeaderboardControllerTeamParams) error {
	var request FundraisingEventLeaderboardControllerTeamRequestObject

	request.FundraisingEventId = fundraisingEventId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FundraisingEventLeaderboardControllerTeam(ctx.Request().Context(), request.(FundraisingEventLeaderboardControllerTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FundraisingEventLeaderboardControllerTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FundraisingEventLeaderboardControllerTeamResponseObject); ok {
		return validResponse.VisitFundraisingEventLeaderboardControllerTeamResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// FundraisingEventLeaderboardControllerUserFitnessDistance operation middleware
func (sh *strictHandler) FundraisingEventLeaderboardControllerUserFitnessDistance(ctx echo.Context, fundraisingEventId string, params FundraisingEventLeaderboardControllerUserFitnessDistanceParams) error {
	var request FundraisingEventLeaderboardControllerUserFitnessDistanceRequestObject

	request.FundraisingEventId = fundraisingEventId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FundraisingEventLeaderboardControllerUserFitnessDistance(ctx.Request().Context(), request.(FundraisingEventLeaderboardControllerUserFitnessDistanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FundraisingEventLeaderboardControllerUserFitnessDistance")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FundraisingEventLeaderboardControllerUserFitnessDistanceResponseObject); ok {
		return validResponse.VisitFundraisingEventLeaderboardControllerUserFitnessDistanceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// FundraisingEventLeaderboardControllerUserFitnessTime operation middleware
func (sh *strictHandler) FundraisingEventLeaderboardControllerUserFitnessTime(ctx echo.Context, fundraisingEventId string, params FundraisingEventLeaderboardControllerUserFitnessTimeParams) error {
	var request FundraisingEventLeaderboardControllerUserFitnessTimeRequestObject

	request.FundraisingEventId = fundraisingEventId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FundraisingEventLeaderboardControllerUserFitnessTime(ctx.Request().Context(), request.(FundraisingEventLeaderboardControllerUserFitnessTimeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FundraisingEventLeaderboardControllerUserFitnessTime")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FundraisingEventLeaderboardControllerUserFitnessTimeResponseObject); ok {
		return validResponse.VisitFundraisingEventLeaderboardControllerUserFitnessTimeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// FundraisingEventLeaderboardControllerUser operation middleware
func (sh *strictHandler) FundraisingEventLeaderboardControllerUser(ctx echo.Context, fundraisingEventId string, params FundraisingEventLeaderboardControllerUserParams) error {
	var request FundraisingEventLeaderboardControllerUserRequestObject

	request.FundraisingEventId = fundraisingEventId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FundraisingEventLeaderboardControllerUser(ctx.Request().Context(), request.(FundraisingEventLeaderboardControllerUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FundraisingEventLeaderboardControllerUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FundraisingEventLeaderboardControllerUserResponseObject); ok {
		return validResponse.VisitFundraisingEventLeaderboardControllerUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetTeamCampaign operation middleware
func (sh *strictHandler) GetTeamCampaign(ctx echo.Context, teamCampaignId string) error {
	var request GetTeamCampaignRequestObject

	request.TeamCampaignId = teamCampaignId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTeamCampaign(ctx.Request().Context(), request.(GetTeamCampaignRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTeamCampaign")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTeamCampaignResponseObject); ok {
		return validResponse.VisitGetTeamCampaignResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TeamCampaignDonations operation middleware
func (sh *strictHandler) TeamCampaignDonations(ctx echo.Context, teamCampaignId string, params TeamCampaignDonationsParams) error {
	var request TeamCampaignDonationsRequestObject

	request.TeamCampaignId = teamCampaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TeamCampaignDonations(ctx.Request().Context(), request.(TeamCampaignDonationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TeamCampaignDonations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TeamCampaignDonationsResponseObject); ok {
		return validResponse.VisitTeamCampaignDonationsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TeamCampaignLeaderboardControllerDonor operation middleware
func (sh *strictHandler) TeamCampaignLeaderboardControllerDonor(ctx echo.Context, teamCampaignId string, params TeamCampaignLeaderboardControllerDonorParams) error {
	var request TeamCampaignLeaderboardControllerDonorRequestObject

	request.TeamCampaignId = teamCampaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TeamCampaignLeaderboardControllerDonor(ctx.Request().Context(), request.(TeamCampaignLeaderboardControllerDonorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TeamCampaignLeaderboardControllerDonor")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TeamCampaignLeaderboardControllerDonorResponseObject); ok {
		return validResponse.VisitTeamCampaignLeaderboardControllerDonorResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TeamCampaignMilestones operation middleware
func (sh *strictHandler) TeamCampaignMilestones(ctx echo.Context, teamCampaignId string, params TeamCampaignMilestonesParams) error {
	var request TeamCampaignMilestonesRequestObject

	request.TeamCampaignId = teamCampaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TeamCampaignMilestones(ctx.Request().Context(), request.(TeamCampaignMilestonesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TeamCampaignMilestones")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TeamCampaignMilestonesResponseObject); ok {
		return validResponse.VisitTeamCampaignMilestonesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TeamCampaignPolls operation middleware
func (sh *strictHandler) TeamCampaignPolls(ctx echo.Context, teamCampaignId string, params TeamCampaignPollsParams) error {
	var request TeamCampaignPollsRequestObject

	request.TeamCampaignId = teamCampaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TeamCampaignPolls(ctx.Request().Context(), request.(TeamCampaignPollsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TeamCampaignPolls")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TeamCampaignPollsResponseObject); ok {
		return validResponse.VisitTeamCampaignPollsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TeamCampaignRewards operation middleware
func (sh *strictHandler) TeamCampaignRewards(ctx echo.Context, teamCampaignId string, params TeamCampaignRewardsParams) error {
	var request TeamCampaignRewardsRequestObject

	request.TeamCampaignId = teamCampaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TeamCampaignRewards(ctx.Request().Context(), request.(TeamCampaignRewardsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TeamCampaignRewards")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TeamCampaignRewardsResponseObject); ok {
		return validResponse.VisitTeamCampaignRewardsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TeamCampaignSchedules operation middleware
func (sh *strictHandler) TeamCampaignSchedules(ctx echo.Context, teamCampaignId string, params TeamCampaignSchedulesParams) error {
	var request TeamCampaignSchedulesRequestObject

	request.TeamCampaignId = teamCampaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TeamCampaignSchedules(ctx.Request().Context(), request.(TeamCampaignSchedulesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TeamCampaignSchedules")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TeamCampaignSchedulesResponseObject); ok {
		return validResponse.VisitTeamCampaignSchedulesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TeamCampaignSupportingCampaigns operation middleware
func (sh *strictHandler) TeamCampaignSupportingCampaigns(ctx echo.Context, teamCampaignId string, params TeamCampaignSupportingCampaignsParams) error {
	var request TeamCampaignSupportingCampaignsRequestObject

	request.TeamCampaignId = teamCampaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TeamCampaignSupportingCampaigns(ctx.Request().Context(), request.(TeamCampaignSupportingCampaignsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TeamCampaignSupportingCampaigns")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TeamCampaignSupportingCampaignsResponseObject); ok {
		return validResponse.VisitTeamCampaignSupportingCampaignsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TeamCampaignChallenges operation middleware
func (sh *strictHandler) TeamCampaignChallenges(ctx echo.Context, teamCampaignId string, params TeamCampaignChallengesParams) error {
	var request TeamCampaignChallengesRequestObject

	request.TeamCampaignId = teamCampaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TeamCampaignChallenges(ctx.Request().Context(), request.(TeamCampaignChallengesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TeamCampaignChallenges")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TeamCampaignChallengesResponseObject); ok {
		return validResponse.VisitTeamCampaignChallengesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TeamCampaignLeaderboardControllerUser operation middleware
func (sh *strictHandler) TeamCampaignLeaderboardControllerUser(ctx echo.Context, teamCampaignId string, params TeamCampaignLeaderboardControllerUserParams) error {
	var request TeamCampaignLeaderboardControllerUserRequestObject

	request.TeamCampaignId = teamCampaignId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TeamCampaignLeaderboardControllerUser(ctx.Request().Context(), request.(TeamCampaignLeaderboardControllerUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TeamCampaignLeaderboardControllerUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TeamCampaignLeaderboardControllerUserResponseObject); ok {
		return validResponse.VisitTeamCampaignLeaderboardControllerUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetTeam operation middleware
func (sh *strictHandler) GetTeam(ctx echo.Context, teamId string) error {
	var request GetTeamRequestObject

	request.TeamId = teamId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTeam(ctx.Request().Context(), request.(GetTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTeamResponseObject); ok {
		return validResponse.VisitGetTeamResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TeamMembers operation middleware
func (sh *strictHandler) TeamMembers(ctx echo.Context, teamId string, params TeamMembersParams) error {
	var request TeamMembersRequestObject

	request.TeamId = teamId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TeamMembers(ctx.Request().Context(), request.(TeamMembersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TeamMembers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TeamMembersResponseObject); ok {
		return validResponse.VisitTeamMembersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// TeamTeamCampaigns operation middleware
func (sh *strictHandler) TeamTeamCampaigns(ctx echo.Context, teamId string, params TeamTeamCampaignsParams) error {
	var request TeamTeamCampaignsRequestObject

	request.TeamId = teamId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TeamTeamCampaigns(ctx.Request().Context(), request.(TeamTeamCampaignsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TeamTeamCampaigns")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(TeamTeamCampaignsResponseObject); ok {
		return validResponse.VisitTeamTeamCampaignsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx echo.Context, userId string) error {
	var request GetUserRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx.Request().Context(), request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		return validResponse.VisitGetUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserCampaigns operation middleware
func (sh *strictHandler) UserCampaigns(ctx echo.Context, userId string, params UserCampaignsParams) error {
	var request UserCampaignsRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserCampaigns(ctx.Request().Context(), request.(UserCampaignsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserCampaigns")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserCampaignsResponseObject); ok {
		return validResponse.VisitUserCampaignsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserIntegrationEvents operation middleware
func (sh *strictHandler) UserIntegrationEvents(ctx echo.Context, userId string, params UserIntegrationEventsParams) error {
	var request UserIntegrationEventsRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserIntegrationEvents(ctx.Request().Context(), request.(UserIntegrationEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserIntegrationEvents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserIntegrationEventsResponseObject); ok {
		return validResponse.VisitUserIntegrationEventsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserTeams operation middleware
func (sh *strictHandler) UserTeams(ctx echo.Context, userId string, params UserTeamsParams) error {
	var request UserTeamsRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserTeams(ctx.Request().Context(), request.(UserTeamsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserTeams")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserTeamsResponseObject); ok {
		return validResponse.VisitUserTeamsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebOauthAuthorize operation middleware
func (sh *strictHandler) V5ApiWebOauthAuthorize(ctx echo.Context, params V5ApiWebOauthAuthorizeParams) error {
	var request V5ApiWebOauthAuthorizeRequestObject

	request.Params = params

	var body V5ApiWebOauthAuthorizeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebOauthAuthorize(ctx.Request().Context(), request.(V5ApiWebOauthAuthorizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebOauthAuthorize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebOauthAuthorizeResponseObject); ok {
		return validResponse.VisitV5ApiWebOauthAuthorizeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V5ApiWebOauthToken operation middleware
func (sh *strictHandler) V5ApiWebOauthToken(ctx echo.Context, params V5ApiWebOauthTokenParams) error {
	var request V5ApiWebOauthTokenRequestObject

	request.Params = params

	var body V5ApiWebOauthTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.V5ApiWebOauthToken(ctx.Request().Context(), request.(V5ApiWebOauthTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V5ApiWebOauthToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(V5ApiWebOauthTokenResponseObject); ok {
		return validResponse.VisitV5ApiWebOauthTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9e5fbNpI3/FUQzs6ZmWxDDZLgrd8zZ8djxxPvJLFfu515NomfNkgU1XRTpIakuqN4",
	"/d2fA4CkSImS2PdL8F+3SOJSKFT9qgpV+GxE+WyeZ5BVpXH02SignOdZCfKfaFEUkFXvSyjkv3lWQVaJ",
	"P9l8niYRq5I8O/xU5pn4rYxOYcbEX/9RQGwcGX84XLV9qJ6Wh89Xbb4OPxlfvnw5MDiUUZHMRWvGkfG2",
	"HoIhHtWfiVafs9mcJVPZF/zKZvMU5FBm+SKrTgqWlMBXo46WxpHx/t0L48A4Z+kCjCPD9K2JbRlfDgx2",
	"ziom58TSyjgy3p3mRYWSGZsC6gwGLUrgiJWIpRUUGauSc0AV/FpNjAPjFJLpaWUcWYQcGGURGUfGaVXN",
	"y6PDwypJqyReTqJ8digbLQ/rAU8+zafGgXGR8OpUfrox+++X6NkFlPkM0AXAGWQcRfXERa/TnKUjJ3nK",
	"yhNBPr4QhIpZWsKBkXDjyGBu5Pk8srHteSGmdmxiFsYuDgFin4QBdz3bODCSrISiAn7CBI0sYtmYWJi4",
	"x6Z/RMwj4kx84gSB/ZNxYKQwZdHyRDRv24T4xCH+gZGxGfTn1C7igZEXyTTJWHpyiTnNF2GalKe7x+QS",
	"yxVjKqBKivrVbJGmB0aZLqbGkTFbYqbGg6PVeMqKVYvSOFp1In5czOd5USXZ9KRazsVgsjwD48Co8oql",
	"J1dhvsWcs2rfDGwiZrAo0i1s9bdFKThyBofDk1nUe/YBc/qbIo+hLJM8YymqLpIqOkVlVQCbQYEuTnOU",
	"JmdQouiUFUm1/MqomTeMQosSJ8DUpT6mthvg0AksDAGjkUlD6pjQZ0jXCTyPuo7bMkBDPLHAeZQo9uNJ",
	"GeUF78yu/mUynTYTNQ6MmEUQ5vmZcWSsfkyysmLTgs16v5YZm0encp1XP1bJWdV8nVTqJzn5jZ8qsYSd",
	"Ly8gLJMKhslvHBjLfFEtQvH8/fN/RW+m/woX/1r89/9xim//NXP/GdIfLwT7XYNx93NjzXn1vhdC/gfx",
	"5xf1s1wNw/U4j3xwscNNgimQEAdB5GIw4yAKrJBQ4sm9XuRzKKpE6aKNAbM0fR0bRz/vVjff5xksjS8f",
	"1pnv+BSQahKpJhFPCoiqdInCJapOk7IVu32FsauzV2IHGOuM/nmt62eolJuwu/1YmC+qtW4PjFrilFWR",
	"ZFPRbiMprz/3WrUj0SLKY1SJ3zoT7iuP9Sn86xSqUyhQXqAsXxs3OmUlaj5FSQWzcjWVMM9TYLKHhO8j",
	"5xshh6NXXL7d1UUDw8l6M0AXrERRAULOii2bFzO5C4XgxVUi+XSDuB2JsXtc38kX1bgUp38eoLB4oii7",
	"Z1E39OD1V7dpcuvy9vXoOHqmrKxQVzeOI2tXC4/rqP5iWw9ClbNQsGVVLGCgRyXkd1PvnXjny0rpD62g",
	"eja0hpAtZsbRz8Yi69Kj+3czhw9D41vHFJ/3Cqd1mYRYxhFLU7Rqq31WdgZYgxU5skj8USTnrAKpsc6T",
	"Ck7yLF0ODnKLmrhpqXu5ia2hp/3sxKFiSVqiCyhAMXD9/Wj2lUpv7LzfF+ngrJMSJaUcWbxIU7QoUhTn",
	"RW+ok0ZJXqI38fYwkcUjVJ2yCuUXWdkn8WRjD3XV89jOV8J5cACvXsgZssuORAqMfy/k3jn6eU3rt3q4",
	"32OtF9eUltQwfcXRlfG16F4Xv2uisSe+asnSCo3NnTy8bXpMqziqXuoV3cUWTCpBBuP5hq7Iw08QVYJB",
	"mmdvmBhzBbw1lscv3ManYgU7BjVnFZOtaMtaW9bastaWtbasn5Rl/eHAmEHFlJj/bLBYUSP8R5qxb///",
	"6QX/61+NAyOEOC+g2d5pMksq48gkXzYM86YdZent8/52bJB617OiYEvxf3dQXf/u5ca34TdQn38etoFL",
	"gcJyCcQy+LVCc7F7kxglFYJfk7Iqx9gbzVD29zEv4DzJF+XV+qknOdSNwExQVsBRAWJjIfVu20i2mIUC",
	"LK7DK0mcdgZNFx82kMeXTXiyiSN24JUuTNmAGhppaKShkYZGGhppPDGksRUrjIMIA0pnt65ZbCiYB7V1",
	"ojyrWKTi55wXUJYnaZKBKUSIZTkm+js7FboeCnS8KLJ5cibm2X3VaoRglFRilf9eiKGh4wIA/ZikKZuK",
	"LyLBFoV4/npRQYHeJoKzYMYSsfb1KP4GRTypoBQgYZ6Xgp+inIMUZ4SYUvRO1Sb/JuN5ISjc8FfzpmKy",
	"vkT45iI/Q2+hjBaAXuaLjMtDAujP37x9+Rd0kRdnJWKF+F25w/ICygrN8jxDeYxkTwIszYt8llcg35nl",
	"ZYUgjiGSyyI7mBd5Jf7Pswn67zwRCyg9h6eQzsXfVY7CRZJyxFAIYhOqpr+S2vccimwGWaVY2bSwTR3X",
	"84NGOsW25zA38DATgp36doR9Elk4CuKA2b7NgQajVKvp2J5D11QrtQLXp17QatZhignRI5j1ZI28b1/W",
	"VEyyHrkEOSS5RHOl0YpJuMjPcCFbx3Gv9d+b0Nyrs8Vy+d5PA7HHy0X/Ovt8rZ3+rh8C8nFSlBUSL7Rh",
	"G9Uaqj8eYyisiYzB2AZEecav25ESQ4N2T1Itr9NwI8IG21YPr9F8LQs3IrMZkk+appRaiPMCxYuMSz1b",
	"NN1NxvTTE6xDU1EvIPHCNabTSOphy1A8u3LjXwYU7ZoaGOt4fl5/9lx8tSsqHS0VQRb9ANGihMmI4PrW",
	"sPqihOGYek8fDNFw9QpKeCceKEc00OTthLYXJTyEuLYaSA0UN2Obmzrr0ucf1ELdbJi3VXY731ZvjY8y",
	"CkpcN8S47pJpIlyNFlnfb5uxry7/jo16ba7TKrqlqNAjQi88tdiBv/c5ejQe13hc43GNxy+Fx6/oR1jU",
	"Z8h7kmunByHP4mS6KIB/B4xDEeasGIAEq9dQ570SfZecAfrRNnrR9ArEWvz8oXHnib8uAM7Spfh7Y2ZJ",
	"xpPzhC8UJ4yKqXTG8I2UMwOxFTWKG2ywmcKNNdldp8FlGLteezTQnvW4GqsNDnjvlHayYhcsb3Dgq3ev",
	"EbVMD7F0fspCqJKoj527PFirhTkT+1h8/fMz/NOHz/YXozO+bncDWGsta+MRKHftp/69+qm3buF1iyLP",
	"4DKn7LaHRH+oGxav7trUL/KMNTbRRgbTSMI08aHaD295NPaIhT0WBZiSmOPQ4gGmFMIwYqZJwZUIVPS1",
	"O2BlEcezBDbieZYXJ1E+m8lkL+OfAHO0mEswMxW2pwQ8X7Vv1gtwLIDjD2pdGndJkk1P4LyFdiQmoReR",
	"GMeBAHKBaePAC0McAwsj7rk+t9xm61GTOzZQE7sQxJgSYDiIWYjBJYEdWYEXBmQNyPmO57qObQsAnaaq",
	"SyciFgmZjQPqimbMAAemHWGbO9z2HB8oiY36g1xKi5qw4DHPJDEOCfiYRmDjwPYJppQy1418RhmTmPyC",
	"FVx9EoWchsS1MGE0xNT3AAduaOMAfNuy4ziwIxWNLCuWZGIn1PHcihVTqEkEcWBGoWtjL/AppmEYYt8E",
	"gsH1SQQR54wKEgkt1qWsG3tmRMIY235MMbUpxb7JbQyRaVrEp55vR9tyKm70WC/P5ZmAyQar3sC50lcv",
	"1o+yN92hKh861Npn+w1nRjKDsmKzuWj1ojHqeb1HlaulaWBy5cPoa7tpfRA/CKsqhbhC4RLJd8c3Ouyj",
	"UQRkabpE50mZhCmodqXLZoLkYeQZW6IQUAmVsFb+9CzLs+UsX5R/Qkm8SQXWPEZ5gWY5h4LVJNkY2PDG",
	"v9G173SBZBd7mOCGBvA+S/69APSKQ1YlcQJFe4K7odXkys62Vlzd9OHrN3maHog1zTPlO1yRSsitwZPg",
	"66LwNsb0Wj657Mg6wvamB/VWNn3ZAXVE+d4Mqc6eSkrE0JwVlWBphmZ5Vp2myw4fbZUAnfSpjtK4aWIc",
	"y6YvS4w1lXRzg5JEEq3X233nsbnhBAKjr4zWNMO6kO7J1y0yrfazdj2rzS7e2EJdzu0yTXcR1+nXcbi2",
	"qHEHorzDfACNUzVOvWWcep8nlNvdpk8oP9YTytuF4oAE/aYo8qIrNftDfy1fRAVUiyIDjpIMPXvzCoH4",
	"qux7euVv4o84gZSXzcLPoCzZFBTWVwGFzkFVSugmw7Yt9X9u2pXhqqSSzqw3fe9xw+Gb6ZxrrLxlKVd0",
	"aYe9Gb49XcxYhgpgXLSA6jdrF18ocLngJDmJQSNhV87tt8fHb3qJt3VDq3aSrILpAKc0A27bH+SR7heq",
	"4Y6m7fPCELOc10acrj+jz67rs+v67LqOCTzd+jPjwgOdjLbdLx4Dm61e7mqdc2V0DmsbnemtdZjWYVqH",
	"aR2mddhjyvRWWk07UR6rE2UL+BiAKS/zIkw4h2w8Mukb2pue/3Wvi4zOdidf5osiApSUMrrC0jS/kNEJ",
	"FAJiUQRleSCDGTWDoaQ5sV3KPIt5AbNkMUMxsGpRQDm5pCdnNeWuJ8fu0q/7yibJVn7nQZfCgzolzRYl",
	"KKnjWTz2ITSxDYEjpE6Mmcdc7FquTXlAwQrAGHcs+Tuo/lSiKVTo66/LeZ7n+dny66+/kqXLeLmu1y8H",
	"2uRYg9h1vCigmBEPMKUex4xyikM/ZCwKiRlb1ih8Rp3AD7w1fGZ5ru0GtkdbfPZunudnVR5CgSwimx6B",
	"s6gTBNTaibPKtl1ct1tWrKiGSDQIvm4RY8nRB7sxluQeLOZyuD6Ta6fZtYx50wFQeVB4vWjZxrmDyb3l",
	"Qg0P5TpJNxstDvlt2505kHTFKmjO0Aw1h8S3G4do7r7E6dA8t5wYudn0rU2KPLQSpaNYYGTd0OHZ3mYB",
	"0eEe77iSaCOWB/JKVcyWpft3impnaK/sH+74YqZDq329qqZ3XDB0k3A3Ujl04HTZgy8hOqQOtmYVNkpz",
	"X1phI+zb4prj8grHVc+sN0qnkubIupkdt+kGhh6Bs+/GmarRu0bvTx+936dzaWPvaz/TY/Uz7RfRI+T6",
	"o8o61xJZS+RbkchXyl3dFKU7NueuPan8MkO2j3yCkixKFxwUhj2tZilaDRZlEEFZsmIpRFsBGYcCsQz9",
	"siDEjpLZVP4BqGLTvqf2AezndTm7pi/SARH7bsMVU7snZG9jZHcz+vWWv5W/95rbkU7QHqWrKbDe2kth",
	"abx/+91GexvjqSmyYVaJny89mnWtklar9VIjbTrsmAOvatJt8OVG6vk1ki8flCI5hZVwU8fWGY1DHxgm",
	"gccwjSwPh2bsYuJ4dsBMx/E9YrQCtjlNcAxstlPk/GcTGpep8zuSCDdxhBSWWwz4dLUuCMTCCOKMO3NT",
	"ewv2HLj5Hli5KIC/z5LK+PLh8rc4KQIPwrBTlkmRhuYpi1Y+NDmP7RzewKbLuhi3e/DEkvyp3FqN6bY9",
	"DzIrZ17kcZLCZHwuTuuNkBSuXQtN6Ltv5W/s3hE7/OElw2i5cb/24piKJtpefBT24v7NPigh6nCIHP28",
	"gEg6cOuZrltS4l2ULWZQJBFaJR6r5iboVYyW+aJAbD4XgpHDXODVrEJ549NPIOUHaJ4CKwHNkmnBKqEL",
	"UcLr/OuLJE1RKPZ+M5bmhIJkg3Moyg4qfPbmVe+AgmVZlkeksbSiSj3BAV3T04ObWFRuEcQhTrIkm6KZ",
	"fFsmdtR6O8nQNDmHDC0yuaadzSF/OTJmibxvqSv3TNPYi40XgwOa1cNtu6ujEqpiqeDUsyTNZ6BYR3Y9",
	"FI6oB7PeuoAOlbAzWmW0uxxfPQjVWkcv9Yg6wHHfJymUVZ5tFKSWRdMaelxKiajkPYcSwsDENA5jTG0S",
	"4SCKYhz7PjieGwcuM0eY4e6EOL6zYYZThzq+5wZ2K+2/A1ZkiKHj5Ow4P0OcZRGgNDmHr4y9Fq3sxLXc",
	"oYq6NRlGpE3PGkrKvGn13VBC9C0Us6j3XzuCiXEX9QTWutsVXv4+l0VJ2+IVK1rdc3S5Zf/t0HRHNG73",
	"tG6gxmbDRa0QGBfcGi6Iudrqu+TA3YDS36d0uU9ouVp9jSkfK6bcsUmHtrRUHPuBVB9prGBUuxl7e3jE",
	"Ft2NplYNXObo2Y0Bpc6sNsGSpNgAKX/IK5UQfecnhyOWCYARApJFWCc3l8rdFoVr5jY076GCcbqook4+",
	"0UUVL11UcRBY7RYKAmnPm89kPYei/natpEMNrG4bX2zMSeOIR4Ujut/JZerovlGQ4k2epiMcBZfb7UrY",
	"mjGnpu9j26EhpnbkYN/2XWzHjHmOzR3f88Yheho4lrmG6E2LWo5HLWccoleHYMsrpxzLGdncDxzOAhwG",
	"boxpFDo4YCHBDqGMRGYYEx6PmpHpm9RZT7x1PNPzid1JvL2ejSI68elPMlilp/zkp/xhxMtW4Pqec5dO",
	"sRs7jv1MmTJv+5HceZ6m9QF37SC7MQdZKyxHOiJWdTWHEMQDcretjneP87o1hNjmf5PKc4tSfT3fWm/7",
	"dySHB09sPDGh0Onv8mKh8/F9C4buUG7Cd74+tRvYzlfaxdv37uv5tuqm4um9+c012NbIU0/5yYDt+4wR",
	"SYSi3TqPNTw0rIaG9FUDXDZGvB23vK5PFb1//+pF79Ym3w9pSGOCuRcTTJ2A4gCAY8uJfTsgrm3xngJf",
	"LFQZ8WbQzVgGyKqq3d/cyZShbOMmDJCkKZon0RliqMyzqczSlZmqSYXmeV6kyy05Kp0Nb1PLlFIlZklx",
	"MmPFGVQnbdxqrJQDK+B2RH1sudzB1PU4ZiZ3cAiRz8F1PJ87Qso1eQwPIN4yQuLa1HKcNYnreq7nmr69",
	"krjvBMUZeidW4E1D9X8vWFbJiytNIkba/H9SwIzJIKZxZNnbEmT6Y/BU3spe2W1Ty7ev5/tQtczv6DRQ",
	"bdxkAFwVGIpSlsyUiaMGsrf0xtZsj/r7MfdVb6u8sY72a9qAOih3taIHg5vs+meqRLNINYtks+2p+S10",
	"uAurUXWtDMbVvh/TXZ0l8GFo1JcxPesVu2erU2mErQbnSlKsf9jL8OgvaK3tT4WQVNoZOGpbGpOUNCSQ",
	"1gfQPrqtQeyo67FlLdUXV95/D+tk3LaqEJtSovEE1IlYez0CnVUYWOh+nYhh78HbRnBsIDH15KGfudO4",
	"SeOmS+Km+zRj37Z4Rxuyj9KQ3SYVhwRonq6fSFO5Yg4NIhJQTKLYw9TjFPs0jnDAXNeNIt8nFjMOjDMQ",
	"YkXe/lMu5lCcMD5LslUS2TGwGXomfkvKqmCVus9+7SrsS+VIng2dyXyVSSGTojNYrjBfLrNVmrySgUHK",
	"n3r/yMq7M5axqSR651qjtR9nIFdrKCNlGHn9WN/RuKrF1o5wt6qWqvRMnquULXf1Yu/71aK+ayuZ948a",
	"dgekNuUuxWJPPEqIcvOpYsTMoSY4AbY9J8KUe4CZxzgGTmzCLZ86zhi3t2o3CNbd3kEQ+F5gWS3zfJun",
	"CWdL9G4OUcJS9F1yDkpxGvuEruzDtOwRQrd+1RswVneae011dtTUjUd9CHVzxl7bgfgCJRl69e617xIT",
	"1cDvqgBUB/BvJIB/CcOhXUn1zfi1fFDGwzZTYVyAcD/cb8XXDtF2J5BfC8w9AvM+UWrLJRqnPlacun0z",
	"D+38ukbrcNkKJutVlOliqizPRgWpVJwmHaSX/tH8het6la0k/L8/M/zb/z7DP/0v/vCf/9GJtbxTL25Q",
	"890qNWGjHqw6kn6RVKfonBVyxVQmA2rO35fS5k+T7Gz9VPrvI89hd7pTS4R14r5QD1CSnScViOUf5/Ru",
	"iLVRBKl+gt6IDdXJk9iPo1a03jRM6keXanC1TBsxhvrJpZprFnjzYnwZlr9UUzVjbDSlsoIu29SwPFUP",
	"LtVYy4kbKH1RVvkM1c/HcknLuOvN/Y96IAsDZZAiGcvd09w6eqoZusOLXRbqrH67ci3dV1RbTXk12i6E",
	"UhJpQIyqS79vLiZ8lcMou92Zlu0FttmCqCBiLmPgYz8mFFPH9nBgEweD70ZuFLrACR11aEW063kbF3BR",
	"ElDXIjd0aMWyfULI9QKf6v7luw18Vjk6TepLAlT/d3asfNXdaIu4ptCu8OfdW7tqUJc3devJ3LOdW4/i",
	"Jo6idiZ0G5Gq9XOplzVAh43OWi5ulZgPPcak5fCwHL5PE/W4lWzaQH2UBuq2rT8kJUDh/4d6vdeaJq6L",
	"+02LfDFHeYziIpHe5e4dE0Kx1Un9qMqnEqdMGnHAuUcsi3AMQWBjSkKCQzvwMPdc4rI4YNx01srC2LYb",
	"BIFlbisxWOf898oJ6rz/G8n731fb9XIFU3fGRcQW7XJ3CZE6DCeEeV3HdGsp0a24bWx48IZvTtpTd/VS",
	"9wa1fLzzbfXWbd6zs6tYr7C5UQHzAkrI6nKF79+9mNx9kdmtN9v0ow8S2A1FGeo7aFo7ePjemX4R2loO",
	"Dcr29jLm6+cYPqxrCkZfOtCoBpDK4FRp0xu5YxtCy+Kmx3HIKGAacwszFoQ4ipnF7dj0TGsctKSm6fh0",
	"DVoGvm/ZFnFXeuf1okBd3XPrN23Lkbmmt/PGgnxR4K6YHnvftpKezV3bnUu4r8KbVQ1jNHbR2OWhYhd5",
	"AEcuZBwQ3wTgOGK2iyk3AxzYdowtgNjjQEwT7Nu8y0Pta3WD/o4JyN0s7/LYvsdvO3t784Y9nhQQVely",
	"5YgTorA7oMte1Hofd6T2Bn3t+1H7JBiBTm/3GtPdw9nQqXt9y0nZtiaPyrfnUZQ7Y8jPfBuXpPam9eAu",
	"SF0n+mbFjnWIcP3Fb5rsrX5PNoy7kHWTsrd5Getmb3d8EevYW1A7q3m9y097kOvz6EtMWxrtvLt0Nbga",
	"y8lRReKPIjlXd8OqaPdJnqXLXQMchH+3cEUry5Zb72FtoeSobo+byyM2e5UQfe2W7pXEH5CKLUC46QvD",
	"Lz+Su70st78hb+Si3H6TD/+S3HU8sKeoyerC3J235NZ34/bU7ei6Rj11MfbqXHVdblfe7Njc9WZbcf5V",
	"LtrteTn2eEHu8Ood7VvRvhXtW9G+Fe1b0b6Vq/pW7vUQQFet6qMAj/YowE70swcu7av9r4GOBjoa6Gig",
	"o4GOBjrXAjpXuhq+j1C26Lx9qu57lRA/UErADQPbjSzAnFsWpjGlOPQtim2wbWZb3PSteFQWpBPYtu2u",
	"1/IwCaXEPzCKPAVVBfW2Cxh8GHHHPyGBE8i6I4tSkUVf8KMv+HmIF/zcWoBPlci4u/BeLQA2I75pUla9",
	"iKoa2Z9KpD45GFkWJx9ONh7vRu9Q5Gq+81qU7L9xaaiGyHZHdUOGvne4rOubdJRBLeR3qoA7cQ1rxaIV",
	"i1YsD0ux3LeTrRZO2sX2mF1s23TIFpVzN3FI7cbQbowH6ca4b5Grhe2jFrajxezjvbtYC8jftYC8sj90",
	"Y6/s2iLvM7aoTvMi+Q3u6orzAiWlPNS96vmyd5v3Rt293tzszn3trYG5z4s8Eo2GKXzTVo+/ExKcMplK",
	"ep5wmal4ztKEozkr2AwqKMp9BPlsNI5zuW1/NuomjA9f+nSqZyjrt37T1DJv6WVZfXpt0mOIbEW6vZhZ",
	"72Dj6HJmO622w2aqTbWzdrxFOuRqel9uOPO1n0H7GR6An+HectfFaB5e7rpOQb/Bw+Oy71UKepcDh1il",
	"5ogOx+6pZTQyh3188npnhB1XvRTeQ0qnhOLxQnkt5H/HUcoxuL0NfXX3wXbcLgQiRAvBLO9EC7U6qdEu",
	"azSEbF0mRQIruvtKTMz48kUGReN8IPYHaSSMvtppcKzmj3500LM3rxDPoxlkFVN6Jqlg8kv2S9aVTir7",
	"S74s5FP9/QS9kqUBk6yCrL6rLOzlxBYSA1dLxOEcUkHEUr60SFIuP5sWstdSVaVt2hXd/wG9nkMmepQl",
	"pOMkkm+KcYEcyKIENbjB99CfXz979xfRGYc4yUC++ezNqwn6Pi8ACTIVM9bLud3WUsQyMa04X2QcsQr9",
	"3LBRecGmUygmSX5Ydr84/PDnva/8pZ7ks0V1Clm1ml29NHJ2r8VTZE0IYpHA8ajKzyCTJGSr7xQ5alOk",
	"nKD/yRdoxpZoChViGXo2n6fNVD6qdk5kOx+RTCQTnLn2YIJ+yY77fRygZb5QVwRlUF9LJyPpogvW6SLJ",
	"eiwmW3/BytMwZwU/kIlgi1ItxxQyKJjQq1EBsoghS0vR9y/ZH/6A/gGVzBNbm8IzRYljMVD0S80PM6hO",
	"czmoetLdEXVph+I8TfMLxTjP0wSyCj1fdY5eizlbaFqwrEJxml+o4bQklbql9o4JVdox8ZrN9bNsox7g",
	"Nxmf50lWffjzHyo2PczFo790x9kfm6w0q/aCaIrNkzY1frJOFkXaLjm2UENBia1UkExmSUZshQ36R4cA",
	"8iY9+YG8C6pEDDW8jGqNifIYneYXossCqiKBc0DPegNU/S6kj0v1qOazmpBMM845tLKnaVsynZQrzWur",
	"0UhJXwrtr65LnPyS4R67vHpxhEzLpuL3t6CIiZrdeXFxMWl0vtAFRf2CePkdRAVU6J+wPEKs5LEclpBv",
	"0ySTK3SAShACQZE3EbA8LPIL8c+amFXbuE/gRZFO0KssShccxNYqGm589UJtEsVlSmEgIeYFjT8KAn0U",
	"0/33Aopl18GwYtKk22ozJfT+7SuUxHIXn7JzQDMhBqtTJiwKmKBnqJyzCFAJok2xJ5ujKmWUz6GULbO0",
	"lBKecQ78QKw4nENxINrN8qrpmB/IwX9USuOjaqBdRbaociF4I5amS1RCClEl1+2X7OPHj79kzdqcO2ye",
	"TLqaWm6ew9YF9F+/LAix3EiS7SThf5XLLH9r6HYi6PZXyVT174oYJ4si+avs6I/2sz9aL/9ovVxjhT9a",
	"L1tmkJ/KSfxVTake6S/Zs7iCApXJVF4GmNRprvUAk2x6sELyzfSbVoWKZNGZYBW5TtFpXkp3Sme5pBxg",
	"60u94oMDFOVZVV9F2GwfpX6rHMUgUKkUI50tuEnobZvgv0RrkqgsjDjE7ayPm57K03yRcjGrOSvrXuVk",
	"SijOoZATlFukXNu1ZQXzspGhzSdyu53B8gBdnCYCT6vWBWOFgODXeV53sQIkk0aGPM+zc1BpxWJ0z8Xo",
	"jvM1EbSSkR0pJRrbeOkAMTTPy6pRqmi2KOUoZoyvQJSUaO/ffif2sfwlzPmyOdwlTDlWwNrElbtPcMrL",
	"vJihF6xi9W0rE/RDXkErWOXmkNndktI1DJN/N0PnKC7ymeogKcpKUnW1vGv7Itvk/Z0CcGPxpUpUG6qH",
	"S0+UzG54oxZ5kt2VrxSxlRwTZlGfJEftgD+LvxBC6BejC0Z+MY7EL6HLnMCyqUsp5cACz/SIb3tgEsp9",
	"5ux7/otx0DReHwA8YZVqWp1sMrHlHZvBkW0dEfunzuvw6zwpoDxJ5Eg8YUg2jwqICyhPu+PMPn36tKxm",
	"dl5BNZsWn2YJIctP7CK9APrbdFn99in5dWnNfptZSzv7xC6iqWmZlm0GQWAHNrM7HUuJo1qtxc7qmexR",
	"LoZ6QdkDvxiChF86G1XW7e7oXyHEs/yiRemsFNvsQuDbVKnvGTuDDpaUhwblqy0o+fmwLg+DhWCrgY34",
	"81Dge4VuxY56nmdVkacpFJP6A3ml2V8Q1JjoYOX4+CiefGxuqJA3qSo3e4N63kvd392jpRTAXCnKvm49",
	"BcaVFpai5dvj4zfNlFb7o/fJEfq7pCASwt6Oevwnflkx+Ddqtxztaefa/Nr01879rWK2zuTl2jCBuBMB",
	"XvsrnbQnXQ/kBlQfq2eNLmriFQri9d+pjZ5GmSggmcFFv5e2znZTMSjPpKgWO2YiJDDPpSftQPHVmlSt",
	"BWkNDYtU8dhK0KAS5Esfexvt44oV+8tek141V+uc3peoZD2x2Va6aeTTOO7ob/srsce1xUTTnxrRu9p3",
	"8EKYuokyqA+bkXUCLD86z+bJm6aSyzkUpXIPmBMiiwnNIWPzxDgy7AmZEOPAmLPqVLoiDtk8OVRiqA3f",
	"lIefO0GrL+K1+jqH9YuexV4WZkNbuyNcoqQq1ZUVrdR4xY0j4x9QdZLXVvh28xKs1a13splE/CTGuzrX",
	"2g2pdb2fykOuXDViuOue0g/iZcURcvIWIdLNlGcV1PccrCyMw09lxznDnmpa5VqZ/WWbb3gBIEFet/bM",
	"jSRRMjfyfB7Z2Pa8EFM7NjELYxeHALFPwoC7nj3iSLUz8YkTBPZGkXdCfOKQ1b27nTnddvqkGJNLVJrV",
	"1vTJ2bLNrBqZOJlk05PmdI5Knry1RDE1A5vsThRbhXyHJ6OPjWtP/4MK58o7d1VCh8d55IOLHW4STIGE",
	"OAgiF4MZB1FghYQS74qxgcH8xv25jV82eHN1WuXAoMS8lI7aGbzonrMZ6Lf/XPRNb6zvH/LqZb7IBvv9",
	"Ia9Q/fDAoJZ1gxPePCgzOO/Oa6h9T8jf2YwVSwVfBLiRiKRiUwFbWhhifBDvjkBShzzPVFikg6n6MKlh",
	"lxftm+PBEsoLpATPjSOng23YL8/SJWqnpTwb0g0ZgjA2ciGMpU9MHhvtnC+aqQt9hm6nXR03sohlYtPE",
	"xDo26ZFFjxxn4ptmYMnSCXJ+0onWmWDT40l7UPUWZyUPxd7lpJpTuFeYkzrtW26MWR073tLzDfS3sfI7",
	"Oxy3akNfNseYVx9yiNkilWe9hw6IqIPOKI9VZdo6xrEoMjSHQh67nqA/f89+PUImIX8xDowZ+zWZLWai",
	"PXJgzJKs/q+V6DLwKePD17U0bqfM3UhN2zuxaLiWR2OPWNhjUYApiTkOLR5gSiEMI2aaFFzjoMujW5Gl",
	"RRzPEkzO8ywvTqJ8NpPUMP4JMEeLuWKSAliFLvLi7Kv2zTafsazQD0rRd85W17fnq8zJmIReRGIcB5aN",
	"aWDaOPDCEMfAwoh7rs8tt8Fy1OSODdTELgQxpgQYDmIWYnBJYEdW4IUBWTt17Tue6zq2fWDM8zRVXToR",
	"sUjIbBxQVzRjBjgw7Qjb3OG25/hASWzUH+SSAWvCgsc8k8Q4JOBjGoGNA9snmFLKXDfyGWVMCukLVnD1",
	"SRRyGhLXwoTREFPfAxy4oY0D8G3LjuPAjpTZUFYsyYRgrw0vdV2aagTiwIxC18Ze4FNMwzDEvgkEg+uT",
	"CCLOGXWbMo8dyrqxZ0YkjLHtxxRTm1Lsm9zGEJmmRXzq+XZ0v9kijc7UGSOPNmOkWcIRWSMaNj8C2Pxd",
	"UlYrIHVd7JwXJ6kMAcgzJ3sx9Herd1cxixeimX2gWp4fTWaACpZNZWBwUYKAdZ3um1Mu6nzlCt6xNN2C",
	"bUSLyo/TRSlNPW7OklTZ2XAm/5jlWXUq/1oCK9QflawnnKYDdbk3kdit+VE1xtQY85oY80F5Bk9h5aRV",
	"KJLROPSBYRJ4DNPI8nBoxi4mjmcHzHQc3yPGtsy7R5FZ25GN32RVsdSY6dFipvWlfOTYyR7s+wpdv8yL",
	"MOEcsqF+Ow81YFsHbFU+RxJuXQ+xzZIUyirPYL+78/vVqw/b38kTSTyOVpOboBcKBEj1Lg3uLiBUXQ2h",
	"ifpY5UnT5hAiaW9J2uOsXA1n3VtZB/zuzgNbH8O6tv91/5Tuyv3aHCy7OlB9YGvUBIGfzhq1YW3tINfG",
	"y1WMl0iYFo20vpQpozyzDiWEgYlpHMaY2iTCQRTFOPZ9cDw3DlxmjqoMThzfCby1Qy3UoY7vuYHdLuZ3",
	"wOQJ3OPk7Dg/Q5xlEaA0OYevjBHFgInjy2LA92qCtDpf2x6P1vZo11A7bJ8Q/p910fjV8f88T9P90P+N",
	"fOtho34NDTQ06EGDyx1dUycHzZhT0/ex7dAQUztysG/7LrZjxjzH5o7veeMQAg0cy1xDCKZFLcejljMO",
	"Iag4dHnlK/DkjGzuBw5nAQ4DN8Y0Ch0csJBgh1BGIjOMCY9Hzcj0TeqsH+R1PNPzid05yHs9zCM68elP",
	"htgDespPfsofRrxsBa7vOfcMg4X+0wj40SJgsXwa/D4h8Duv8ejVca86sbUf+b6t39PYV2Pfp+cWG7ow",
	"v0mvSdIUzZPoDDFU5rIUDEcyGTYR+y9Xh10g4+UORW9Ty5RoImZJcTJjxRlUJ/UwxqMbsAJuR9THlssd",
	"TF2PY2ZyB4cQ+Rxcx/O5I1hOlvZ7GKcVRiAtm1qOs37XiOd6runbK6T1TpWbeSdW4E1D9X8vWF1g1SRi",
	"pM3/JwXMVEUK48iyZb5aUe1ZHy/4aRRms6nl2/cMw5Qw1kDs0QIxtYAaij0hKFa0AOnqYKzJQd4Px961",
	"b2pApgHZAwVkvdkrHbMLJ9kTjxKivC4qi4M51AQnwLbnRJhyDzDzGMfAiU245VPH8UbdZybaDYJ1L2QQ",
	"BL4XWFa7mN/macLZUlVeZCn6LjkHhQONfRhC9mFa9ggMUb/q3TOGaCSIRhGPFkU0S6hxxBPCEWVHs18d",
	"Sagcuv044vkpS1PIphpIaCDxJD07Vwkl7XbmWLYX2GYLUoKIuYyBj/2YUEwd28OBTRwMvhu5UegCJ3RU",
	"yEm063kbFYIoCahrkRsKOVm2Twi5Z+hxLIWTBh6P9640uYAadjylNIoaMIwDHYsSJOJYlDC66t6ihH0l",
	"9xaSh/bAENHOdtihRnTvlfYeUsagrM8cqYlwXkBZnqRJBqZQEZblmOjv7FSQAgp0vCiyeXImVqH7qtXI",
	"2Eg6242/F2Jo6LgAQD8macqmIKtqLGR23pHxeiFA2ttE2M0wY0kq68LIUfwNinhSQVnJKhNlxVJZu1eq",
	"K0JMuXBTtdTfZDyX1xc3Krt5U+ntPl98c5GfobdQRgtQ+62+gOGbty//Igt0lIgV8vIEVfm3kBWV8zwT",
	"CEr2JAT0vMhneaXg3iwvKwRxDBJ8INnBvMgrdQXSBP13nogFlPGgU0jn4u/2WgmGQqgEEWTTX8lyhOdQ",
	"ZLO2RIVpYZs6rucHDZKIbc9hbuBhJhQ39e0I+ySycBTEAbN9mwMNRtUaNB3bc+j6sWwrcH3qBe1eGaaY",
	"gKCCWU/WyPv2ZU3FJOuRS5BDkks0V67ucoSL/AwXsnUc91r/vVWR21vEUCyX7/105UJuQmr2q7gtStA6",
	"+QmWcBMrvV8br5wCe/Vy+yZaVe9slPWGipZ89bxt++4VtXYOaOfAtlIOuqqxrmqsqxrrqsa6qvETqWp8",
	"nw7KVXFk7aJ8pC7KNmNPOymfjpMy6hgfl7eK8ixOpgsBCIYL83GYFxAJXml4e8D+GazT97xtep9VpNyg",
	"0u55wO5LWfLr6OcPDYwQf9Wl/o5+/nBFP0VLow4J+1t26A1dF0rXhbqarGi5qVsI80qS4zLVPLeJiN9V",
	"KU/t+dGeH13EUxfx1EU8dRFPDdY0WLtqEc+R+Gzjeo1yN0B7uXr/G/W6jmVpRPMgEM2DOjfU8PWR4Vk8",
	"9iE0sQ2BgymQGDOPudi1XJvygIIVyBNAIw7qfAfVn0p5le/XX5fzPM/zs+XXX3+1JYf6chEvdSA3dh0v",
	"CihmxANMqccxo5zi0A8Zi0JixpY1KrhFncDfqG5oea7tBrZHV5nJ8zw/q3LBoxaRTY8IUlEnCKi1M0hV",
	"tu3iut3hFKRtkatbDFDJ0Qe7A1SSe7CYy+H6TO4Vh64Lf41DHy0OXV9K7et/QpCwA+oQNCjt0tBQXgx2",
	"Pc9dbWRrx52GuRrmaseddtxpwKQdd9pxp1Fa47gTIupK4EweCbseOHtfgo6qanCmwZkGZxqcaXCmwZkG",
	"ZxqcdcFZ40aDUaFVKfAr3CSP7MnpF6+hOC8Qq9V1LpgAsUiMDVX5GWQbSYQCsHUOzqoOaxQ3pAaHyNW+",
	"1wxYfq/9tw8oebWUYrleng6jZOvc0XCkZLkNhtyM7B9+3vhtZAWKDYfy7moUG3GiPVZG530kP9iK1Ycm",
	"oAtW6MCzDjzfeuD5SpkLmxHjHTFIHXp8cnUXNuT1NfTU9bOQ1hnumglJm1pxW3LSQ1RbOlFJW2lPP1Hp",
	"RgXQ+GSmUZLmieQ1CQhZVvlslCv+DqG+dtFrF7120WsXvXbRaxe9Bn+/k8SnG8V7nQJWG7lRw6q+Uwpw",
	"VR8wXKItsGc3aHzXNjYu1erlhj066r4BDbQ00NK1BXVtQV1bUNcW1LUFdW3Bh1tbUCcdPm4bUGca/h6q",
	"Ct6oCSaTEOOkyqAsT3hSViyL4OZc8MfAZi9V6y/qxrVDXtuJ2k7UDnntkNcOee2Q1w557ZC/dEIjqgEb",
	"agDb3cBDiaFuAxoeJzMNCzUs1LBQw0INCzUs1LBQw0INC68BCwWquV1IeKMoUEM/Df009NPQT0M/Df00",
	"9NPQT0O/65Q4u1GwJ0+v3F54+H0JhQ4PazCowaAGgxoMajCowaAGgxoMXgMMCrx2h+HhHjy82fBwBxrq",
	"8LCGhRoWalioYaGGhRoWalioYeH1YOGthodHX5wwGgVq6Kehn4Z+Gvpp6Kehn4Z+Gvpp6Hf9SxZGQD55",
	"zq/NPz783Pt/ZF17IUnb0ie7a9qLVztFUnYjvl6z2+DR+oDvvY79Yy/YM76Sfct0qMqncKpk4Y2U8IHQ",
	"srjpcRwyCpjG3MKMBSGOYmZxOzY906IjSvi4E2qajk/XSvgEvm/ZFnHNloleLwrUxQW3XshHjsw1vZ2F",
	"fPJFgbsYZGw5H6UFm1I+nRo/V+FNVeD6QZfaaVZuWuSLuUDvcZFAxsvehRtxXjTFdiS7VqdQTJqqO5x7",
	"xLIIxxAENqYkJDi0Aw9zzyUuiwPGTafPQ9S23SAILHMbrqzXsIchdT2eG6nHswbMFY+q6jtxQHwTgOOI",
	"2S6m3AxwYNsxtgBijwMxTbBvs7yV2teqQNeOCcjdLC+I2L7Hr1Y7vqdgu7iz+0DXjHlyV0T0YNAVYN4h",
	"zzM5q3KrK6/LQS/aty8J4kZU0rwWotvqfMqzdInaSaLqlFXolJ0DCgEyJNYrBWEAbjinZvlMXkqRoVfv",
	"XvsuMYUqmbGq52G0iGVi08TEOjbpkUWPHGfim2ZgSewx5JxqezwZ5+C63qzWXXy3PqkbcBNqt6R2S+5W",
	"xl0hcWS4lkdjj1jYY1GAKYk5Di0eYEohDCNmmhRc46DLo1tLVFrE8eQVVequiiifzSQ1jH8CzNFirpik",
	"AFahi7w4+6p9s17iYygr9IOqGDjovz8ySExCLyIxjgPLxjQwbRx4YYhjYGHEPdfnltvAU2pyxwZqYheC",
	"GFMCDAcxCzG4JLAjK/DCgKzBU9/xXNex7QNjnqep6tKJiEVCZuOAuqIZAY5MO8I2d7jtOT5QEhv1B7lk",
	"wJqw4DHPJDEOCfiYRmDjwPYJppQy1418RhmTQvqCFVx9EoWchsS1MGE0xNT3AAduaOMAfNuy4ziwI2Ww",
	"lBVLMiHYa/OvYsUUahJBHJhR6NrYC3yKaRiG2DeBYHB9EkHEOaOCRFJfdCjrxp4ZkTDGth9TTG1KsW9y",
	"G0Nkmhbxqefb0f26cxvtqd24j9aN2yyhrsP4hDypvINqbxJY9687Goewn/JdR2MC5NJw2B0Zvx1DQcNP",
	"DT91VFxHxTWc0lFxHRV/WvcaXRvMzZIUyirPYByI+371+mPxk/JEUpaj1VQn6IVCCFL3S0O9CxpVV0NQ",
	"I8midMHhpGlzCK6EeZ4Cy/Y6OVfDWfdy1iGZu/PcFsBuxG+7f0p35batZ3QNFPvA1qgJ0z2dNWoDj9qx",
	"ri2bq1g2kbA7Gml9KTtHeXQdSggDE9M4jDG1SYSDKIpx7PvgeG4cuMwcdSSHOL4TeGtHcqhDHd9zA7td",
	"zO+AFRli6Dg5O87PEGdZBChNzuErY0QUnji+jMLfq33San9tmDxaw6RdQ+3ofULGwayLy2/MOJjnaTrO",
	"Lngj33wsJoHGDRo39HDD5Y7MqXsNzZhT0/ex7dAQUztysG/7LrZjxjzH5o7veePgAw0cy1yDD6ZFLcej",
	"ljMOPqjgdnnlC1bljGzuBw5nAQ4DN8Y0Ch0csJBgh1BGIjOMCY9Hzcj0TeqsXzPqeKbnE7tzzej1AJHo",
	"xKc/GWIP6Ck/+Sl/GPGyFbi+59wzRhaaUMPjRwuPxfJpZPyEkPG8RqY3BorVqbBxsPht/a4GxhoYP2WH",
	"2ibhVjeDJ2mK5kl0hhgq82yKWMaRTGBKxObM1VEayHi5AwXY1DIl1IhZUpzMWHEG1Uk9jPHQB6yA2xH1",
	"seVyB1PX45iZ3MEhRD4H1/F87giWm7EpPJBDECNgmE0tx1mDYa7neq7p2ysY9k5QnKF3YgXeNFT/94Ip",
	"uSm4laz+PylgxpJMbKUjy5a5eUW1Z3284KdRgM6mlm/fM0ZTYlmjtEeL0tQCapz2hHBa0UKlG0NqTSr2",
	"OKz2rn1bozWN1h48WuvNXimgXSDKnniUEOWvUUklzKEmOAG2PSfClHuAmcc4Bk5swi2fOs4Y/6VqNwjW",
	"/ZdBEPheYFntYn6bpwlnS/RuDlHCUvRdcg4KJBr7AIbsw7TsEQCjftW7Z4DRyBINMR4txGiWUIOMJwQy",
	"yo6OvzmYsapH0r43DnG0Hz5vv7v/EkIabmi4sS2P5BFXgeov3/fLtjzSBcAZZBw1+2VyUzWfmBt5Po9s",
	"bHteiKkdm5iFsYtDgNgnYcBdzx6BsJyJT5wgWI+02TYhPnE6kbbOnG672pMYk0tUVZit1Z5my7YQzMg6",
	"T0KENppc1Xq6tbo2agY22V3X5m+LUnDkDA6HJyMeP/BaUm+KPIayTPKMpUhVSuo4Z09zlCZnUDaVpL5q",
	"zIMwCi1KnABTl/qY2m6AQyewMASMRiYNqWPCms/RCTyPuo7bMkBDPF0m6mbKRP2tQ9D2zyPjfQmFLM3w",
	"Rf1cFw3wOI98cLHDTYIpkBAHQeRiMOMgCqyQUOLdr5G0quqkjaRHaiS1x/+0kfSEjKRWGaOoY5fcmL2k",
	"KqKMM5Gen7I0hWyqvbLaTHriMfSrYIXdYXPL9gLbbD2+QcRcxsDHfkwopo7t4cAmDgbfjdwodIGTcTVo",
	"Rbuet2GPUBJQ1yI3dPLPsn1CyD37cY+lqNIA5dECFLWAGp48pTz4Gj7cICJZv/znGgWNnsbNP7qekQZY",
	"up6Rrmek6xlpIKXrGel6Rnd7y88IPNfAuHH3+YhX91/jM8rDtBPqPIDLevSlJvpSkwd5qcmVL//YuPRD",
	"G/FP8rKPvYL+cAYCzuw2zr+v37lrWa6tVW2tblqrKhIfBrYbWYA5tyxMY0px6FsU22DbzLa46VvxqJPW",
	"TmDbtrue6mUSSol/YBS5zHRoeiUODSISUEyi2MPU4xT7NI5wwFzXjSLfJxYzDowzWDYcXy7mUJwwPkuy",
	"1fLKjfJM/JaUVcGqvBiTi+9MCAmcQKal6TMy+ozMAzojc7/xpFZDaVfI440ptYuo40pPyR8hNN2shY+X",
	"g6b9GNNOhNoNIWmcqnGqPt2v73jWdzzrO561O1Tf8fz473i+b+tKJxU8CftKJxY8QQurB1L221iLEory",
	"8HOd0jQmzite3R3nHXM8T7yz1eZqEqx0nFc7U7Uz9UpBXbkHuwJf/KDl+5ML6srAzz6pfrjfaSbYY7TD",
	"7MaFt3aYaYfZgMNMOxa0Y+FBOhbu2wDXhvejNry1wf2EDO6h9P1xqExqXoXBTuBcjHEnPHu1ev0b9baG",
	"aRqm6bimrlqmq5bpqmXaiaidiE+mapnEN9rIebRGjlw/beU8ISuHpekqqiivF+oHGlG4RCt743J2kDzn",
	"udP0OZZvPBhzR97xL0eNLk6hgCYqeir0NyrnECVxEqEiT6FfV6SX4jFspNQfaSNMG2HaV6595dpXrn3l",
	"2leuUeTTSf/Z4ifPBeUOW/KNOIj2Mco5fETVaZEvpqeS6TsTLdHHAnhSQFSdLIrko9gXISj9d5FU6v2P",
	"h1V+BtnHzi/NCJRbXnUxLVgmNWQfmf7oPJsn/4LwtfjmWTvyPTD1eZrIcm58C0CK5PMbwKpq8uj921fb",
	"oGaHPtftTO03dKxK4w33pt5pyudt764ppyfTTMZUyXsX5Vu7LetnA6hR+RkjeTOq6rH+YaDPD2rAUFZ/",
	"z/nyUvtrr7SK89z4ck08Oa6T3o7scmyzIeUu7O1IuUFED/O83LUdM8QiIQGkbVhAXEB5iuTHanMxNC/y",
	"84QDR4rDUcIPUAlRAdWB/EjuMiQmMkHH4sMSwa/zpJBVGz96FiEfxft5xss9e1F+/UD2Yd3NOznR3V2V",
	"zTvX6O4fkog7tqGk8v49uNok9eCiAjhkVcLkRd/tFm0fZp2nmzJU9iV54kQx1Jht/azbDHqec/j/0Mev",
	"mzF/FKBmIY2H7UIbVdspUY/rEsR9ZHLmajKli4fljq5X7MhgocucwLKpSynlwALP9Ihve2ASyn3m7Htu",
	"HBhRAeuhFxNb3rEZHNnWEZGRLLXpyxNBZU/aon3WOTKyT58+LauZnVdQzabFp1lCyPITu0gvgP42XVa/",
	"fUp+XVqz32bW0s4+sYtoalqmZZtBENiBzWy5TLmkVrs0su0mxBQCK1T5gEtIWA06L8NbUBR5IV0q5yxN",
	"+ImSJGL5xYOTQSEq5imkjGoVxSxJgSO+UOV9s7Msv8hq7XKAsrxRNGufJVmULjjwA5QXaJHVAUbg6+/N",
	"oDrN+eSSXDACCjfqaUPpircgWhTytvCfP/flqHH08wchHuqv1mXTayEtkTUhCDI+zxN1PqQWTqqHA+NX",
	"zJNynrLlD3V2q/jI2FJ2uL3nYaDBfvXAzYb7qbIDWpEtShhqOBIPBhqUHww2tH2QO8a3Y2jSjTzQ2kJl",
	"tay3pA7ab7TysuPbUvWbB5rsOMDUAaCB9jca2rZcW1Zpy+JIv8yvuGLTfxT5Yq44qnGVvXmF3kIMBWTR",
	"Jjg82Fj8Zs3Wo98HgxOs85A+fPl/AQAA//+9oRiHy8YCAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
