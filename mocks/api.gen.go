// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/streemtech/tiltify/v5/api"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// Api is an autogenerated mock type for the ClientWithResponsesInterface type
type Api struct {
	mock.Mock
}

type Api_Expecter struct {
	mock *mock.Mock
}

func (_m *Api) EXPECT() *Api_Expecter {
	return &Api_Expecter{mock: &_m.Mock}
}

// V5ApiWebOauthAuthorizeWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) V5ApiWebOauthAuthorizeWithBodyWithResponse(ctx context.Context, params *api.V5ApiWebOauthAuthorizeParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebOauthAuthorizeResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebOauthAuthorizeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *api.V5ApiWebOauthAuthorizeParams, string, io.Reader, ...api.RequestEditorFn) *api.V5ApiWebOauthAuthorizeResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebOauthAuthorizeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.V5ApiWebOauthAuthorizeParams, string, io.Reader, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebOauthAuthorizeWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebOauthAuthorizeWithBodyWithResponse'
type Api_V5ApiWebOauthAuthorizeWithBodyWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebOauthAuthorizeWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *api.V5ApiWebOauthAuthorizeParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebOauthAuthorizeWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_V5ApiWebOauthAuthorizeWithBodyWithResponse_Call {
	return &Api_V5ApiWebOauthAuthorizeWithBodyWithResponse_Call{Call: _e.mock.On("V5ApiWebOauthAuthorizeWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebOauthAuthorizeWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *api.V5ApiWebOauthAuthorizeParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebOauthAuthorizeWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*api.V5ApiWebOauthAuthorizeParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebOauthAuthorizeWithBodyWithResponse_Call) Return(_a0 *api.V5ApiWebOauthAuthorizeResponse, _a1 error) *Api_V5ApiWebOauthAuthorizeWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebOauthAuthorizeWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) V5ApiWebOauthAuthorizeWithResponse(ctx context.Context, params *api.V5ApiWebOauthAuthorizeParams, body map[string]interface{}, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebOauthAuthorizeResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebOauthAuthorizeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *api.V5ApiWebOauthAuthorizeParams, map[string]interface{}, ...api.RequestEditorFn) *api.V5ApiWebOauthAuthorizeResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebOauthAuthorizeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.V5ApiWebOauthAuthorizeParams, map[string]interface{}, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebOauthAuthorizeWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebOauthAuthorizeWithResponse'
type Api_V5ApiWebOauthAuthorizeWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebOauthAuthorizeWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *api.V5ApiWebOauthAuthorizeParams
//   - body map[string]interface{}
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebOauthAuthorizeWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_V5ApiWebOauthAuthorizeWithResponse_Call {
	return &Api_V5ApiWebOauthAuthorizeWithResponse_Call{Call: _e.mock.On("V5ApiWebOauthAuthorizeWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebOauthAuthorizeWithResponse_Call) Run(run func(ctx context.Context, params *api.V5ApiWebOauthAuthorizeParams, body map[string]interface{}, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebOauthAuthorizeWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*api.V5ApiWebOauthAuthorizeParams), args[2].(map[string]interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebOauthAuthorizeWithResponse_Call) Return(_a0 *api.V5ApiWebOauthAuthorizeResponse, _a1 error) *Api_V5ApiWebOauthAuthorizeWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebOauthTokenWithBodyWithResponse provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *Api) V5ApiWebOauthTokenWithBodyWithResponse(ctx context.Context, params *api.V5ApiWebOauthTokenParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebOauthTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebOauthTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *api.V5ApiWebOauthTokenParams, string, io.Reader, ...api.RequestEditorFn) *api.V5ApiWebOauthTokenResponse); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebOauthTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.V5ApiWebOauthTokenParams, string, io.Reader, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebOauthTokenWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebOauthTokenWithBodyWithResponse'
type Api_V5ApiWebOauthTokenWithBodyWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebOauthTokenWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *api.V5ApiWebOauthTokenParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebOauthTokenWithBodyWithResponse(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *Api_V5ApiWebOauthTokenWithBodyWithResponse_Call {
	return &Api_V5ApiWebOauthTokenWithBodyWithResponse_Call{Call: _e.mock.On("V5ApiWebOauthTokenWithBodyWithResponse",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebOauthTokenWithBodyWithResponse_Call) Run(run func(ctx context.Context, params *api.V5ApiWebOauthTokenParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebOauthTokenWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*api.V5ApiWebOauthTokenParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebOauthTokenWithBodyWithResponse_Call) Return(_a0 *api.V5ApiWebOauthTokenResponse, _a1 error) *Api_V5ApiWebOauthTokenWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebOauthTokenWithResponse provides a mock function with given fields: ctx, params, body, reqEditors
func (_m *Api) V5ApiWebOauthTokenWithResponse(ctx context.Context, params *api.V5ApiWebOauthTokenParams, body map[string]interface{}, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebOauthTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebOauthTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *api.V5ApiWebOauthTokenParams, map[string]interface{}, ...api.RequestEditorFn) *api.V5ApiWebOauthTokenResponse); ok {
		r0 = rf(ctx, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebOauthTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.V5ApiWebOauthTokenParams, map[string]interface{}, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebOauthTokenWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebOauthTokenWithResponse'
type Api_V5ApiWebOauthTokenWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebOauthTokenWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *api.V5ApiWebOauthTokenParams
//   - body map[string]interface{}
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebOauthTokenWithResponse(ctx interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *Api_V5ApiWebOauthTokenWithResponse_Call {
	return &Api_V5ApiWebOauthTokenWithResponse_Call{Call: _e.mock.On("V5ApiWebOauthTokenWithResponse",
		append([]interface{}{ctx, params, body}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebOauthTokenWithResponse_Call) Run(run func(ctx context.Context, params *api.V5ApiWebOauthTokenParams, body map[string]interface{}, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebOauthTokenWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*api.V5ApiWebOauthTokenParams), args[2].(map[string]interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebOauthTokenWithResponse_Call) Return(_a0 *api.V5ApiWebOauthTokenResponse, _a1 error) *Api_V5ApiWebOauthTokenWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicCampaignChallengeControllerIndexWithResponse provides a mock function with given fields: ctx, campaignId, params, reqEditors
func (_m *Api) V5ApiWebPublicCampaignChallengeControllerIndexWithResponse(ctx context.Context, campaignId string, params *api.V5ApiWebPublicCampaignChallengeControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicCampaignChallengeControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, campaignId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicCampaignChallengeControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicCampaignChallengeControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicCampaignChallengeControllerIndexResponse); ok {
		r0 = rf(ctx, campaignId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicCampaignChallengeControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicCampaignChallengeControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, campaignId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicCampaignChallengeControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicCampaignChallengeControllerIndexWithResponse'
type Api_V5ApiWebPublicCampaignChallengeControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicCampaignChallengeControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - campaignId string
//   - params *api.V5ApiWebPublicCampaignChallengeControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicCampaignChallengeControllerIndexWithResponse(ctx interface{}, campaignId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicCampaignChallengeControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicCampaignChallengeControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicCampaignChallengeControllerIndexWithResponse",
		append([]interface{}{ctx, campaignId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicCampaignChallengeControllerIndexWithResponse_Call) Run(run func(ctx context.Context, campaignId string, params *api.V5ApiWebPublicCampaignChallengeControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicCampaignChallengeControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicCampaignChallengeControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicCampaignChallengeControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicCampaignChallengeControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicCampaignChallengeControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicCampaignControllerShowWithResponse provides a mock function with given fields: ctx, campaignId, reqEditors
func (_m *Api) V5ApiWebPublicCampaignControllerShowWithResponse(ctx context.Context, campaignId string, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicCampaignControllerShowResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, campaignId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicCampaignControllerShowResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...api.RequestEditorFn) *api.V5ApiWebPublicCampaignControllerShowResponse); ok {
		r0 = rf(ctx, campaignId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicCampaignControllerShowResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, campaignId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicCampaignControllerShowWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicCampaignControllerShowWithResponse'
type Api_V5ApiWebPublicCampaignControllerShowWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicCampaignControllerShowWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - campaignId string
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicCampaignControllerShowWithResponse(ctx interface{}, campaignId interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicCampaignControllerShowWithResponse_Call {
	return &Api_V5ApiWebPublicCampaignControllerShowWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicCampaignControllerShowWithResponse",
		append([]interface{}{ctx, campaignId}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicCampaignControllerShowWithResponse_Call) Run(run func(ctx context.Context, campaignId string, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicCampaignControllerShowWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicCampaignControllerShowWithResponse_Call) Return(_a0 *api.V5ApiWebPublicCampaignControllerShowResponse, _a1 error) *Api_V5ApiWebPublicCampaignControllerShowWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicCampaignDonationControllerIndexWithResponse provides a mock function with given fields: ctx, campaignId, params, reqEditors
func (_m *Api) V5ApiWebPublicCampaignDonationControllerIndexWithResponse(ctx context.Context, campaignId string, params *api.V5ApiWebPublicCampaignDonationControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicCampaignDonationControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, campaignId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicCampaignDonationControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicCampaignDonationControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicCampaignDonationControllerIndexResponse); ok {
		r0 = rf(ctx, campaignId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicCampaignDonationControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicCampaignDonationControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, campaignId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicCampaignDonationControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicCampaignDonationControllerIndexWithResponse'
type Api_V5ApiWebPublicCampaignDonationControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicCampaignDonationControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - campaignId string
//   - params *api.V5ApiWebPublicCampaignDonationControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicCampaignDonationControllerIndexWithResponse(ctx interface{}, campaignId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicCampaignDonationControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicCampaignDonationControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicCampaignDonationControllerIndexWithResponse",
		append([]interface{}{ctx, campaignId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicCampaignDonationControllerIndexWithResponse_Call) Run(run func(ctx context.Context, campaignId string, params *api.V5ApiWebPublicCampaignDonationControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicCampaignDonationControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicCampaignDonationControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicCampaignDonationControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicCampaignDonationControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicCampaignDonationControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse provides a mock function with given fields: ctx, campaignId, params, reqEditors
func (_m *Api) V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse(ctx context.Context, campaignId string, params *api.V5ApiWebPublicCampaignLeaderboardControllerDonorParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicCampaignLeaderboardControllerDonorResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, campaignId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicCampaignLeaderboardControllerDonorResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicCampaignLeaderboardControllerDonorParams, ...api.RequestEditorFn) *api.V5ApiWebPublicCampaignLeaderboardControllerDonorResponse); ok {
		r0 = rf(ctx, campaignId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicCampaignLeaderboardControllerDonorResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicCampaignLeaderboardControllerDonorParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, campaignId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse'
type Api_V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - campaignId string
//   - params *api.V5ApiWebPublicCampaignLeaderboardControllerDonorParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse(ctx interface{}, campaignId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse_Call {
	return &Api_V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse",
		append([]interface{}{ctx, campaignId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse_Call) Run(run func(ctx context.Context, campaignId string, params *api.V5ApiWebPublicCampaignLeaderboardControllerDonorParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicCampaignLeaderboardControllerDonorParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse_Call) Return(_a0 *api.V5ApiWebPublicCampaignLeaderboardControllerDonorResponse, _a1 error) *Api_V5ApiWebPublicCampaignLeaderboardControllerDonorWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse provides a mock function with given fields: ctx, campaignId, params, reqEditors
func (_m *Api) V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse(ctx context.Context, campaignId string, params *api.V5ApiWebPublicCampaignMilestoneControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicCampaignMilestoneControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, campaignId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicCampaignMilestoneControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicCampaignMilestoneControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicCampaignMilestoneControllerIndexResponse); ok {
		r0 = rf(ctx, campaignId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicCampaignMilestoneControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicCampaignMilestoneControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, campaignId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse'
type Api_V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - campaignId string
//   - params *api.V5ApiWebPublicCampaignMilestoneControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse(ctx interface{}, campaignId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse",
		append([]interface{}{ctx, campaignId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse_Call) Run(run func(ctx context.Context, campaignId string, params *api.V5ApiWebPublicCampaignMilestoneControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicCampaignMilestoneControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicCampaignMilestoneControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicCampaignMilestoneControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicCampaignPollControllerIndexWithResponse provides a mock function with given fields: ctx, campaignId, params, reqEditors
func (_m *Api) V5ApiWebPublicCampaignPollControllerIndexWithResponse(ctx context.Context, campaignId string, params *api.V5ApiWebPublicCampaignPollControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicCampaignPollControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, campaignId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicCampaignPollControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicCampaignPollControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicCampaignPollControllerIndexResponse); ok {
		r0 = rf(ctx, campaignId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicCampaignPollControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicCampaignPollControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, campaignId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicCampaignPollControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicCampaignPollControllerIndexWithResponse'
type Api_V5ApiWebPublicCampaignPollControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicCampaignPollControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - campaignId string
//   - params *api.V5ApiWebPublicCampaignPollControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicCampaignPollControllerIndexWithResponse(ctx interface{}, campaignId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicCampaignPollControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicCampaignPollControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicCampaignPollControllerIndexWithResponse",
		append([]interface{}{ctx, campaignId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicCampaignPollControllerIndexWithResponse_Call) Run(run func(ctx context.Context, campaignId string, params *api.V5ApiWebPublicCampaignPollControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicCampaignPollControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicCampaignPollControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicCampaignPollControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicCampaignPollControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicCampaignPollControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicCampaignRewardControllerIndexWithResponse provides a mock function with given fields: ctx, campaignId, params, reqEditors
func (_m *Api) V5ApiWebPublicCampaignRewardControllerIndexWithResponse(ctx context.Context, campaignId string, params *api.V5ApiWebPublicCampaignRewardControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicCampaignRewardControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, campaignId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicCampaignRewardControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicCampaignRewardControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicCampaignRewardControllerIndexResponse); ok {
		r0 = rf(ctx, campaignId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicCampaignRewardControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicCampaignRewardControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, campaignId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicCampaignRewardControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicCampaignRewardControllerIndexWithResponse'
type Api_V5ApiWebPublicCampaignRewardControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicCampaignRewardControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - campaignId string
//   - params *api.V5ApiWebPublicCampaignRewardControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicCampaignRewardControllerIndexWithResponse(ctx interface{}, campaignId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicCampaignRewardControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicCampaignRewardControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicCampaignRewardControllerIndexWithResponse",
		append([]interface{}{ctx, campaignId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicCampaignRewardControllerIndexWithResponse_Call) Run(run func(ctx context.Context, campaignId string, params *api.V5ApiWebPublicCampaignRewardControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicCampaignRewardControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicCampaignRewardControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicCampaignRewardControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicCampaignRewardControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicCampaignRewardControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicCampaignScheduleControllerIndexWithResponse provides a mock function with given fields: ctx, campaignId, params, reqEditors
func (_m *Api) V5ApiWebPublicCampaignScheduleControllerIndexWithResponse(ctx context.Context, campaignId string, params *api.V5ApiWebPublicCampaignScheduleControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicCampaignScheduleControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, campaignId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicCampaignScheduleControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicCampaignScheduleControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicCampaignScheduleControllerIndexResponse); ok {
		r0 = rf(ctx, campaignId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicCampaignScheduleControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicCampaignScheduleControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, campaignId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicCampaignScheduleControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicCampaignScheduleControllerIndexWithResponse'
type Api_V5ApiWebPublicCampaignScheduleControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicCampaignScheduleControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - campaignId string
//   - params *api.V5ApiWebPublicCampaignScheduleControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicCampaignScheduleControllerIndexWithResponse(ctx interface{}, campaignId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicCampaignScheduleControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicCampaignScheduleControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicCampaignScheduleControllerIndexWithResponse",
		append([]interface{}{ctx, campaignId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicCampaignScheduleControllerIndexWithResponse_Call) Run(run func(ctx context.Context, campaignId string, params *api.V5ApiWebPublicCampaignScheduleControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicCampaignScheduleControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicCampaignScheduleControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicCampaignScheduleControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicCampaignScheduleControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicCampaignScheduleControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicCauseCampaignControllerIndexWithResponse provides a mock function with given fields: ctx, causeId, params, reqEditors
func (_m *Api) V5ApiWebPublicCauseCampaignControllerIndexWithResponse(ctx context.Context, causeId string, params *api.V5ApiWebPublicCauseCampaignControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicCauseCampaignControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, causeId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicCauseCampaignControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicCauseCampaignControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicCauseCampaignControllerIndexResponse); ok {
		r0 = rf(ctx, causeId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicCauseCampaignControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicCauseCampaignControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, causeId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicCauseCampaignControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicCauseCampaignControllerIndexWithResponse'
type Api_V5ApiWebPublicCauseCampaignControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicCauseCampaignControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - causeId string
//   - params *api.V5ApiWebPublicCauseCampaignControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicCauseCampaignControllerIndexWithResponse(ctx interface{}, causeId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicCauseCampaignControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicCauseCampaignControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicCauseCampaignControllerIndexWithResponse",
		append([]interface{}{ctx, causeId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicCauseCampaignControllerIndexWithResponse_Call) Run(run func(ctx context.Context, causeId string, params *api.V5ApiWebPublicCauseCampaignControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicCauseCampaignControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicCauseCampaignControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicCauseCampaignControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicCauseCampaignControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicCauseCampaignControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicCauseControllerShowWithResponse provides a mock function with given fields: ctx, causeId, reqEditors
func (_m *Api) V5ApiWebPublicCauseControllerShowWithResponse(ctx context.Context, causeId string, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicCauseControllerShowResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, causeId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicCauseControllerShowResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...api.RequestEditorFn) *api.V5ApiWebPublicCauseControllerShowResponse); ok {
		r0 = rf(ctx, causeId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicCauseControllerShowResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, causeId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicCauseControllerShowWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicCauseControllerShowWithResponse'
type Api_V5ApiWebPublicCauseControllerShowWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicCauseControllerShowWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - causeId string
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicCauseControllerShowWithResponse(ctx interface{}, causeId interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicCauseControllerShowWithResponse_Call {
	return &Api_V5ApiWebPublicCauseControllerShowWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicCauseControllerShowWithResponse",
		append([]interface{}{ctx, causeId}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicCauseControllerShowWithResponse_Call) Run(run func(ctx context.Context, causeId string, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicCauseControllerShowWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicCauseControllerShowWithResponse_Call) Return(_a0 *api.V5ApiWebPublicCauseControllerShowResponse, _a1 error) *Api_V5ApiWebPublicCauseControllerShowWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse provides a mock function with given fields: ctx, causeId, params, reqEditors
func (_m *Api) V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse(ctx context.Context, causeId string, params *api.V5ApiWebPublicCauseFundraisingEventControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicCauseFundraisingEventControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, causeId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicCauseFundraisingEventControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicCauseFundraisingEventControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicCauseFundraisingEventControllerIndexResponse); ok {
		r0 = rf(ctx, causeId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicCauseFundraisingEventControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicCauseFundraisingEventControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, causeId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse'
type Api_V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - causeId string
//   - params *api.V5ApiWebPublicCauseFundraisingEventControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse(ctx interface{}, causeId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse",
		append([]interface{}{ctx, causeId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse_Call) Run(run func(ctx context.Context, causeId string, params *api.V5ApiWebPublicCauseFundraisingEventControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicCauseFundraisingEventControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicCauseFundraisingEventControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicCauseFundraisingEventControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse provides a mock function with given fields: ctx, causeId, reqEditors
func (_m *Api) V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse(ctx context.Context, causeId string, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicCauseLeaderboardControllerConfiguredResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, causeId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicCauseLeaderboardControllerConfiguredResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...api.RequestEditorFn) *api.V5ApiWebPublicCauseLeaderboardControllerConfiguredResponse); ok {
		r0 = rf(ctx, causeId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicCauseLeaderboardControllerConfiguredResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, causeId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse'
type Api_V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - causeId string
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse(ctx interface{}, causeId interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse_Call {
	return &Api_V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse",
		append([]interface{}{ctx, causeId}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse_Call) Run(run func(ctx context.Context, causeId string, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse_Call) Return(_a0 *api.V5ApiWebPublicCauseLeaderboardControllerConfiguredResponse, _a1 error) *Api_V5ApiWebPublicCauseLeaderboardControllerConfiguredWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse provides a mock function with given fields: ctx, causeId, params, reqEditors
func (_m *Api) V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse(ctx context.Context, causeId string, params *api.V5ApiWebPublicCauseLeaderboardControllerDonorParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicCauseLeaderboardControllerDonorResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, causeId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicCauseLeaderboardControllerDonorResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicCauseLeaderboardControllerDonorParams, ...api.RequestEditorFn) *api.V5ApiWebPublicCauseLeaderboardControllerDonorResponse); ok {
		r0 = rf(ctx, causeId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicCauseLeaderboardControllerDonorResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicCauseLeaderboardControllerDonorParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, causeId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse'
type Api_V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - causeId string
//   - params *api.V5ApiWebPublicCauseLeaderboardControllerDonorParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse(ctx interface{}, causeId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse_Call {
	return &Api_V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse",
		append([]interface{}{ctx, causeId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse_Call) Run(run func(ctx context.Context, causeId string, params *api.V5ApiWebPublicCauseLeaderboardControllerDonorParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicCauseLeaderboardControllerDonorParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse_Call) Return(_a0 *api.V5ApiWebPublicCauseLeaderboardControllerDonorResponse, _a1 error) *Api_V5ApiWebPublicCauseLeaderboardControllerDonorWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse provides a mock function with given fields: ctx, causeId, params, reqEditors
func (_m *Api) V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse(ctx context.Context, causeId string, params *api.V5ApiWebPublicCauseLeaderboardControllerTeamParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicCauseLeaderboardControllerTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, causeId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicCauseLeaderboardControllerTeamResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicCauseLeaderboardControllerTeamParams, ...api.RequestEditorFn) *api.V5ApiWebPublicCauseLeaderboardControllerTeamResponse); ok {
		r0 = rf(ctx, causeId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicCauseLeaderboardControllerTeamResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicCauseLeaderboardControllerTeamParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, causeId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse'
type Api_V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - causeId string
//   - params *api.V5ApiWebPublicCauseLeaderboardControllerTeamParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse(ctx interface{}, causeId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse_Call {
	return &Api_V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse",
		append([]interface{}{ctx, causeId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse_Call) Run(run func(ctx context.Context, causeId string, params *api.V5ApiWebPublicCauseLeaderboardControllerTeamParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicCauseLeaderboardControllerTeamParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse_Call) Return(_a0 *api.V5ApiWebPublicCauseLeaderboardControllerTeamResponse, _a1 error) *Api_V5ApiWebPublicCauseLeaderboardControllerTeamWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicCauseLeaderboardControllerUserWithResponse provides a mock function with given fields: ctx, causeId, params, reqEditors
func (_m *Api) V5ApiWebPublicCauseLeaderboardControllerUserWithResponse(ctx context.Context, causeId string, params *api.V5ApiWebPublicCauseLeaderboardControllerUserParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicCauseLeaderboardControllerUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, causeId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicCauseLeaderboardControllerUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicCauseLeaderboardControllerUserParams, ...api.RequestEditorFn) *api.V5ApiWebPublicCauseLeaderboardControllerUserResponse); ok {
		r0 = rf(ctx, causeId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicCauseLeaderboardControllerUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicCauseLeaderboardControllerUserParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, causeId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicCauseLeaderboardControllerUserWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicCauseLeaderboardControllerUserWithResponse'
type Api_V5ApiWebPublicCauseLeaderboardControllerUserWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicCauseLeaderboardControllerUserWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - causeId string
//   - params *api.V5ApiWebPublicCauseLeaderboardControllerUserParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicCauseLeaderboardControllerUserWithResponse(ctx interface{}, causeId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicCauseLeaderboardControllerUserWithResponse_Call {
	return &Api_V5ApiWebPublicCauseLeaderboardControllerUserWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicCauseLeaderboardControllerUserWithResponse",
		append([]interface{}{ctx, causeId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicCauseLeaderboardControllerUserWithResponse_Call) Run(run func(ctx context.Context, causeId string, params *api.V5ApiWebPublicCauseLeaderboardControllerUserParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicCauseLeaderboardControllerUserWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicCauseLeaderboardControllerUserParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicCauseLeaderboardControllerUserWithResponse_Call) Return(_a0 *api.V5ApiWebPublicCauseLeaderboardControllerUserResponse, _a1 error) *Api_V5ApiWebPublicCauseLeaderboardControllerUserWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicFundraisingEventControllerShowWithResponse provides a mock function with given fields: ctx, fundraisingEventId, reqEditors
func (_m *Api) V5ApiWebPublicFundraisingEventControllerShowWithResponse(ctx context.Context, fundraisingEventId string, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicFundraisingEventControllerShowResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fundraisingEventId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicFundraisingEventControllerShowResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...api.RequestEditorFn) *api.V5ApiWebPublicFundraisingEventControllerShowResponse); ok {
		r0 = rf(ctx, fundraisingEventId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicFundraisingEventControllerShowResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, fundraisingEventId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicFundraisingEventControllerShowWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicFundraisingEventControllerShowWithResponse'
type Api_V5ApiWebPublicFundraisingEventControllerShowWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicFundraisingEventControllerShowWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - fundraisingEventId string
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicFundraisingEventControllerShowWithResponse(ctx interface{}, fundraisingEventId interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicFundraisingEventControllerShowWithResponse_Call {
	return &Api_V5ApiWebPublicFundraisingEventControllerShowWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicFundraisingEventControllerShowWithResponse",
		append([]interface{}{ctx, fundraisingEventId}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicFundraisingEventControllerShowWithResponse_Call) Run(run func(ctx context.Context, fundraisingEventId string, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicFundraisingEventControllerShowWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicFundraisingEventControllerShowWithResponse_Call) Return(_a0 *api.V5ApiWebPublicFundraisingEventControllerShowResponse, _a1 error) *Api_V5ApiWebPublicFundraisingEventControllerShowWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse provides a mock function with given fields: ctx, fundraisingEventId, reqEditors
func (_m *Api) V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse(ctx context.Context, fundraisingEventId string, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fundraisingEventId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...api.RequestEditorFn) *api.V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse); ok {
		r0 = rf(ctx, fundraisingEventId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, fundraisingEventId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse'
type Api_V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - fundraisingEventId string
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse(ctx interface{}, fundraisingEventId interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse_Call {
	return &Api_V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse",
		append([]interface{}{ctx, fundraisingEventId}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse_Call) Run(run func(ctx context.Context, fundraisingEventId string, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse_Call) Return(_a0 *api.V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredResponse, _a1 error) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerConfiguredWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse provides a mock function with given fields: ctx, fundraisingEventId, params, reqEditors
func (_m *Api) V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse(ctx context.Context, fundraisingEventId string, params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fundraisingEventId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParams, ...api.RequestEditorFn) *api.V5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse); ok {
		r0 = rf(ctx, fundraisingEventId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, fundraisingEventId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse'
type Api_V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - fundraisingEventId string
//   - params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse(ctx interface{}, fundraisingEventId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse_Call {
	return &Api_V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse",
		append([]interface{}{ctx, fundraisingEventId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse_Call) Run(run func(ctx context.Context, fundraisingEventId string, params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicFundraisingEventLeaderboardControllerDonorParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse_Call) Return(_a0 *api.V5ApiWebPublicFundraisingEventLeaderboardControllerDonorResponse, _a1 error) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerDonorWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse provides a mock function with given fields: ctx, fundraisingEventId, params, reqEditors
func (_m *Api) V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse(ctx context.Context, fundraisingEventId string, params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fundraisingEventId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParams, ...api.RequestEditorFn) *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse); ok {
		r0 = rf(ctx, fundraisingEventId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, fundraisingEventId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse'
type Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - fundraisingEventId string
//   - params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse(ctx interface{}, fundraisingEventId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse_Call {
	return &Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse",
		append([]interface{}{ctx, fundraisingEventId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse_Call) Run(run func(ctx context.Context, fundraisingEventId string, params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse_Call) Return(_a0 *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceResponse, _a1 error) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessDistanceWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse provides a mock function with given fields: ctx, fundraisingEventId, params, reqEditors
func (_m *Api) V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse(ctx context.Context, fundraisingEventId string, params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fundraisingEventId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParams, ...api.RequestEditorFn) *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse); ok {
		r0 = rf(ctx, fundraisingEventId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, fundraisingEventId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse'
type Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - fundraisingEventId string
//   - params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse(ctx interface{}, fundraisingEventId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse_Call {
	return &Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse",
		append([]interface{}{ctx, fundraisingEventId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse_Call) Run(run func(ctx context.Context, fundraisingEventId string, params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse_Call) Return(_a0 *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeResponse, _a1 error) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamFitnessTimeWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse provides a mock function with given fields: ctx, fundraisingEventId, params, reqEditors
func (_m *Api) V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse(ctx context.Context, fundraisingEventId string, params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fundraisingEventId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParams, ...api.RequestEditorFn) *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse); ok {
		r0 = rf(ctx, fundraisingEventId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, fundraisingEventId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse'
type Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - fundraisingEventId string
//   - params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse(ctx interface{}, fundraisingEventId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse_Call {
	return &Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse",
		append([]interface{}{ctx, fundraisingEventId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse_Call) Run(run func(ctx context.Context, fundraisingEventId string, params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse_Call) Return(_a0 *api.V5ApiWebPublicFundraisingEventLeaderboardControllerTeamResponse, _a1 error) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerTeamWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse provides a mock function with given fields: ctx, fundraisingEventId, params, reqEditors
func (_m *Api) V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse(ctx context.Context, fundraisingEventId string, params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fundraisingEventId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParams, ...api.RequestEditorFn) *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse); ok {
		r0 = rf(ctx, fundraisingEventId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, fundraisingEventId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse'
type Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - fundraisingEventId string
//   - params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse(ctx interface{}, fundraisingEventId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse_Call {
	return &Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse",
		append([]interface{}{ctx, fundraisingEventId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse_Call) Run(run func(ctx context.Context, fundraisingEventId string, params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse_Call) Return(_a0 *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceResponse, _a1 error) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessDistanceWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse provides a mock function with given fields: ctx, fundraisingEventId, params, reqEditors
func (_m *Api) V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse(ctx context.Context, fundraisingEventId string, params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fundraisingEventId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParams, ...api.RequestEditorFn) *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse); ok {
		r0 = rf(ctx, fundraisingEventId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, fundraisingEventId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse'
type Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - fundraisingEventId string
//   - params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse(ctx interface{}, fundraisingEventId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse_Call {
	return &Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse",
		append([]interface{}{ctx, fundraisingEventId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse_Call) Run(run func(ctx context.Context, fundraisingEventId string, params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse_Call) Return(_a0 *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeResponse, _a1 error) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserFitnessTimeWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse provides a mock function with given fields: ctx, fundraisingEventId, params, reqEditors
func (_m *Api) V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse(ctx context.Context, fundraisingEventId string, params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fundraisingEventId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserParams, ...api.RequestEditorFn) *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse); ok {
		r0 = rf(ctx, fundraisingEventId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, fundraisingEventId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse'
type Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - fundraisingEventId string
//   - params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse(ctx interface{}, fundraisingEventId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse_Call {
	return &Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse",
		append([]interface{}{ctx, fundraisingEventId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse_Call) Run(run func(ctx context.Context, fundraisingEventId string, params *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse_Call) Return(_a0 *api.V5ApiWebPublicFundraisingEventLeaderboardControllerUserResponse, _a1 error) *Api_V5ApiWebPublicFundraisingEventLeaderboardControllerUserWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse provides a mock function with given fields: ctx, fundraisingEventId, params, reqEditors
func (_m *Api) V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse(ctx context.Context, fundraisingEventId string, params *api.V5ApiWebPublicFundraisingEventSupportingEventControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fundraisingEventId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicFundraisingEventSupportingEventControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse); ok {
		r0 = rf(ctx, fundraisingEventId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicFundraisingEventSupportingEventControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, fundraisingEventId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse'
type Api_V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - fundraisingEventId string
//   - params *api.V5ApiWebPublicFundraisingEventSupportingEventControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse(ctx interface{}, fundraisingEventId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse",
		append([]interface{}{ctx, fundraisingEventId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse_Call) Run(run func(ctx context.Context, fundraisingEventId string, params *api.V5ApiWebPublicFundraisingEventSupportingEventControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicFundraisingEventSupportingEventControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicFundraisingEventSupportingEventControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicFundraisingEventSupportingEventControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse provides a mock function with given fields: ctx, teamCampaignId, params, reqEditors
func (_m *Api) V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *api.V5ApiWebPublicTeamCampaignChallengeControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicTeamCampaignChallengeControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, teamCampaignId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicTeamCampaignChallengeControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicTeamCampaignChallengeControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicTeamCampaignChallengeControllerIndexResponse); ok {
		r0 = rf(ctx, teamCampaignId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicTeamCampaignChallengeControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicTeamCampaignChallengeControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, teamCampaignId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse'
type Api_V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - teamCampaignId string
//   - params *api.V5ApiWebPublicTeamCampaignChallengeControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse(ctx interface{}, teamCampaignId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse",
		append([]interface{}{ctx, teamCampaignId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse_Call) Run(run func(ctx context.Context, teamCampaignId string, params *api.V5ApiWebPublicTeamCampaignChallengeControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicTeamCampaignChallengeControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicTeamCampaignChallengeControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicTeamCampaignChallengeControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicTeamCampaignControllerShowWithResponse provides a mock function with given fields: ctx, teamCampaignId, reqEditors
func (_m *Api) V5ApiWebPublicTeamCampaignControllerShowWithResponse(ctx context.Context, teamCampaignId string, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicTeamCampaignControllerShowResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, teamCampaignId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicTeamCampaignControllerShowResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...api.RequestEditorFn) *api.V5ApiWebPublicTeamCampaignControllerShowResponse); ok {
		r0 = rf(ctx, teamCampaignId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicTeamCampaignControllerShowResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, teamCampaignId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicTeamCampaignControllerShowWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicTeamCampaignControllerShowWithResponse'
type Api_V5ApiWebPublicTeamCampaignControllerShowWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicTeamCampaignControllerShowWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - teamCampaignId string
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicTeamCampaignControllerShowWithResponse(ctx interface{}, teamCampaignId interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicTeamCampaignControllerShowWithResponse_Call {
	return &Api_V5ApiWebPublicTeamCampaignControllerShowWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicTeamCampaignControllerShowWithResponse",
		append([]interface{}{ctx, teamCampaignId}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicTeamCampaignControllerShowWithResponse_Call) Run(run func(ctx context.Context, teamCampaignId string, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicTeamCampaignControllerShowWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicTeamCampaignControllerShowWithResponse_Call) Return(_a0 *api.V5ApiWebPublicTeamCampaignControllerShowResponse, _a1 error) *Api_V5ApiWebPublicTeamCampaignControllerShowWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse provides a mock function with given fields: ctx, teamCampaignId, params, reqEditors
func (_m *Api) V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *api.V5ApiWebPublicTeamCampaignDonationControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicTeamCampaignDonationControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, teamCampaignId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicTeamCampaignDonationControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicTeamCampaignDonationControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicTeamCampaignDonationControllerIndexResponse); ok {
		r0 = rf(ctx, teamCampaignId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicTeamCampaignDonationControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicTeamCampaignDonationControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, teamCampaignId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse'
type Api_V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - teamCampaignId string
//   - params *api.V5ApiWebPublicTeamCampaignDonationControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse(ctx interface{}, teamCampaignId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse",
		append([]interface{}{ctx, teamCampaignId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse_Call) Run(run func(ctx context.Context, teamCampaignId string, params *api.V5ApiWebPublicTeamCampaignDonationControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicTeamCampaignDonationControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicTeamCampaignDonationControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicTeamCampaignDonationControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse provides a mock function with given fields: ctx, teamCampaignId, params, reqEditors
func (_m *Api) V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse(ctx context.Context, teamCampaignId string, params *api.V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, teamCampaignId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParams, ...api.RequestEditorFn) *api.V5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse); ok {
		r0 = rf(ctx, teamCampaignId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, teamCampaignId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse'
type Api_V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - teamCampaignId string
//   - params *api.V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse(ctx interface{}, teamCampaignId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse_Call {
	return &Api_V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse",
		append([]interface{}{ctx, teamCampaignId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse_Call) Run(run func(ctx context.Context, teamCampaignId string, params *api.V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicTeamCampaignLeaderboardControllerDonorParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse_Call) Return(_a0 *api.V5ApiWebPublicTeamCampaignLeaderboardControllerDonorResponse, _a1 error) *Api_V5ApiWebPublicTeamCampaignLeaderboardControllerDonorWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse provides a mock function with given fields: ctx, teamCampaignId, params, reqEditors
func (_m *Api) V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse(ctx context.Context, teamCampaignId string, params *api.V5ApiWebPublicTeamCampaignLeaderboardControllerUserParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, teamCampaignId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicTeamCampaignLeaderboardControllerUserParams, ...api.RequestEditorFn) *api.V5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse); ok {
		r0 = rf(ctx, teamCampaignId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicTeamCampaignLeaderboardControllerUserParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, teamCampaignId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse'
type Api_V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - teamCampaignId string
//   - params *api.V5ApiWebPublicTeamCampaignLeaderboardControllerUserParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse(ctx interface{}, teamCampaignId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse_Call {
	return &Api_V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse",
		append([]interface{}{ctx, teamCampaignId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse_Call) Run(run func(ctx context.Context, teamCampaignId string, params *api.V5ApiWebPublicTeamCampaignLeaderboardControllerUserParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicTeamCampaignLeaderboardControllerUserParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse_Call) Return(_a0 *api.V5ApiWebPublicTeamCampaignLeaderboardControllerUserResponse, _a1 error) *Api_V5ApiWebPublicTeamCampaignLeaderboardControllerUserWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse provides a mock function with given fields: ctx, teamCampaignId, params, reqEditors
func (_m *Api) V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *api.V5ApiWebPublicTeamCampaignMilestoneControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, teamCampaignId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicTeamCampaignMilestoneControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse); ok {
		r0 = rf(ctx, teamCampaignId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicTeamCampaignMilestoneControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, teamCampaignId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse'
type Api_V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - teamCampaignId string
//   - params *api.V5ApiWebPublicTeamCampaignMilestoneControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse(ctx interface{}, teamCampaignId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse",
		append([]interface{}{ctx, teamCampaignId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse_Call) Run(run func(ctx context.Context, teamCampaignId string, params *api.V5ApiWebPublicTeamCampaignMilestoneControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicTeamCampaignMilestoneControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicTeamCampaignMilestoneControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicTeamCampaignMilestoneControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse provides a mock function with given fields: ctx, teamCampaignId, params, reqEditors
func (_m *Api) V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *api.V5ApiWebPublicTeamCampaignPollControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicTeamCampaignPollControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, teamCampaignId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicTeamCampaignPollControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicTeamCampaignPollControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicTeamCampaignPollControllerIndexResponse); ok {
		r0 = rf(ctx, teamCampaignId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicTeamCampaignPollControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicTeamCampaignPollControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, teamCampaignId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse'
type Api_V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - teamCampaignId string
//   - params *api.V5ApiWebPublicTeamCampaignPollControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse(ctx interface{}, teamCampaignId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse",
		append([]interface{}{ctx, teamCampaignId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse_Call) Run(run func(ctx context.Context, teamCampaignId string, params *api.V5ApiWebPublicTeamCampaignPollControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicTeamCampaignPollControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicTeamCampaignPollControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicTeamCampaignPollControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse provides a mock function with given fields: ctx, teamCampaignId, params, reqEditors
func (_m *Api) V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *api.V5ApiWebPublicTeamCampaignRewardControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicTeamCampaignRewardControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, teamCampaignId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicTeamCampaignRewardControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicTeamCampaignRewardControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicTeamCampaignRewardControllerIndexResponse); ok {
		r0 = rf(ctx, teamCampaignId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicTeamCampaignRewardControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicTeamCampaignRewardControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, teamCampaignId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse'
type Api_V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - teamCampaignId string
//   - params *api.V5ApiWebPublicTeamCampaignRewardControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse(ctx interface{}, teamCampaignId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse",
		append([]interface{}{ctx, teamCampaignId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse_Call) Run(run func(ctx context.Context, teamCampaignId string, params *api.V5ApiWebPublicTeamCampaignRewardControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicTeamCampaignRewardControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicTeamCampaignRewardControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicTeamCampaignRewardControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse provides a mock function with given fields: ctx, teamCampaignId, params, reqEditors
func (_m *Api) V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *api.V5ApiWebPublicTeamCampaignScheduleControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicTeamCampaignScheduleControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, teamCampaignId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicTeamCampaignScheduleControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicTeamCampaignScheduleControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicTeamCampaignScheduleControllerIndexResponse); ok {
		r0 = rf(ctx, teamCampaignId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicTeamCampaignScheduleControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicTeamCampaignScheduleControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, teamCampaignId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse'
type Api_V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - teamCampaignId string
//   - params *api.V5ApiWebPublicTeamCampaignScheduleControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse(ctx interface{}, teamCampaignId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse",
		append([]interface{}{ctx, teamCampaignId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse_Call) Run(run func(ctx context.Context, teamCampaignId string, params *api.V5ApiWebPublicTeamCampaignScheduleControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicTeamCampaignScheduleControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicTeamCampaignScheduleControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicTeamCampaignScheduleControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse provides a mock function with given fields: ctx, teamCampaignId, params, reqEditors
func (_m *Api) V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse(ctx context.Context, teamCampaignId string, params *api.V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, teamCampaignId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse); ok {
		r0 = rf(ctx, teamCampaignId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, teamCampaignId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse'
type Api_V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - teamCampaignId string
//   - params *api.V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse(ctx interface{}, teamCampaignId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse",
		append([]interface{}{ctx, teamCampaignId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse_Call) Run(run func(ctx context.Context, teamCampaignId string, params *api.V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicTeamCampaignSupportingCampaignControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicTeamControllerShowWithResponse provides a mock function with given fields: ctx, teamId, reqEditors
func (_m *Api) V5ApiWebPublicTeamControllerShowWithResponse(ctx context.Context, teamId string, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicTeamControllerShowResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, teamId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicTeamControllerShowResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...api.RequestEditorFn) *api.V5ApiWebPublicTeamControllerShowResponse); ok {
		r0 = rf(ctx, teamId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicTeamControllerShowResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, teamId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicTeamControllerShowWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicTeamControllerShowWithResponse'
type Api_V5ApiWebPublicTeamControllerShowWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicTeamControllerShowWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - teamId string
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicTeamControllerShowWithResponse(ctx interface{}, teamId interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicTeamControllerShowWithResponse_Call {
	return &Api_V5ApiWebPublicTeamControllerShowWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicTeamControllerShowWithResponse",
		append([]interface{}{ctx, teamId}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicTeamControllerShowWithResponse_Call) Run(run func(ctx context.Context, teamId string, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicTeamControllerShowWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicTeamControllerShowWithResponse_Call) Return(_a0 *api.V5ApiWebPublicTeamControllerShowResponse, _a1 error) *Api_V5ApiWebPublicTeamControllerShowWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicTeamMemberControllerIndexWithResponse provides a mock function with given fields: ctx, teamId, params, reqEditors
func (_m *Api) V5ApiWebPublicTeamMemberControllerIndexWithResponse(ctx context.Context, teamId string, params *api.V5ApiWebPublicTeamMemberControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicTeamMemberControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, teamId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicTeamMemberControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicTeamMemberControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicTeamMemberControllerIndexResponse); ok {
		r0 = rf(ctx, teamId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicTeamMemberControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicTeamMemberControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, teamId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicTeamMemberControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicTeamMemberControllerIndexWithResponse'
type Api_V5ApiWebPublicTeamMemberControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicTeamMemberControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - teamId string
//   - params *api.V5ApiWebPublicTeamMemberControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicTeamMemberControllerIndexWithResponse(ctx interface{}, teamId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicTeamMemberControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicTeamMemberControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicTeamMemberControllerIndexWithResponse",
		append([]interface{}{ctx, teamId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicTeamMemberControllerIndexWithResponse_Call) Run(run func(ctx context.Context, teamId string, params *api.V5ApiWebPublicTeamMemberControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicTeamMemberControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicTeamMemberControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicTeamMemberControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicTeamMemberControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicTeamMemberControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse provides a mock function with given fields: ctx, teamId, params, reqEditors
func (_m *Api) V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse(ctx context.Context, teamId string, params *api.V5ApiWebPublicTeamTeamCampaignControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicTeamTeamCampaignControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, teamId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicTeamTeamCampaignControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicTeamTeamCampaignControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicTeamTeamCampaignControllerIndexResponse); ok {
		r0 = rf(ctx, teamId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicTeamTeamCampaignControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicTeamTeamCampaignControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, teamId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse'
type Api_V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - teamId string
//   - params *api.V5ApiWebPublicTeamTeamCampaignControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse(ctx interface{}, teamId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse",
		append([]interface{}{ctx, teamId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse_Call) Run(run func(ctx context.Context, teamId string, params *api.V5ApiWebPublicTeamTeamCampaignControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicTeamTeamCampaignControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicTeamTeamCampaignControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicTeamTeamCampaignControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicUserCampaignControllerIndexWithResponse provides a mock function with given fields: ctx, userId, params, reqEditors
func (_m *Api) V5ApiWebPublicUserCampaignControllerIndexWithResponse(ctx context.Context, userId string, params *api.V5ApiWebPublicUserCampaignControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicUserCampaignControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicUserCampaignControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicUserCampaignControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicUserCampaignControllerIndexResponse); ok {
		r0 = rf(ctx, userId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicUserCampaignControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicUserCampaignControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, userId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicUserCampaignControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicUserCampaignControllerIndexWithResponse'
type Api_V5ApiWebPublicUserCampaignControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicUserCampaignControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - params *api.V5ApiWebPublicUserCampaignControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicUserCampaignControllerIndexWithResponse(ctx interface{}, userId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicUserCampaignControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicUserCampaignControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicUserCampaignControllerIndexWithResponse",
		append([]interface{}{ctx, userId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicUserCampaignControllerIndexWithResponse_Call) Run(run func(ctx context.Context, userId string, params *api.V5ApiWebPublicUserCampaignControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicUserCampaignControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicUserCampaignControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicUserCampaignControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicUserCampaignControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicUserCampaignControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicUserControllerCurrentUserWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *Api) V5ApiWebPublicUserControllerCurrentUserWithResponse(ctx context.Context, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicUserControllerCurrentUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicUserControllerCurrentUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...api.RequestEditorFn) *api.V5ApiWebPublicUserControllerCurrentUserResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicUserControllerCurrentUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicUserControllerCurrentUserWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicUserControllerCurrentUserWithResponse'
type Api_V5ApiWebPublicUserControllerCurrentUserWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicUserControllerCurrentUserWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicUserControllerCurrentUserWithResponse(ctx interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicUserControllerCurrentUserWithResponse_Call {
	return &Api_V5ApiWebPublicUserControllerCurrentUserWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicUserControllerCurrentUserWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicUserControllerCurrentUserWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicUserControllerCurrentUserWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicUserControllerCurrentUserWithResponse_Call) Return(_a0 *api.V5ApiWebPublicUserControllerCurrentUserResponse, _a1 error) *Api_V5ApiWebPublicUserControllerCurrentUserWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicUserControllerShowWithResponse provides a mock function with given fields: ctx, userId, reqEditors
func (_m *Api) V5ApiWebPublicUserControllerShowWithResponse(ctx context.Context, userId string, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicUserControllerShowResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicUserControllerShowResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...api.RequestEditorFn) *api.V5ApiWebPublicUserControllerShowResponse); ok {
		r0 = rf(ctx, userId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicUserControllerShowResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, userId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicUserControllerShowWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicUserControllerShowWithResponse'
type Api_V5ApiWebPublicUserControllerShowWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicUserControllerShowWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicUserControllerShowWithResponse(ctx interface{}, userId interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicUserControllerShowWithResponse_Call {
	return &Api_V5ApiWebPublicUserControllerShowWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicUserControllerShowWithResponse",
		append([]interface{}{ctx, userId}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicUserControllerShowWithResponse_Call) Run(run func(ctx context.Context, userId string, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicUserControllerShowWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicUserControllerShowWithResponse_Call) Return(_a0 *api.V5ApiWebPublicUserControllerShowResponse, _a1 error) *Api_V5ApiWebPublicUserControllerShowWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse provides a mock function with given fields: ctx, userId, params, reqEditors
func (_m *Api) V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse(ctx context.Context, userId string, params *api.V5ApiWebPublicUserIntegrationEventControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicUserIntegrationEventControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicUserIntegrationEventControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicUserIntegrationEventControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicUserIntegrationEventControllerIndexResponse); ok {
		r0 = rf(ctx, userId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicUserIntegrationEventControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicUserIntegrationEventControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, userId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse'
type Api_V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - params *api.V5ApiWebPublicUserIntegrationEventControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse(ctx interface{}, userId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse",
		append([]interface{}{ctx, userId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse_Call) Run(run func(ctx context.Context, userId string, params *api.V5ApiWebPublicUserIntegrationEventControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicUserIntegrationEventControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicUserIntegrationEventControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicUserIntegrationEventControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// V5ApiWebPublicUserTeamControllerIndexWithResponse provides a mock function with given fields: ctx, userId, params, reqEditors
func (_m *Api) V5ApiWebPublicUserTeamControllerIndexWithResponse(ctx context.Context, userId string, params *api.V5ApiWebPublicUserTeamControllerIndexParams, reqEditors ...api.RequestEditorFn) (*api.V5ApiWebPublicUserTeamControllerIndexResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.V5ApiWebPublicUserTeamControllerIndexResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.V5ApiWebPublicUserTeamControllerIndexParams, ...api.RequestEditorFn) *api.V5ApiWebPublicUserTeamControllerIndexResponse); ok {
		r0 = rf(ctx, userId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.V5ApiWebPublicUserTeamControllerIndexResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *api.V5ApiWebPublicUserTeamControllerIndexParams, ...api.RequestEditorFn) error); ok {
		r1 = rf(ctx, userId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Api_V5ApiWebPublicUserTeamControllerIndexWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'V5ApiWebPublicUserTeamControllerIndexWithResponse'
type Api_V5ApiWebPublicUserTeamControllerIndexWithResponse_Call struct {
	*mock.Call
}

// V5ApiWebPublicUserTeamControllerIndexWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - params *api.V5ApiWebPublicUserTeamControllerIndexParams
//   - reqEditors ...api.RequestEditorFn
func (_e *Api_Expecter) V5ApiWebPublicUserTeamControllerIndexWithResponse(ctx interface{}, userId interface{}, params interface{}, reqEditors ...interface{}) *Api_V5ApiWebPublicUserTeamControllerIndexWithResponse_Call {
	return &Api_V5ApiWebPublicUserTeamControllerIndexWithResponse_Call{Call: _e.mock.On("V5ApiWebPublicUserTeamControllerIndexWithResponse",
		append([]interface{}{ctx, userId, params}, reqEditors...)...)}
}

func (_c *Api_V5ApiWebPublicUserTeamControllerIndexWithResponse_Call) Run(run func(ctx context.Context, userId string, params *api.V5ApiWebPublicUserTeamControllerIndexParams, reqEditors ...api.RequestEditorFn)) *Api_V5ApiWebPublicUserTeamControllerIndexWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]api.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(api.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*api.V5ApiWebPublicUserTeamControllerIndexParams), variadicArgs...)
	})
	return _c
}

func (_c *Api_V5ApiWebPublicUserTeamControllerIndexWithResponse_Call) Return(_a0 *api.V5ApiWebPublicUserTeamControllerIndexResponse, _a1 error) *Api_V5ApiWebPublicUserTeamControllerIndexWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewApi interface {
	mock.TestingT
	Cleanup(func())
}

// NewApi creates a new instance of Api. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApi(t mockConstructorTestingTNewApi) *Api {
	mock := &Api{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
